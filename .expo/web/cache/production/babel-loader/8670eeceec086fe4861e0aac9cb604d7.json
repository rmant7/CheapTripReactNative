{"ast":null,"code":"export default function checkDuplicateRouteNames(state){var duplicates=[];var getRouteNames=function getRouteNames(location,state){state.routes.forEach(function(route){var _route$state,_route$state$routeNam;var currentLocation=location?location+\" > \"+route.name:route.name;(_route$state=route.state)===null||_route$state===void 0?void 0:(_route$state$routeNam=_route$state.routeNames)===null||_route$state$routeNam===void 0?void 0:_route$state$routeNam.forEach(function(routeName){if(routeName===route.name){duplicates.push([currentLocation,currentLocation+\" > \"+route.name]);}});if(route.state){getRouteNames(currentLocation,route.state);}});};getRouteNames('',state);return duplicates;}","map":{"version":3,"sources":["checkDuplicateRouteNames.tsx"],"names":["checkDuplicateRouteNames","state","duplicates","getRouteNames","location","routes","forEach","route","currentLocation","name","routeNames","routeName","push"],"mappings":"AAEA,cAAe,SAASA,yBAAwB,CAACC,KAAsB,CAAE,CACvE,GAAMC,WAAsB,CAAG,EAAE,CAEjC,GAAMC,cAAa,CAAG,QAAhBA,cAAa,CACjBC,QAAgB,CAChBH,KAAsD,CACnD,CACHA,KAAK,CAACI,MAAM,CAACC,OAAO,CAAEC,SAAAA,KAA6B,CAAK,CAAA,GAAA,aAAA,CAAA,qBAAA,CACtD,GAAMC,gBAAe,CAAGJ,QAAQ,CACzBA,QAAS,OAAKG,KAAK,CAACE,IAAK,CAC5BF,KAAK,CAACE,IAAI,CAEd,CAAA,YAAA,CAAA,KAAK,CAACR,KAAK,IAAA,IAAA,EAAA,YAAA,GAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAA,CAAA,qBAAA,CAAX,YAAA,CAAaS,UAAU,IAAA,IAAA,EAAA,qBAAA,GAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAvB,qBAAA,CAAyBJ,OAAO,CAAEK,SAAAA,SAAS,CAAK,CAC9C,GAAIA,SAAS,GAAKJ,KAAK,CAACE,IAAI,CAAE,CAC5BP,UAAU,CAACU,IAAI,CAAC,CACdJ,eAAe,CACZA,eAAgB,OAAKD,KAAK,CAACE,IAAK,CACpC,CAAC,CACJ,CACF,CAAC,CAAC,CAEF,GAAIF,KAAK,CAACN,KAAK,CAAE,CACfE,aAAa,CAACK,eAAe,CAAED,KAAK,CAACN,KAAK,CAAC,CAC7C,CACF,CAAC,CAAC,CACJ,CAAC,CAEDE,aAAa,CAAC,EAAE,CAAEF,KAAK,CAAC,CAExB,MAAOC,WAAU,CACnB","sourceRoot":"../../src","sourcesContent":["export default function checkDuplicateRouteNames(state) {\n  const duplicates = [];\n  const getRouteNames = (location, state) => {\n    state.routes.forEach(route => {\n      var _route$state, _route$state$routeNam;\n      const currentLocation = location ? `${location} > ${route.name}` : route.name;\n      (_route$state = route.state) === null || _route$state === void 0 ? void 0 : (_route$state$routeNam = _route$state.routeNames) === null || _route$state$routeNam === void 0 ? void 0 : _route$state$routeNam.forEach(routeName => {\n        if (routeName === route.name) {\n          duplicates.push([currentLocation, `${currentLocation} > ${route.name}`]);\n        }\n      });\n      if (route.state) {\n        getRouteNames(currentLocation, route.state);\n      }\n    });\n  };\n  getRouteNames('', state);\n  return duplicates;\n}\n//# sourceMappingURL=checkDuplicateRouteNames.js.map"]},"metadata":{},"sourceType":"module"}