{"ast":null,"code":"import{getPathFromState,NavigationContainerRefContext,NavigationHelpersContext}from'@react-navigation/core';import*as React from'react';import Platform from\"react-native-web/dist/exports/Platform\";import LinkingContext from\"./LinkingContext\";import useLinkTo from\"./useLinkTo\";var getStateFromParams=function getStateFromParams(params){if(params!==null&&params!==void 0&&params.state){return params.state;}if(params!==null&&params!==void 0&&params.screen){return{routes:[{name:params.screen,params:params.params,state:params.screen?getStateFromParams(params.params):undefined}]};}return undefined;};export default function useLinkProps(_ref){var _ref2;var to=_ref.to,action=_ref.action;var root=React.useContext(NavigationContainerRefContext);var navigation=React.useContext(NavigationHelpersContext);var _React$useContext=React.useContext(LinkingContext),options=_React$useContext.options;var linkTo=useLinkTo();var onPress=function onPress(e){var _e$currentTarget;var shouldHandle=false;if(Platform.OS!=='web'||!e){shouldHandle=e?!e.defaultPrevented:true;}else if(!e.defaultPrevented&&!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)&&(e.button==null||e.button===0)&&[undefined,null,'','self'].includes((_e$currentTarget=e.currentTarget)===null||_e$currentTarget===void 0?void 0:_e$currentTarget.target)){e.preventDefault();shouldHandle=true;}if(shouldHandle){if(action){if(navigation){navigation.dispatch(action);}else if(root){root.dispatch(action);}else{throw new Error(\"Couldn't find a navigation object. Is your component inside NavigationContainer?\");}}else{linkTo(to);}}};var getPathFromStateHelper=(_ref2=options===null||options===void 0?void 0:options.getPathFromState)!=null?_ref2:getPathFromState;var href=typeof to==='string'?to:getPathFromStateHelper({routes:[{name:to.screen,params:to.params,state:getStateFromParams(to.params)}]},options===null||options===void 0?void 0:options.config);return{href:href,accessibilityRole:'link',onPress:onPress};}","map":{"version":3,"sources":["useLinkProps.tsx"],"names":["getPathFromState","NavigationContainerRefContext","NavigationHelpersContext","React","LinkingContext","useLinkTo","getStateFromParams","params","state","screen","routes","name","undefined","useLinkProps","to","action","root","useContext","navigation","options","linkTo","onPress","e","shouldHandle","Platform","OS","defaultPrevented","metaKey","altKey","ctrlKey","shiftKey","button","includes","currentTarget","target","preventDefault","dispatch","Error","getPathFromStateHelper","href","config","accessibilityRole"],"mappings":"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","sourceRoot":"../../src","sourcesContent":["import { getPathFromState, NavigationContainerRefContext, NavigationHelpersContext } from '@react-navigation/core';\nimport * as React from 'react';\nimport { Platform } from 'react-native';\nimport LinkingContext from './LinkingContext';\nimport useLinkTo from './useLinkTo';\nconst getStateFromParams = params => {\n  if (params !== null && params !== void 0 && params.state) {\n    return params.state;\n  }\n  if (params !== null && params !== void 0 && params.screen) {\n    return {\n      routes: [{\n        name: params.screen,\n        params: params.params,\n        // @ts-expect-error\n        state: params.screen ? getStateFromParams(params.params) : undefined\n      }]\n    };\n  }\n  return undefined;\n};\n\n/**\n * Hook to get props for an anchor tag so it can work with in page navigation.\n *\n * @param props.to Absolute path to screen (e.g. `/feeds/hot`).\n * @param props.action Optional action to use for in-page navigation. By default, the path is parsed to an action based on linking config.\n */\nexport default function useLinkProps(_ref) {\n  let {\n    to,\n    action\n  } = _ref;\n  const root = React.useContext(NavigationContainerRefContext);\n  const navigation = React.useContext(NavigationHelpersContext);\n  const {\n    options\n  } = React.useContext(LinkingContext);\n  const linkTo = useLinkTo();\n  const onPress = e => {\n    var _e$currentTarget;\n    let shouldHandle = false;\n    if (Platform.OS !== 'web' || !e) {\n      shouldHandle = e ? !e.defaultPrevented : true;\n    } else if (!e.defaultPrevented &&\n    // onPress prevented default\n    // @ts-expect-error: these properties exist on web, but not in React Native\n    !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && (\n    // ignore clicks with modifier keys\n    // @ts-expect-error: these properties exist on web, but not in React Native\n    e.button == null || e.button === 0) &&\n    // ignore everything but left clicks\n    // @ts-expect-error: these properties exist on web, but not in React Native\n    [undefined, null, '', 'self'].includes((_e$currentTarget = e.currentTarget) === null || _e$currentTarget === void 0 ? void 0 : _e$currentTarget.target) // let browser handle \"target=_blank\" etc.\n    ) {\n      e.preventDefault();\n      shouldHandle = true;\n    }\n    if (shouldHandle) {\n      if (action) {\n        if (navigation) {\n          navigation.dispatch(action);\n        } else if (root) {\n          root.dispatch(action);\n        } else {\n          throw new Error(\"Couldn't find a navigation object. Is your component inside NavigationContainer?\");\n        }\n      } else {\n        linkTo(to);\n      }\n    }\n  };\n  const getPathFromStateHelper = (options === null || options === void 0 ? void 0 : options.getPathFromState) ?? getPathFromState;\n  const href = typeof to === 'string' ? to : getPathFromStateHelper({\n    routes: [{\n      name: to.screen,\n      // @ts-expect-error\n      params: to.params,\n      // @ts-expect-error\n      state: getStateFromParams(to.params)\n    }]\n  }, options === null || options === void 0 ? void 0 : options.config);\n  return {\n    href,\n    accessibilityRole: 'link',\n    onPress\n  };\n}\n//# sourceMappingURL=useLinkProps.js.map"]},"metadata":{},"sourceType":"module"}