{"ast":null,"code":"import{getActionFromState,getStateFromPath,NavigationContainerRefContext}from'@react-navigation/core';import*as React from'react';import LinkingContext from\"./LinkingContext\";export default function useLinkTo(){var navigation=React.useContext(NavigationContainerRefContext);var linking=React.useContext(LinkingContext);var linkTo=React.useCallback(function(to){if(navigation===undefined){throw new Error(\"Couldn't find a navigation object. Is your component inside NavigationContainer?\");}if(typeof to!=='string'){navigation.navigate(to.screen,to.params);return;}if(!to.startsWith('/')){throw new Error(\"The path must start with '/' (\"+to+\").\");}var options=linking.options;var state=options!==null&&options!==void 0&&options.getStateFromPath?options.getStateFromPath(to,options.config):getStateFromPath(to,options===null||options===void 0?void 0:options.config);if(state){var action=getActionFromState(state,options===null||options===void 0?void 0:options.config);if(action!==undefined){navigation.dispatch(action);}else{navigation.reset(state);}}else{throw new Error('Failed to parse the path to a navigation state.');}},[linking,navigation]);return linkTo;}","map":{"version":3,"sources":["useLinkTo.tsx"],"names":["getActionFromState","getStateFromPath","NavigationContainerRefContext","React","LinkingContext","useLinkTo","navigation","useContext","linking","linkTo","useCallback","to","undefined","Error","navigate","screen","params","startsWith","options","state","config","action","dispatch","reset"],"mappings":"AAAA,OACEA,kBAAkB,CAClBC,gBAAgB,CAChBC,6BAA6B,KACxB,wBAAwB,CAC/B,MAAO,GAAKC,MAAK,KAAM,OAAO,CAE9B,MAAOC,eAAc,wBAiBrB,cAAe,SAASC,UAAS,EAE7B,CACF,GAAMC,WAAU,CAAGH,KAAK,CAACI,UAAU,CAACL,6BAA6B,CAAC,CAClE,GAAMM,QAAO,CAAGL,KAAK,CAACI,UAAU,CAACH,cAAc,CAAC,CAEhD,GAAMK,OAAM,CAAGN,KAAK,CAACO,WAAW,CAC7BC,SAAAA,EAAiB,CAAK,CACrB,GAAIL,UAAU,GAAKM,SAAS,CAAE,CAC5B,KAAM,IAAIC,MAAK,CACb,kFAAkF,CACnF,CACH,CAEA,GAAI,MAAOF,GAAE,GAAK,QAAQ,CAAE,CAE1BL,UAAU,CAACQ,QAAQ,CAACH,EAAE,CAACI,MAAM,CAAEJ,EAAE,CAACK,MAAM,CAAC,CACzC,OACF,CAEA,GAAI,CAACL,EAAE,CAACM,UAAU,CAAC,GAAG,CAAC,CAAE,CACvB,KAAM,IAAIJ,MAAK,kCAAkCF,EAAG,MAAI,CAC1D,CAEA,GAAQO,QAAAA,CAAYV,OAAO,CAAnBU,OAAAA,CAER,GAAMC,MAAK,CAAGD,OAAO,GAAA,IAAA,EAAPA,OAAO,GAAA,IAAA,EAAA,EAAPA,OAAO,CAAEjB,gBAAgB,CACnCiB,OAAO,CAACjB,gBAAgB,CAACU,EAAE,CAAEO,OAAO,CAACE,MAAM,CAAC,CAC5CnB,gBAAgB,CAACU,EAAE,CAAEO,OAAO,GAAA,IAAA,EAAPA,OAAO,GAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAPA,OAAO,CAAEE,MAAM,CAAC,CAEzC,GAAID,KAAK,CAAE,CACT,GAAME,OAAM,CAAGrB,kBAAkB,CAACmB,KAAK,CAAED,OAAO,GAAA,IAAA,EAAPA,OAAO,GAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAPA,OAAO,CAAEE,MAAM,CAAC,CAEzD,GAAIC,MAAM,GAAKT,SAAS,CAAE,CACxBN,UAAU,CAACgB,QAAQ,CAACD,MAAM,CAAC,CAC7B,CAAC,IAAM,CACLf,UAAU,CAACiB,KAAK,CAACJ,KAAK,CAAC,CACzB,CACF,CAAC,IAAM,CACL,KAAM,IAAIN,MAAK,CAAC,iDAAiD,CAAC,CACpE,CACF,CAAC,CACD,CAACL,OAAO,CAAEF,UAAU,CAAC,CACtB,CAED,MAAOG,OAAM,CACf","sourceRoot":"../../src","sourcesContent":["import { getActionFromState, getStateFromPath, NavigationContainerRefContext } from '@react-navigation/core';\nimport * as React from 'react';\nimport LinkingContext from './LinkingContext';\nexport default function useLinkTo() {\n  const navigation = React.useContext(NavigationContainerRefContext);\n  const linking = React.useContext(LinkingContext);\n  const linkTo = React.useCallback(to => {\n    if (navigation === undefined) {\n      throw new Error(\"Couldn't find a navigation object. Is your component inside NavigationContainer?\");\n    }\n    if (typeof to !== 'string') {\n      // @ts-expect-error: This is fine\n      navigation.navigate(to.screen, to.params);\n      return;\n    }\n    if (!to.startsWith('/')) {\n      throw new Error(`The path must start with '/' (${to}).`);\n    }\n    const {\n      options\n    } = linking;\n    const state = options !== null && options !== void 0 && options.getStateFromPath ? options.getStateFromPath(to, options.config) : getStateFromPath(to, options === null || options === void 0 ? void 0 : options.config);\n    if (state) {\n      const action = getActionFromState(state, options === null || options === void 0 ? void 0 : options.config);\n      if (action !== undefined) {\n        navigation.dispatch(action);\n      } else {\n        navigation.reset(state);\n      }\n    } else {\n      throw new Error('Failed to parse the path to a navigation state.');\n    }\n  }, [linking, navigation]);\n  return linkTo;\n}\n//# sourceMappingURL=useLinkTo.js.map"]},"metadata":{},"sourceType":"module"}