{"ast":null,"code":"import Animated from\"react-native-web/dist/exports/Animated\";import color from'color';import{MD2DarkTheme}from\"./themes/v2/DarkTheme\";export var isAnimatedValue=function isAnimatedValue(it){return it instanceof Animated.Value;};export default function overlay(elevation){var _MD2DarkTheme$colors;var surfaceColor=arguments.length>1&&arguments[1]!==undefined?arguments[1]:(_MD2DarkTheme$colors=MD2DarkTheme.colors)===null||_MD2DarkTheme$colors===void 0?void 0:_MD2DarkTheme$colors.surface;if(isAnimatedValue(elevation)){var inputRange=[0,1,2,3,8,24];return elevation.interpolate({inputRange:inputRange,outputRange:inputRange.map(function(elevation){return calculateColor(surfaceColor,elevation);})});}return calculateColor(surfaceColor,elevation);}function calculateColor(surfaceColor){var elevation=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1;var overlayTransparency;if(elevation>=1&&elevation<=24){overlayTransparency=elevationOverlayTransparency[elevation];}else if(elevation>24){overlayTransparency=elevationOverlayTransparency[24];}else{overlayTransparency=elevationOverlayTransparency[1];}return color(surfaceColor).mix(color('white'),overlayTransparency*0.01).hex();}var elevationOverlayTransparency={1:5,2:7,3:8,4:9,5:10,6:11,7:11.5,8:12,9:12.5,10:13,11:13.5,12:14,13:14.25,14:14.5,15:14.75,16:15,17:15.12,18:15.24,19:15.36,20:15.48,21:15.6,22:15.72,23:15.84,24:16};","map":{"version":3,"mappings":"6DAEA,MAAOA,MAAK,KAAM,OAAO,CAEzB,OAASC,YAAY,6BAErB,MAAO,IAAMC,gBAAe,CAC1BC,QADWD,gBAAe,CAC1BC,EAAqE,QAC5CA,GAAE,WAAYC,SAAQ,CAACC,KAAK,GAEvD,cAAe,SAASC,QAAO,CAC7BC,SAAY,CAEiE,6BAD7EC,aAAoB,iFAAGP,YAAY,CAACQ,MAAM,+CAAnBC,qBAAqBC,OAAO,CAEnD,GAAIT,eAAe,CAACK,SAAS,CAAC,CAAE,CAC9B,GAAMK,WAAU,CAAG,CAAC,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,CAAC,CAAE,EAAE,CAAC,CAGtC,MAAOL,UAAS,CAACM,WAAW,CAAC,CAC3BD,UAAU,CAAVA,UAAU,CACVE,WAAW,CAAEF,UAAU,CAACG,GAAG,CAAER,kBAAS,CAAK,CACzC,MAAOS,eAAc,CAACR,YAAY,CAAED,SAAS,CAAC,CAChD,CAAC,CACH,CAAC,CAAC,CACJ,CAGA,MAAOS,eAAc,CAACR,YAAY,CAAED,SAAS,CAAC,CAChD,CAEA,QAASS,eAAc,CAACR,YAAoB,CAAyB,IAAvBD,UAAiB,2DAAG,CAAC,CACjE,GAAIU,oBAA2B,CAC/B,GAAIV,SAAS,EAAI,CAAC,EAAIA,SAAS,EAAI,EAAE,CAAE,CACrCU,mBAAmB,CAAGC,4BAA4B,CAACX,SAAS,CAAC,CAC/D,CAAC,IAAM,IAAIA,SAAS,CAAG,EAAE,CAAE,CACzBU,mBAAmB,CAAGC,4BAA4B,CAAC,EAAE,CAAC,CACxD,CAAC,IAAM,CACLD,mBAAmB,CAAGC,4BAA4B,CAAC,CAAC,CAAC,CACvD,CACA,MAAOlB,MAAK,CAACQ,YAAY,CAAC,CACvBW,GAAG,CAACnB,KAAK,CAAC,OAAO,CAAC,CAAEiB,mBAAmB,CAAG,IAAI,CAAC,CAC/CG,GAAG,EAAE,CACV,CAEA,GAAMF,6BAAoD,CAAG,CAC3D,CAAC,CAAE,CAAC,CACJ,CAAC,CAAE,CAAC,CACJ,CAAC,CAAE,CAAC,CACJ,CAAC,CAAE,CAAC,CACJ,CAAC,CAAE,EAAE,CACL,CAAC,CAAE,EAAE,CACL,CAAC,CAAE,IAAI,CACP,CAAC,CAAE,EAAE,CACL,CAAC,CAAE,IAAI,CACP,EAAE,CAAE,EAAE,CACN,EAAE,CAAE,IAAI,CACR,EAAE,CAAE,EAAE,CACN,EAAE,CAAE,KAAK,CACT,EAAE,CAAE,IAAI,CACR,EAAE,CAAE,KAAK,CACT,EAAE,CAAE,EAAE,CACN,EAAE,CAAE,KAAK,CACT,EAAE,CAAE,KAAK,CACT,EAAE,CAAE,KAAK,CACT,EAAE,CAAE,KAAK,CACT,EAAE,CAAE,IAAI,CACR,EAAE,CAAE,KAAK,CACT,EAAE,CAAE,KAAK,CACT,EAAE,CAAE,EACN,CAAC","names":["color","MD2DarkTheme","isAnimatedValue","it","Animated","Value","overlay","elevation","surfaceColor","colors","_MD2DarkTheme$colors","surface","inputRange","interpolate","outputRange","map","calculateColor","overlayTransparency","elevationOverlayTransparency","mix","hex"],"sources":["overlay.tsx"],"sourcesContent":["import { Animated } from 'react-native';\n\nimport color from 'color';\n\nimport { MD2DarkTheme } from './themes/v2/DarkTheme';\n\nexport const isAnimatedValue = (\n  it: number | string | Animated.AnimatedInterpolation<number | string>\n): it is Animated.Value => it instanceof Animated.Value;\n\nexport default function overlay<T extends Animated.Value | number>(\n  elevation: T,\n  surfaceColor: string = MD2DarkTheme.colors?.surface\n): T extends number ? string : Animated.AnimatedInterpolation<number | string> {\n  if (isAnimatedValue(elevation)) {\n    const inputRange = [0, 1, 2, 3, 8, 24];\n\n    // @ts-expect-error: TS doesn't seem to refine the type correctly\n    return elevation.interpolate({\n      inputRange,\n      outputRange: inputRange.map((elevation) => {\n        return calculateColor(surfaceColor, elevation);\n      }),\n    });\n  }\n\n  // @ts-expect-error: TS doesn't seem to refine the type correctly\n  return calculateColor(surfaceColor, elevation);\n}\n\nfunction calculateColor(surfaceColor: string, elevation: number = 1) {\n  let overlayTransparency: number;\n  if (elevation >= 1 && elevation <= 24) {\n    overlayTransparency = elevationOverlayTransparency[elevation];\n  } else if (elevation > 24) {\n    overlayTransparency = elevationOverlayTransparency[24];\n  } else {\n    overlayTransparency = elevationOverlayTransparency[1];\n  }\n  return color(surfaceColor)\n    .mix(color('white'), overlayTransparency * 0.01)\n    .hex();\n}\n\nconst elevationOverlayTransparency: Record<string, number> = {\n  1: 5,\n  2: 7,\n  3: 8,\n  4: 9,\n  5: 10,\n  6: 11,\n  7: 11.5,\n  8: 12,\n  9: 12.5,\n  10: 13,\n  11: 13.5,\n  12: 14,\n  13: 14.25,\n  14: 14.5,\n  15: 14.75,\n  16: 15,\n  17: 15.12,\n  18: 15.24,\n  19: 15.36,\n  20: 15.48,\n  21: 15.6,\n  22: 15.72,\n  23: 15.84,\n  24: 16,\n};\n"]},"metadata":{},"sourceType":"module"}