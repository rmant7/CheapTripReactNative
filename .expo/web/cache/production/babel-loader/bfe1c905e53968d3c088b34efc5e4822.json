{"ast":null,"code":"import NativeModules from\"react-native-web/dist/exports/NativeModules\";import{getAssetByID}from\"./AssetRegistry\";import AssetSourceResolver from\"./AssetSourceResolver\";var _customSourceTransformer;var _serverURL;var _sourceCodeScriptURL;function getSourceCodeScriptURL(){var _sourceCode;if(_sourceCodeScriptURL){return _sourceCodeScriptURL;}var sourceCode=typeof nativeExtensions!=='undefined'?nativeExtensions.SourceCode:null;if(!sourceCode){sourceCode=NativeModules==null?void 0:NativeModules.SourceCode;}_sourceCodeScriptURL=(_sourceCode=sourceCode)==null?void 0:_sourceCode.scriptURL;return _sourceCodeScriptURL;}function getDevServerURL(){if(_serverURL===undefined){var sourceCodeScriptURL=getSourceCodeScriptURL();var match=sourceCodeScriptURL&&sourceCodeScriptURL.match(/^https?:\\/\\/.*?\\//);if(match){_serverURL=match[0];}else{_serverURL=null;}}return _serverURL;}export function setCustomSourceTransformer(transformer){_customSourceTransformer=transformer;}export default function resolveAssetSource(source){if(typeof source==='object'){return source;}var asset=getAssetByID(source);if(!asset){return undefined;}var resolver=new AssetSourceResolver(getDevServerURL(),null,asset);if(_customSourceTransformer){return _customSourceTransformer(resolver);}return resolver.defaultAsset();}Object.defineProperty(resolveAssetSource,'setCustomSourceTransformer',{get:function get(){return setCustomSourceTransformer;}});var pickScale=AssetSourceResolver.pickScale;export{pickScale};","map":{"version":3,"sources":["../src/resolveAssetSource.web.ts"],"names":[],"mappings":"uEAEA,OAAS,YAAY,uBACrB,MAAO,oBAA4C,6BAInD,GAAI,yBAAwB,CAC5B,GAAI,WAAqC,CACzC,GAAI,qBAA+C,CAEnD,QAAS,uBAAsB,EAAA,iBAC7B,GAAI,oBAAoB,CAAE,CACxB,MAAO,qBAAoB,CAC5B,CAED,GAAI,WAAU,CAAG,MAAO,iBAAgB,GAAK,WAAW,CAAG,gBAAgB,CAAC,UAAU,CAAG,IAAI,CAC7F,GAAI,CAAC,UAAU,CAAE,CACf,UAAU,CAAG,aAAa,cAAb,aAAa,CAAE,UAAU,CACvC,CACD,oBAAoB,cAAG,UAAU,eAAV,YAAY,SAAS,CAC5C,MAAO,qBAAoB,CAC7B,CAEA,QAAS,gBAAe,EAAA,CACtB,GAAI,UAAU,GAAK,SAAS,CAAE,CAC5B,GAAM,oBAAmB,CAAG,sBAAsB,EAAE,CACpD,GAAM,MAAK,CAAG,mBAAmB,EAAI,mBAAmB,CAAC,KAAK,CAAC,mBAAmB,CAAC,CACnF,GAAI,KAAK,CAAE,CAET,UAAU,CAAG,KAAK,CAAC,CAAC,CAAC,C,CACtB,IAAM,CAEL,UAAU,CAAG,IAAI,CAClB,CACF,CACD,MAAO,WAAU,CACnB,CAEA,MAAM,SAAU,2BAA0B,CACxC,WAAmE,CAAA,CAEnE,wBAAwB,CAAG,WAAW,CACxC,CAMA,cAAc,SAAU,mBAAkB,CAAC,MAAW,CAAA,CACpD,GAAI,MAAO,OAAM,GAAK,QAAQ,CAAE,CAC9B,MAAO,OAAM,CACd,CAED,GAAM,MAAK,CAAG,YAAY,CAAC,MAAM,CAAC,CAClC,GAAI,CAAC,KAAK,CAAE,CACV,MAAO,UAAS,CACjB,CAED,GAAM,SAAQ,CAAG,GAAI,oBAAmB,CAAC,eAAe,EAAE,CAAE,IAAI,CAAE,KAAK,CAAC,CACxE,GAAI,wBAAwB,CAAE,CAC5B,MAAO,yBAAwB,CAAC,QAAQ,CAAC,CAC1C,CACD,MAAO,SAAQ,CAAC,YAAY,EAAE,CAChC,CAEA,MAAM,CAAC,cAAc,CAAC,kBAAkB,CAAE,4BAA4B,CAAE,CACtE,GAAG,eAAA,CACD,MAAO,2BAA0B,CACnC,C,CACD,CAAC,CAEK,GAAQ,UAAS,CAAK,mBAAmB,CAAjC,SAAS,CAAyB","sourcesContent":["import { NativeModules } from 'react-native';\n\nimport { getAssetByID } from './AssetRegistry';\nimport AssetSourceResolver, { ResolvedAssetSource } from './AssetSourceResolver';\n\ndeclare let nativeExtensions: { SourceCode?: { scriptURL: string } } | undefined;\n\nlet _customSourceTransformer;\nlet _serverURL: string | undefined | null;\nlet _sourceCodeScriptURL: string | undefined | null;\n\nfunction getSourceCodeScriptURL(): string | undefined | null {\n  if (_sourceCodeScriptURL) {\n    return _sourceCodeScriptURL;\n  }\n\n  let sourceCode = typeof nativeExtensions !== 'undefined' ? nativeExtensions.SourceCode : null;\n  if (!sourceCode) {\n    sourceCode = NativeModules?.SourceCode;\n  }\n  _sourceCodeScriptURL = sourceCode?.scriptURL;\n  return _sourceCodeScriptURL;\n}\n\nfunction getDevServerURL(): string | null {\n  if (_serverURL === undefined) {\n    const sourceCodeScriptURL = getSourceCodeScriptURL();\n    const match = sourceCodeScriptURL && sourceCodeScriptURL.match(/^https?:\\/\\/.*?\\//);\n    if (match) {\n      // jsBundle was loaded from network\n      _serverURL = match[0];\n    } else {\n      // jsBundle was loaded from file\n      _serverURL = null;\n    }\n  }\n  return _serverURL;\n}\n\nexport function setCustomSourceTransformer(\n  transformer: (resolver: AssetSourceResolver) => ResolvedAssetSource\n): void {\n  _customSourceTransformer = transformer;\n}\n\n/**\n * `source` is either a number (opaque type returned by require('./foo.png'))\n * or an `ImageSource` like { uri: '<http location || file path>' }\n */\nexport default function resolveAssetSource(source: any): ResolvedAssetSource | undefined {\n  if (typeof source === 'object') {\n    return source;\n  }\n\n  const asset = getAssetByID(source);\n  if (!asset) {\n    return undefined;\n  }\n\n  const resolver = new AssetSourceResolver(getDevServerURL(), null, asset);\n  if (_customSourceTransformer) {\n    return _customSourceTransformer(resolver);\n  }\n  return resolver.defaultAsset();\n}\n\nObject.defineProperty(resolveAssetSource, 'setCustomSourceTransformer', {\n  get() {\n    return setCustomSourceTransformer;\n  },\n});\n\nexport const { pickScale } = AssetSourceResolver;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}