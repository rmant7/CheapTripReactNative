{"ast":null,"code":"import{isJestEnv}from\"../utils\";export var handlerIDToTag={};var gestures=new Map();var oldHandlers=new Map();var testIDs=new Map();var handlerTag=1;export function getNextHandlerTag(){return handlerTag++;}export function registerHandler(handlerTag,handler,testID){gestures.set(handlerTag,handler);if(isJestEnv()&&testID){testIDs.set(testID,handlerTag);}}export function registerOldGestureHandler(handlerTag,handler){oldHandlers.set(handlerTag,handler);}export function unregisterHandler(handlerTag,testID){gestures.delete(handlerTag);if(isJestEnv()&&testID){testIDs.delete(testID);}}export function findHandler(handlerTag){return gestures.get(handlerTag);}export function findOldGestureHandler(handlerTag){return oldHandlers.get(handlerTag);}export function findHandlerByTestID(testID){var handlerTag=testIDs.get(testID);if(handlerTag!==undefined){var _findHandler;return(_findHandler=findHandler(handlerTag))!==null&&_findHandler!==void 0?_findHandler:null;}return null;}","map":{"version":3,"mappings":"AAAA,OAASA,SAAT,gBAIA,MAAO,IAAMC,eAAsC,CAAG,EAA/C,CACP,GAAMC,SAAQ,CAAG,GAAIC,IAAJ,EAAjB,CACA,GAAMC,YAAW,CAAG,GAAID,IAAJ,EAApB,CACA,GAAME,QAAO,CAAG,GAAIF,IAAJ,EAAhB,CAEA,GAAIG,WAAU,CAAG,CAAjB,CAEA,MAAO,SAASC,kBAAT,EAAqC,CAC1C,MAAOD,WAAU,EAAjB,CACD,CAED,MAAO,SAASE,gBAAT,CACLF,UADK,CAELG,OAFK,CAGLC,MAHK,CAIL,CACAR,QAAQ,CAACS,GAAT,CAAaL,UAAb,CAAyBG,OAAzB,EACA,GAAIT,SAAS,IAAMU,MAAnB,CAA2B,CACzBL,OAAO,CAACM,GAAR,CAAYD,MAAZ,CAAoBJ,UAApB,EACD,CACF,CAED,MAAO,SAASM,0BAAT,CACLN,UADK,CAELG,OAFK,CAGL,CACAL,WAAW,CAACO,GAAZ,CAAgBL,UAAhB,CAA4BG,OAA5B,EACD,CAED,MAAO,SAASI,kBAAT,CAA2BP,UAA3B,CAA+CI,MAA/C,CAAgE,CACrER,QAAQ,CAACY,MAAT,CAAgBR,UAAhB,EACA,GAAIN,SAAS,IAAMU,MAAnB,CAA2B,CACzBL,OAAO,CAACS,MAAR,CAAeJ,MAAf,EACD,CACF,CAED,MAAO,SAASK,YAAT,CAAqBT,UAArB,CAAyC,CAC9C,MAAOJ,SAAQ,CAACc,GAAT,CAAaV,UAAb,CAAP,CACD,CAED,MAAO,SAASW,sBAAT,CAA+BX,UAA/B,CAAmD,CACxD,MAAOF,YAAW,CAACY,GAAZ,CAAgBV,UAAhB,CAAP,CACD,CAED,MAAO,SAASY,oBAAT,CAA6BR,MAA7B,CAA6C,CAClD,GAAMJ,WAAU,CAAGD,OAAO,CAACW,GAAR,CAAYN,MAAZ,CAAnB,CACA,GAAIJ,UAAU,GAAKa,SAAnB,CAA8B,kBAC5B,oBAAOJ,WAAW,CAACT,UAAD,CAAlB,6CAAkC,IAAlC,CACD,CACD,MAAO,KAAP,CACD","names":["isJestEnv","handlerIDToTag","gestures","Map","oldHandlers","testIDs","handlerTag","getNextHandlerTag","registerHandler","handler","testID","set","registerOldGestureHandler","unregisterHandler","delete","findHandler","get","findOldGestureHandler","findHandlerByTestID","undefined"],"sources":["handlersRegistry.ts"],"sourcesContent":["import { isJestEnv } from '../utils';\nimport { GestureType } from './gestures/gesture';\nimport { GestureEvent, HandlerStateChangeEvent } from './gestureHandlerCommon';\n\nexport const handlerIDToTag: Record<string, number> = {};\nconst gestures = new Map<number, GestureType>();\nconst oldHandlers = new Map<number, GestureHandlerCallbacks>();\nconst testIDs = new Map<string, number>();\n\nlet handlerTag = 1;\n\nexport function getNextHandlerTag(): number {\n  return handlerTag++;\n}\n\nexport function registerHandler(\n  handlerTag: number,\n  handler: GestureType,\n  testID?: string\n) {\n  gestures.set(handlerTag, handler);\n  if (isJestEnv() && testID) {\n    testIDs.set(testID, handlerTag);\n  }\n}\n\nexport function registerOldGestureHandler(\n  handlerTag: number,\n  handler: GestureHandlerCallbacks\n) {\n  oldHandlers.set(handlerTag, handler);\n}\n\nexport function unregisterHandler(handlerTag: number, testID?: string) {\n  gestures.delete(handlerTag);\n  if (isJestEnv() && testID) {\n    testIDs.delete(testID);\n  }\n}\n\nexport function findHandler(handlerTag: number) {\n  return gestures.get(handlerTag);\n}\n\nexport function findOldGestureHandler(handlerTag: number) {\n  return oldHandlers.get(handlerTag);\n}\n\nexport function findHandlerByTestID(testID: string) {\n  const handlerTag = testIDs.get(testID);\n  if (handlerTag !== undefined) {\n    return findHandler(handlerTag) ?? null;\n  }\n  return null;\n}\n\nexport interface GestureHandlerCallbacks {\n  onGestureEvent: (event: GestureEvent<any>) => void;\n  onGestureStateChange: (event: HandlerStateChangeEvent<any>) => void;\n}\n"]},"metadata":{},"sourceType":"module"}