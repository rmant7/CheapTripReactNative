{"ast":null,"code":"import*as React from'react';import NavigationBuilderContext from\"./NavigationBuilderContext\";import useOnPreventRemove,{shouldPreventRemove}from\"./useOnPreventRemove\";export default function useOnAction(_ref){var router=_ref.router,getState=_ref.getState,setState=_ref.setState,key=_ref.key,actionListeners=_ref.actionListeners,beforeRemoveListeners=_ref.beforeRemoveListeners,routerConfigOptions=_ref.routerConfigOptions,emitter=_ref.emitter;var _React$useContext=React.useContext(NavigationBuilderContext),onActionParent=_React$useContext.onAction,onRouteFocusParent=_React$useContext.onRouteFocus,addListenerParent=_React$useContext.addListener,onDispatchAction=_React$useContext.onDispatchAction;var routerConfigOptionsRef=React.useRef(routerConfigOptions);React.useEffect(function(){routerConfigOptionsRef.current=routerConfigOptions;});var onAction=React.useCallback(function(action){var visitedNavigators=arguments.length>1&&arguments[1]!==undefined?arguments[1]:new Set();var state=getState();if(visitedNavigators.has(state.key)){return false;}visitedNavigators.add(state.key);if(typeof action.target!=='string'||action.target===state.key){var result=router.getStateForAction(state,action,routerConfigOptionsRef.current);result=result===null&&action.target===state.key?state:result;if(result!==null){onDispatchAction(action,state===result);if(state!==result){var isPrevented=shouldPreventRemove(emitter,beforeRemoveListeners,state.routes,result.routes,action);if(isPrevented){return true;}setState(result);}if(onRouteFocusParent!==undefined){var shouldFocus=router.shouldActionChangeFocus(action);if(shouldFocus&&key!==undefined){onRouteFocusParent(key);}}return true;}}if(onActionParent!==undefined){if(onActionParent(action,visitedNavigators)){return true;}}for(var i=actionListeners.length-1;i>=0;i--){var listener=actionListeners[i];if(listener(action,visitedNavigators)){return true;}}return false;},[actionListeners,beforeRemoveListeners,emitter,getState,key,onActionParent,onDispatchAction,onRouteFocusParent,router,setState]);useOnPreventRemove({getState:getState,emitter:emitter,beforeRemoveListeners:beforeRemoveListeners});React.useEffect(function(){return addListenerParent===null||addListenerParent===void 0?void 0:addListenerParent('action',onAction);},[addListenerParent,onAction]);return onAction;}","map":{"version":3,"sources":["useOnAction.tsx"],"names":["React","NavigationBuilderContext","useOnPreventRemove","shouldPreventRemove","useOnAction","router","getState","setState","key","actionListeners","beforeRemoveListeners","routerConfigOptions","emitter","onAction","onActionParent","onRouteFocus","onRouteFocusParent","addListener","addListenerParent","onDispatchAction","useContext","routerConfigOptionsRef","useRef","useEffect","current","useCallback","action","visitedNavigators","Set","state","has","add","target","result","getStateForAction","isPrevented","routes","undefined","shouldFocus","shouldActionChangeFocus","i","length","listener"],"mappings":"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","sourceRoot":"../../src","sourcesContent":["import * as React from 'react';\nimport NavigationBuilderContext from './NavigationBuilderContext';\nimport useOnPreventRemove, { shouldPreventRemove } from './useOnPreventRemove';\n/**\n * Hook to handle actions for a navigator, including state updates and bubbling.\n *\n * Bubbling an action is achieved in 2 ways:\n * 1. To bubble action to parent, we expose the action handler in context and then access the parent context\n * 2. To bubble action to child, child adds event listeners subscribing to actions from parent\n *\n * When the action handler handles as action, it returns `true`, otherwise `false`.\n */\nexport default function useOnAction(_ref) {\n  let {\n    router,\n    getState,\n    setState,\n    key,\n    actionListeners,\n    beforeRemoveListeners,\n    routerConfigOptions,\n    emitter\n  } = _ref;\n  const {\n    onAction: onActionParent,\n    onRouteFocus: onRouteFocusParent,\n    addListener: addListenerParent,\n    onDispatchAction\n  } = React.useContext(NavigationBuilderContext);\n  const routerConfigOptionsRef = React.useRef(routerConfigOptions);\n  React.useEffect(() => {\n    routerConfigOptionsRef.current = routerConfigOptions;\n  });\n  const onAction = React.useCallback(function (action) {\n    let visitedNavigators = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Set();\n    const state = getState();\n\n    // Since actions can bubble both up and down, they could come to the same navigator again\n    // We keep track of navigators which have already tried to handle the action and return if it's already visited\n    if (visitedNavigators.has(state.key)) {\n      return false;\n    }\n    visitedNavigators.add(state.key);\n    if (typeof action.target !== 'string' || action.target === state.key) {\n      let result = router.getStateForAction(state, action, routerConfigOptionsRef.current);\n\n      // If a target is specified and set to current navigator, the action shouldn't bubble\n      // So instead of `null`, we use the state object for such cases to signal that action was handled\n      result = result === null && action.target === state.key ? state : result;\n      if (result !== null) {\n        onDispatchAction(action, state === result);\n        if (state !== result) {\n          const isPrevented = shouldPreventRemove(emitter, beforeRemoveListeners, state.routes, result.routes, action);\n          if (isPrevented) {\n            return true;\n          }\n          setState(result);\n        }\n        if (onRouteFocusParent !== undefined) {\n          // Some actions such as `NAVIGATE` also want to bring the navigated route to focus in the whole tree\n          // This means we need to focus all of the parent navigators of this navigator as well\n          const shouldFocus = router.shouldActionChangeFocus(action);\n          if (shouldFocus && key !== undefined) {\n            onRouteFocusParent(key);\n          }\n        }\n        return true;\n      }\n    }\n    if (onActionParent !== undefined) {\n      // Bubble action to the parent if the current navigator didn't handle it\n      if (onActionParent(action, visitedNavigators)) {\n        return true;\n      }\n    }\n\n    // If the action wasn't handled by current navigator or a parent navigator, let children handle it\n    for (let i = actionListeners.length - 1; i >= 0; i--) {\n      const listener = actionListeners[i];\n      if (listener(action, visitedNavigators)) {\n        return true;\n      }\n    }\n    return false;\n  }, [actionListeners, beforeRemoveListeners, emitter, getState, key, onActionParent, onDispatchAction, onRouteFocusParent, router, setState]);\n  useOnPreventRemove({\n    getState,\n    emitter,\n    beforeRemoveListeners\n  });\n  React.useEffect(() => addListenerParent === null || addListenerParent === void 0 ? void 0 : addListenerParent('action', onAction), [addListenerParent, onAction]);\n  return onAction;\n}\n//# sourceMappingURL=useOnAction.js.map"]},"metadata":{},"sourceType":"module"}