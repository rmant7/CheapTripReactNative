{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}var VELOCITY_FACTOR=0.2;var MAX_POINTERS=20;var PointerTracker=function(){function PointerTracker(){_classCallCheck(this,PointerTracker);_defineProperty(this,\"trackedPointers\",new Map());_defineProperty(this,\"touchEventsIds\",new Map());_defineProperty(this,\"lastMovedPointerId\",void 0);_defineProperty(this,\"cachedAverages\",{x:0,y:0});this.lastMovedPointerId=NaN;for(var i=0;i<MAX_POINTERS;++i){this.touchEventsIds.set(i,NaN);}}_createClass(PointerTracker,[{key:\"addToTracker\",value:function addToTracker(event){if(this.trackedPointers.has(event.pointerId)){return;}this.lastMovedPointerId=event.pointerId;var newElement={lastX:event.x,lastY:event.y,timeStamp:event.time,velocityX:0,velocityY:0};this.trackedPointers.set(event.pointerId,newElement);this.mapTouchEventId(event.pointerId);this.cachedAverages={x:this.getLastAvgX(),y:this.getLastAvgY()};}},{key:\"removeFromTracker\",value:function removeFromTracker(pointerId){this.trackedPointers.delete(pointerId);this.removeMappedTouchId(pointerId);}},{key:\"track\",value:function track(event){var element=this.trackedPointers.get(event.pointerId);if(!element){return;}this.lastMovedPointerId=event.pointerId;var dx=event.x-element.lastX;var dy=event.y-element.lastY;var dt=event.time-element.timeStamp;element.velocityX=dx/dt*1000*VELOCITY_FACTOR;element.velocityY=dy/dt*1000*VELOCITY_FACTOR;element.lastX=event.x;element.lastY=event.y;this.trackedPointers.set(event.pointerId,element);var avgX=this.getLastAvgX();var avgY=this.getLastAvgY();this.cachedAverages={x:avgX,y:avgY};}},{key:\"mapTouchEventId\",value:function mapTouchEventId(id){for(var _ref of this.touchEventsIds){var _ref2=_slicedToArray(_ref,2);var mappedId=_ref2[0];var touchId=_ref2[1];if(isNaN(touchId)){this.touchEventsIds.set(mappedId,id);break;}}}},{key:\"removeMappedTouchId\",value:function removeMappedTouchId(id){var mappedId=this.getMappedTouchEventId(id);if(!isNaN(mappedId)){this.touchEventsIds.set(mappedId,NaN);}}},{key:\"getMappedTouchEventId\",value:function getMappedTouchEventId(touchEventId){for(var _ref3 of this.touchEventsIds.entries()){var _ref4=_slicedToArray(_ref3,2);var key=_ref4[0];var value=_ref4[1];if(value===touchEventId){return key;}}return NaN;}},{key:\"getVelocityX\",value:function getVelocityX(pointerId){var _this$trackedPointers;return(_this$trackedPointers=this.trackedPointers.get(pointerId))===null||_this$trackedPointers===void 0?void 0:_this$trackedPointers.velocityX;}},{key:\"getVelocityY\",value:function getVelocityY(pointerId){var _this$trackedPointers2;return(_this$trackedPointers2=this.trackedPointers.get(pointerId))===null||_this$trackedPointers2===void 0?void 0:_this$trackedPointers2.velocityY;}},{key:\"getLastX\",value:function getLastX(pointerId){if(pointerId!==undefined){var _this$trackedPointers3;return(_this$trackedPointers3=this.trackedPointers.get(pointerId))===null||_this$trackedPointers3===void 0?void 0:_this$trackedPointers3.lastX;}else{var _this$trackedPointers4;return(_this$trackedPointers4=this.trackedPointers.get(this.lastMovedPointerId))===null||_this$trackedPointers4===void 0?void 0:_this$trackedPointers4.lastX;}}},{key:\"getLastY\",value:function getLastY(pointerId){if(pointerId!==undefined){var _this$trackedPointers5;return(_this$trackedPointers5=this.trackedPointers.get(pointerId))===null||_this$trackedPointers5===void 0?void 0:_this$trackedPointers5.lastY;}else{var _this$trackedPointers6;return(_this$trackedPointers6=this.trackedPointers.get(this.lastMovedPointerId))===null||_this$trackedPointers6===void 0?void 0:_this$trackedPointers6.lastY;}}},{key:\"getLastAvgX\",value:function getLastAvgX(){var avgX=this.getSumX()/this.trackedPointers.size;return isNaN(avgX)?this.cachedAverages.x:avgX;}},{key:\"getLastAvgY\",value:function getLastAvgY(){var avgY=this.getSumY()/this.trackedPointers.size;return isNaN(avgY)?this.cachedAverages.y:avgY;}},{key:\"getSumX\",value:function getSumX(ignoredPointer){var sumX=0;this.trackedPointers.forEach(function(value,key){if(key!==ignoredPointer){sumX+=value.lastX;}});return sumX;}},{key:\"getSumY\",value:function getSumY(ignoredPointer){var sumY=0;this.trackedPointers.forEach(function(value,key){if(key!==ignoredPointer){sumY+=value.lastY;}});return sumY;}},{key:\"getTrackedPointersCount\",value:function getTrackedPointersCount(){return this.trackedPointers.size;}},{key:\"getTrackedPointersID\",value:function getTrackedPointersID(){var keys=[];this.trackedPointers.forEach(function(_value,key){keys.push(key);});return keys;}},{key:\"getData\",value:function getData(){return this.trackedPointers;}},{key:\"resetTracker\",value:function resetTracker(){this.trackedPointers.clear();this.lastMovedPointerId=NaN;for(var i=0;i<MAX_POINTERS;++i){this.touchEventsIds.set(i,NaN);}}}],[{key:\"shareCommonPointers\",value:function shareCommonPointers(stPointers,ndPointers){return stPointers.some(function(pointerId){return ndPointers.includes(pointerId);});}}]);return PointerTracker;}();export{PointerTracker as default};","map":{"version":3,"sources":["PointerTracker.ts"],"names":["VELOCITY_FACTOR","MAX_POINTERS","PointerTracker","Map","x","y","constructor","lastMovedPointerId","NaN","i","touchEventsIds","set","addToTracker","event","trackedPointers","has","pointerId","newElement","lastX","lastY","timeStamp","time","velocityX","velocityY","mapTouchEventId","cachedAverages","getLastAvgX","getLastAvgY","removeFromTracker","delete","removeMappedTouchId","track","element","get","dx","dy","dt","avgX","avgY","id","mappedId","touchId","isNaN","getMappedTouchEventId","touchEventId","key","value","entries","getVelocityX","getVelocityY","getLastX","undefined","getLastY","getSumX","size","getSumY","ignoredPointer","sumX","forEach","sumY","getTrackedPointersCount","getTrackedPointersID","keys","_value","push","getData","resetTracker","clear","shareCommonPointers","stPointers","ndPointers","some","includes"],"mappings":"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","sourcesContent":["import { AdaptedEvent } from '../interfaces';\n\nexport interface TrackerElement {\n  lastX: number;\n  lastY: number;\n\n  timeStamp: number;\n\n  velocityX: number;\n  velocityY: number;\n}\n\n// Used to scale velocity so that it is similar to velocity in Android/iOS\nconst VELOCITY_FACTOR = 0.2;\nconst MAX_POINTERS = 20;\n\nexport default class PointerTracker {\n  private trackedPointers: Map<number, TrackerElement> = new Map<\n    number,\n    TrackerElement\n  >();\n\n  private touchEventsIds: Map<number, number> = new Map<number, number>();\n\n  private lastMovedPointerId: number;\n\n  private cachedAverages: { x: number; y: number } = { x: 0, y: 0 };\n\n  public constructor() {\n    this.lastMovedPointerId = NaN;\n\n    for (let i = 0; i < MAX_POINTERS; ++i) {\n      this.touchEventsIds.set(i, NaN);\n    }\n  }\n\n  public addToTracker(event: AdaptedEvent): void {\n    if (this.trackedPointers.has(event.pointerId)) {\n      return;\n    }\n\n    this.lastMovedPointerId = event.pointerId;\n\n    const newElement: TrackerElement = {\n      lastX: event.x,\n      lastY: event.y,\n      timeStamp: event.time,\n      velocityX: 0,\n      velocityY: 0,\n    };\n\n    this.trackedPointers.set(event.pointerId, newElement);\n    this.mapTouchEventId(event.pointerId);\n\n    this.cachedAverages = {\n      x: this.getLastAvgX(),\n      y: this.getLastAvgY(),\n    };\n  }\n\n  public removeFromTracker(pointerId: number): void {\n    this.trackedPointers.delete(pointerId);\n    this.removeMappedTouchId(pointerId);\n  }\n\n  public track(event: AdaptedEvent): void {\n    const element: TrackerElement = this.trackedPointers.get(\n      event.pointerId\n    ) as TrackerElement;\n\n    if (!element) {\n      return;\n    }\n\n    this.lastMovedPointerId = event.pointerId;\n\n    const dx = event.x - element.lastX;\n    const dy = event.y - element.lastY;\n    const dt = event.time - element.timeStamp;\n\n    element.velocityX = (dx / dt) * 1000 * VELOCITY_FACTOR;\n    element.velocityY = (dy / dt) * 1000 * VELOCITY_FACTOR;\n\n    element.lastX = event.x;\n    element.lastY = event.y;\n\n    this.trackedPointers.set(event.pointerId, element);\n\n    const avgX: number = this.getLastAvgX();\n    const avgY: number = this.getLastAvgY();\n\n    this.cachedAverages = {\n      x: avgX,\n      y: avgY,\n    };\n  }\n\n  //Mapping TouchEvents ID\n  private mapTouchEventId(id: number): void {\n    for (const [mappedId, touchId] of this.touchEventsIds) {\n      if (isNaN(touchId)) {\n        this.touchEventsIds.set(mappedId, id);\n        break;\n      }\n    }\n  }\n\n  private removeMappedTouchId(id: number): void {\n    const mappedId: number = this.getMappedTouchEventId(id);\n    if (!isNaN(mappedId)) {\n      this.touchEventsIds.set(mappedId, NaN);\n    }\n  }\n\n  public getMappedTouchEventId(touchEventId: number): number {\n    for (const [key, value] of this.touchEventsIds.entries()) {\n      if (value === touchEventId) {\n        return key;\n      }\n    }\n\n    return NaN;\n  }\n\n  public getVelocityX(pointerId: number): number {\n    return this.trackedPointers.get(pointerId)?.velocityX as number;\n  }\n  public getVelocityY(pointerId: number): number {\n    return this.trackedPointers.get(pointerId)?.velocityY as number;\n  }\n\n  /**\n   * Returns X coordinate of last moved pointer\n   */\n  public getLastX(): number;\n\n  /**\n   *\n   * @param pointerId\n   * Returns X coordinate of given pointer\n   */\n  // eslint-disable-next-line @typescript-eslint/unified-signatures\n  public getLastX(pointerId: number): number;\n\n  public getLastX(pointerId?: number): number {\n    if (pointerId !== undefined) {\n      return this.trackedPointers.get(pointerId)?.lastX as number;\n    } else {\n      return this.trackedPointers.get(this.lastMovedPointerId)?.lastX as number;\n    }\n  }\n\n  /**\n   * Returns Y coordinate of last moved pointer\n   */\n  public getLastY(): number;\n\n  /**\n   *\n   * @param pointerId\n   * Returns Y coordinate of given pointer\n   */\n  // eslint-disable-next-line @typescript-eslint/unified-signatures\n  public getLastY(pointerId: number): number;\n\n  public getLastY(pointerId?: number): number {\n    if (pointerId !== undefined) {\n      return this.trackedPointers.get(pointerId)?.lastY as number;\n    } else {\n      return this.trackedPointers.get(this.lastMovedPointerId)?.lastY as number;\n    }\n  }\n\n  // Some handlers use these methods to send average values in native event.\n  // This may happen when pointers have already been removed from tracker (i.e. pointerup event).\n  // In situation when NaN would be sent as a response, we return cached value.\n  // That prevents handlers from crashing\n  public getLastAvgX(): number {\n    const avgX: number = this.getSumX() / this.trackedPointers.size;\n    return isNaN(avgX) ? this.cachedAverages.x : avgX;\n  }\n  public getLastAvgY(): number {\n    const avgY: number = this.getSumY() / this.trackedPointers.size;\n    return isNaN(avgY) ? this.cachedAverages.y : avgY;\n  }\n  public getSumX(ignoredPointer?: number): number {\n    let sumX = 0;\n\n    this.trackedPointers.forEach((value, key) => {\n      if (key !== ignoredPointer) {\n        sumX += value.lastX;\n      }\n    });\n\n    return sumX;\n  }\n  public getSumY(ignoredPointer?: number): number {\n    let sumY = 0;\n\n    this.trackedPointers.forEach((value, key) => {\n      if (key !== ignoredPointer) {\n        sumY += value.lastY;\n      }\n    });\n\n    return sumY;\n  }\n  public getTrackedPointersCount(): number {\n    return this.trackedPointers.size;\n  }\n  public getTrackedPointersID(): number[] {\n    const keys: number[] = [];\n\n    this.trackedPointers.forEach((_value, key) => {\n      keys.push(key);\n    });\n\n    return keys;\n  }\n\n  public getData(): Map<number, TrackerElement> {\n    return this.trackedPointers;\n  }\n\n  public resetTracker(): void {\n    this.trackedPointers.clear();\n    this.lastMovedPointerId = NaN;\n\n    for (let i = 0; i < MAX_POINTERS; ++i) {\n      this.touchEventsIds.set(i, NaN);\n    }\n  }\n\n  public static shareCommonPointers(\n    stPointers: number[],\n    ndPointers: number[]\n  ): boolean {\n    return stPointers.some((pointerId) => ndPointers.includes(pointerId));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}