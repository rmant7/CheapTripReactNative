{"ast":null,"code":"import*as React from'react';import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import View from\"react-native-web/dist/exports/View\";import{withInternalTheme}from\"../../core/theming\";import TouchableRipple from\"../TouchableRipple/TouchableRipple\";import Text from\"../Typography/Text\";import RadioButton from\"./RadioButton\";import RadioButtonAndroid from\"./RadioButtonAndroid\";import{RadioButtonContext}from\"./RadioButtonGroup\";import RadioButtonIOS from\"./RadioButtonIOS\";import{handlePress,isChecked}from\"./utils\";var RadioButtonItem=function RadioButtonItem(_ref){var value=_ref.value,label=_ref.label,style=_ref.style,labelStyle=_ref.labelStyle,_onPress=_ref.onPress,disabled=_ref.disabled,color=_ref.color,uncheckedColor=_ref.uncheckedColor,status=_ref.status,theme=_ref.theme,_ref$accessibilityLab=_ref.accessibilityLabel,accessibilityLabel=_ref$accessibilityLab===void 0?label:_ref$accessibilityLab,testID=_ref.testID,mode=_ref.mode,_ref$position=_ref.position,position=_ref$position===void 0?'trailing':_ref$position,_ref$labelVariant=_ref.labelVariant,labelVariant=_ref$labelVariant===void 0?'bodyLarge':_ref$labelVariant;var radioButtonProps={value:value,disabled:disabled,status:status,color:color,uncheckedColor:uncheckedColor};var isLeading=position==='leading';var radioButton;if(mode==='android'){radioButton=React.createElement(RadioButtonAndroid,radioButtonProps);}else if(mode==='ios'){radioButton=React.createElement(RadioButtonIOS,radioButtonProps);}else{radioButton=React.createElement(RadioButton,radioButtonProps);}var textColor=theme.isV3?theme.colors.onSurface:theme.colors.text;var disabledTextColor=theme.isV3?theme.colors.onSurfaceDisabled:theme.colors.disabled;var textAlign=isLeading?'right':'left';var computedStyle={color:disabled?disabledTextColor:textColor,textAlign:textAlign};return React.createElement(RadioButtonContext.Consumer,null,function(context){var checked=isChecked({contextValue:context===null||context===void 0?void 0:context.value,status:status,value:value})==='checked';return React.createElement(TouchableRipple,{onPress:function onPress(event){return handlePress({onPress:_onPress,onValueChange:context===null||context===void 0?void 0:context.onValueChange,value:value,event:event});},accessibilityLabel:accessibilityLabel,accessibilityRole:\"radio\",accessibilityState:{checked:checked,disabled:disabled},testID:testID,disabled:disabled},React.createElement(View,{style:[styles.container,style],pointerEvents:\"none\"},isLeading&&radioButton,React.createElement(Text,{variant:labelVariant,style:[styles.label,!theme.isV3&&styles.font,computedStyle,labelStyle]},label),!isLeading&&radioButton));});};RadioButtonItem.displayName='RadioButton.Item';export default withInternalTheme(RadioButtonItem);var RadioButtonItemWithTheme=withInternalTheme(RadioButtonItem);export{RadioButtonItemWithTheme as RadioButtonItem};var styles=StyleSheet.create({container:{flexDirection:'row',alignItems:'center',justifyContent:'space-between',paddingVertical:8,paddingHorizontal:16},label:{flexShrink:1,flexGrow:1},font:{fontSize:16}});","map":{"version":3,"sources":["RadioButtonItem.tsx"],"names":["React","withInternalTheme","TouchableRipple","Text","RadioButton","RadioButtonAndroid","RadioButtonContext","RadioButtonIOS","handlePress","isChecked","RadioButtonItem","value","label","style","labelStyle","onPress","disabled","color","uncheckedColor","status","theme","accessibilityLabel","testID","mode","position","labelVariant","radioButtonProps","isLeading","radioButton","textColor","isV3","colors","onSurface","text","disabledTextColor","onSurfaceDisabled","textAlign","computedStyle","context","checked","contextValue","event","onValueChange","styles","container","font","displayName","RadioButtonItemWithTheme","StyleSheet","create","flexDirection","alignItems","justifyContent","paddingVertical","paddingHorizontal","flexShrink","flexGrow","fontSize"],"mappings":"AAAA,MAAO,GAAKA,MAAK,KAAM,OAAO,CAAA,sHAU9B,OAASC,iBAAiB,0BAE1B,MAAOC,gBAAe,0CACtB,MAAOC,KAAI,0BACX,MAAOC,YAAW,qBAClB,MAAOC,mBAAkB,4BACzB,OAASC,kBAAkB,0BAC3B,MAAOC,eAAc,wBACrB,OAASC,WAAW,CAAEC,SAAS,eA4G/B,GAAMC,gBAAe,CAAG,QAAlBA,gBAAe,CAAG,IAAA,CAgBX,CAhBY,GACvBC,MAAK,CAeC,IAAA,CAfNA,KAAK,CACLC,KAAK,CAcC,IAAA,CAdNA,KAAK,CACLC,KAAK,CAaC,IAAA,CAbNA,KAAK,CACLC,UAAU,CAYJ,IAAA,CAZNA,UAAU,CACVC,QAAO,CAWD,IAAA,CAXNA,OAAO,CACPC,QAAQ,CAUF,IAAA,CAVNA,QAAQ,CACRC,KAAK,CASC,IAAA,CATNA,KAAK,CACLC,cAAc,CAQR,IAAA,CARNA,cAAc,CACdC,MAAM,CAOA,IAAA,CAPNA,MAAM,CACNC,KAAK,CAMC,IAAA,CANNA,KAAK,uBAMC,IAAA,CALNC,kBAAkB,CAAlBA,kBAAkB,gCAAGT,KAAK,uBAC1BU,MAAM,CAIA,IAAA,CAJNA,MAAM,CACNC,IAAI,CAGE,IAAA,CAHNA,IAAI,eAGE,IAAA,CAFNC,QAAQ,CAARA,QAAQ,wBAAG,UAAU,iCAEf,IAAA,CADNC,YAAY,CAAZA,YAAY,4BAAG,WAAA,mBAEf,GAAMC,iBAAgB,CAAG,CAAEf,KAAK,CAALA,KAAK,CAAEK,QAAQ,CAARA,QAAQ,CAAEG,MAAM,CAANA,MAAM,CAAEF,KAAK,CAALA,KAAK,CAAEC,cAAAA,CAAAA,cAAe,CAAC,CAC3E,GAAMS,UAAS,CAAGH,QAAQ,GAAK,SAAS,CACxC,GAAII,YAAgB,CAEpB,GAAIL,IAAI,GAAK,SAAS,CAAE,CACtBK,WAAW,CAAG,KAAA,CAAA,aAAA,CAAC,kBAAkB,CAAKF,gBAAgB,CAAI,CAC5D,CAAC,IAAM,IAAIH,IAAI,GAAK,KAAK,CAAE,CACzBK,WAAW,CAAG,KAAA,CAAA,aAAA,CAAC,cAAc,CAAKF,gBAAgB,CAAI,CACxD,CAAC,IAAM,CACLE,WAAW,CAAG,KAAA,CAAA,aAAA,CAAC,WAAW,CAAKF,gBAAgB,CAAI,CACrD,CAEA,GAAMG,UAAS,CAAGT,KAAK,CAACU,IAAI,CAAGV,KAAK,CAACW,MAAM,CAACC,SAAS,CAAGZ,KAAK,CAACW,MAAM,CAACE,IAAI,CACzE,GAAMC,kBAAiB,CAAGd,KAAK,CAACU,IAAI,CAChCV,KAAK,CAACW,MAAM,CAACI,iBAAiB,CAC9Bf,KAAK,CAACW,MAAM,CAACf,QAAQ,CACzB,GAAMoB,UAAS,CAAGT,SAAS,CAAG,OAAO,CAAG,MAAM,CAE9C,GAAMU,cAAa,CAAG,CACpBpB,KAAK,CAAED,QAAQ,CAAGkB,iBAAiB,CAAGL,SAAS,CAC/CO,SAAAA,CAAAA,SACF,CAAc,CAEd,MACE,MAAA,CAAA,aAAA,CAAC,kBAAkB,CAAC,QAAQ,CAAA,IAAA,CACxBE,SAAAA,OAAgC,CAAK,CACrC,GAAMC,QAAO,CACX9B,SAAS,CAAC,CACR+B,YAAY,CAAEF,OAAO,GAAA,IAAA,EAAPA,OAAO,GAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAPA,OAAO,CAAE3B,KAAK,CAC5BQ,MAAM,CAANA,MAAM,CACNR,KAAAA,CAAAA,KACF,CAAC,CAAC,GAAK,SAAS,CAClB,MACE,MAAA,CAAA,aAAA,CAAC,eAAe,CAAA,CACd,OAAO,CAAG8B,iBAAAA,KAAK,QACbjC,YAAW,CAAC,CACVO,OAAO,CAAEA,QAAO,CAChB2B,aAAa,CAAEJ,OAAO,GAAA,IAAA,EAAPA,OAAO,GAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAPA,OAAO,CAAEI,aAAa,CACrC/B,KAAK,CAALA,KAAK,CACL8B,KAAAA,CAAAA,KACF,CAAC,CACF,GACD,kBAAkB,CAAEpB,kBAAmB,CACvC,iBAAiB,CAAC,OAAO,CACzB,kBAAkB,CAAE,CAClBkB,OAAO,CAAPA,OAAO,CACPvB,QAAAA,CAAAA,QACF,CAAE,CACF,MAAM,CAAEM,MAAO,CACf,QAAQ,CAAEN,QAAS,CAAA,CAEnB,KAAA,CAAA,aAAA,CAAC,IAAI,CAAA,CAAC,KAAK,CAAE,CAAC2B,MAAM,CAACC,SAAS,CAAE/B,KAAK,CAAE,CAAC,aAAa,CAAC,MAAM,CAAA,CACzDc,SAAS,EAAIC,WAAW,CACzB,KAAA,CAAA,aAAA,CAAC,IAAI,CAAA,CACH,OAAO,CAAEH,YAAa,CACtB,KAAK,CAAE,CACLkB,MAAM,CAAC/B,KAAK,CACZ,CAACQ,KAAK,CAACU,IAAI,EAAIa,MAAM,CAACE,IAAI,CAC1BR,aAAa,CACbvB,UAAU,CACV,CAAA,CAEDF,KAAK,CACD,CACN,CAACe,SAAS,EAAIC,WAAW,CACrB,CACS,CAEtB,CAAC,CAC2B,CAElC,CAAC,CAEDlB,eAAe,CAACoC,WAAW,CAAG,kBAAkB,CAEhD,cAAe7C,kBAAiB,CAACS,eAAe,CAAC,CAGjD,GAAMqC,yBAAwB,CAAG9C,iBAAiB,CAACS,eAAe,CAAC,CAEnE,OAASqC,wBAAwB,GAAIrC,gBAAe,EAEpD,GAAMiC,OAAM,CAAGK,UAAU,CAACC,MAAM,CAAC,CAC/BL,SAAS,CAAE,CACTM,aAAa,CAAE,KAAK,CACpBC,UAAU,CAAE,QAAQ,CACpBC,cAAc,CAAE,eAAe,CAC/BC,eAAe,CAAE,CAAC,CAClBC,iBAAiB,CAAE,EACrB,CAAC,CACD1C,KAAK,CAAE,CACL2C,UAAU,CAAE,CAAC,CACbC,QAAQ,CAAE,CACZ,CAAC,CACDX,IAAI,CAAE,CACJY,QAAQ,CAAE,EACZ,CACF,CAAC,CAAC","sourcesContent":["import * as React from 'react';\nimport {\n  GestureResponderEvent,\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport { withInternalTheme } from '../../core/theming';\nimport type { InternalTheme, MD3TypescaleKey } from '../../types';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\nimport RadioButton from './RadioButton';\nimport RadioButtonAndroid from './RadioButtonAndroid';\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\nimport RadioButtonIOS from './RadioButtonIOS';\nimport { handlePress, isChecked } from './utils';\n\nexport type Props = {\n  /**\n   * Value of the radio button.\n   */\n  value: string;\n  /**\n   * Label to be displayed on the item.\n   */\n  label: string;\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Accessibility label for the touchable. This is read by the screen reader when the user taps the touchable.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Custom color for unchecked radio.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Additional styles for container View.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @supported Available in v5.x with theme version 3\n   *\n   * Label text variant defines appropriate text styles for type role and its size.\n   * Available variants:\n   *\n   *  Display: `displayLarge`, `displayMedium`, `displaySmall`\n   *\n   *  Headline: `headlineLarge`, `headlineMedium`, `headlineSmall`\n   *\n   *  Title: `titleLarge`, `titleMedium`, `titleSmall`\n   *\n   *  Label:  `labelLarge`, `labelMedium`, `labelSmall`\n   *\n   *  Body: `bodyLarge`, `bodyMedium`, `bodySmall`\n   */\n  labelVariant?: keyof typeof MD3TypescaleKey;\n  /**\n   * @optional\n   */\n  theme: InternalTheme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n  /**\n   * Whether `<RadioButton.Android />` or `<RadioButton.IOS />` should be used.\n   * Left undefined `<RadioButton />` will be used.\n   */\n  mode?: 'android' | 'ios';\n  /**\n   * Radio button control position.\n   */\n  position?: 'leading' | 'trailing';\n};\n\n/**\n * RadioButton.Item allows you to press the whole row (item) instead of only the RadioButton.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/radio-item.ios.png\" />\n *     <figcaption>Pressed</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { RadioButton } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [value, setValue] = React.useState('first');\n *\n *   return (\n *     <RadioButton.Group onValueChange={value => setValue(value)} value={value}>\n *       <RadioButton.Item label=\"First item\" value=\"first\" />\n *       <RadioButton.Item label=\"Second item\" value=\"second\" />\n *     </RadioButton.Group>\n *   );\n * };\n *\n * export default MyComponent;\n *```\n */\nconst RadioButtonItem = ({\n  value,\n  label,\n  style,\n  labelStyle,\n  onPress,\n  disabled,\n  color,\n  uncheckedColor,\n  status,\n  theme,\n  accessibilityLabel = label,\n  testID,\n  mode,\n  position = 'trailing',\n  labelVariant = 'bodyLarge',\n}: Props) => {\n  const radioButtonProps = { value, disabled, status, color, uncheckedColor };\n  const isLeading = position === 'leading';\n  let radioButton: any;\n\n  if (mode === 'android') {\n    radioButton = <RadioButtonAndroid {...radioButtonProps} />;\n  } else if (mode === 'ios') {\n    radioButton = <RadioButtonIOS {...radioButtonProps} />;\n  } else {\n    radioButton = <RadioButton {...radioButtonProps} />;\n  }\n\n  const textColor = theme.isV3 ? theme.colors.onSurface : theme.colors.text;\n  const disabledTextColor = theme.isV3\n    ? theme.colors.onSurfaceDisabled\n    : theme.colors.disabled;\n  const textAlign = isLeading ? 'right' : 'left';\n\n  const computedStyle = {\n    color: disabled ? disabledTextColor : textColor,\n    textAlign,\n  } as TextStyle;\n\n  return (\n    <RadioButtonContext.Consumer>\n      {(context?: RadioButtonContextType) => {\n        const checked =\n          isChecked({\n            contextValue: context?.value,\n            status,\n            value,\n          }) === 'checked';\n        return (\n          <TouchableRipple\n            onPress={(event) =>\n              handlePress({\n                onPress: onPress,\n                onValueChange: context?.onValueChange,\n                value,\n                event,\n              })\n            }\n            accessibilityLabel={accessibilityLabel}\n            accessibilityRole=\"radio\"\n            accessibilityState={{\n              checked,\n              disabled,\n            }}\n            testID={testID}\n            disabled={disabled}\n          >\n            <View style={[styles.container, style]} pointerEvents=\"none\">\n              {isLeading && radioButton}\n              <Text\n                variant={labelVariant}\n                style={[\n                  styles.label,\n                  !theme.isV3 && styles.font,\n                  computedStyle,\n                  labelStyle,\n                ]}\n              >\n                {label}\n              </Text>\n              {!isLeading && radioButton}\n            </View>\n          </TouchableRipple>\n        );\n      }}\n    </RadioButtonContext.Consumer>\n  );\n};\n\nRadioButtonItem.displayName = 'RadioButton.Item';\n\nexport default withInternalTheme(RadioButtonItem);\n\n// @component-docs ignore-next-line\nconst RadioButtonItemWithTheme = withInternalTheme(RadioButtonItem);\n// @component-docs ignore-next-line\nexport { RadioButtonItemWithTheme as RadioButtonItem };\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n  },\n  label: {\n    flexShrink: 1,\n    flexGrow: 1,\n  },\n  font: {\n    fontSize: 16,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}