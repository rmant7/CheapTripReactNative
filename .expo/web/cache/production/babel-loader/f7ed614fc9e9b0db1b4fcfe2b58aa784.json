{"ast":null,"code":"import{CurrentRenderContext}from'@react-navigation/core';import*as React from'react';import ServerContext from\"./ServerContext\";export default React.forwardRef(function ServerContainer(_ref,ref){var children=_ref.children,location=_ref.location;React.useEffect(function(){console.error(\"'ServerContainer' should only be used on the server with 'react-dom/server' for SSR.\");},[]);var current={};if(ref){var value={getCurrentOptions:function getCurrentOptions(){return current.options;}};if(typeof ref==='function'){ref(value);}else{ref.current=value;}}return React.createElement(ServerContext.Provider,{value:{location:location}},React.createElement(CurrentRenderContext.Provider,{value:current},children));});","map":{"version":3,"sources":["ServerContainer.tsx"],"names":["CurrentRenderContext","React","ServerContext","forwardRef","ServerContainer","children","location","ref","useEffect","console","error","current","value","getCurrentOptions","options"],"mappings":"AAAA,OAASA,oBAAoB,KAAQ,wBAAwB,CAC7D,MAAO,GAAKC,MAAK,KAAM,OAAO,CAE9B,MAAOC,cAAa,uBAcpB,cAAeD,MAAK,CAACE,UAAU,CAAC,QAASC,gBAAe,CAAA,IAAA,CAEtDG,GAAkC,CAClC,CAFA,GAAEF,SAAQ,CAAmB,IAAA,CAA3BA,QAAQ,CAAEC,QAAAA,CAAiB,IAAA,CAAjBA,QAAAA,CAGZL,KAAK,CAACO,SAAS,CAAC,UAAM,CACpBC,OAAO,CAACC,KAAK,CACX,sFAAsF,CACvF,CACH,CAAC,CAAE,EAAE,CAAC,CAEN,GAAMC,QAA6B,CAAG,CAAC,CAAC,CAExC,GAAIJ,GAAG,CAAE,CACP,GAAMK,MAAK,CAAG,CACZC,iBAAiB,6BAAG,CAClB,MAAOF,QAAO,CAACG,OAAO,CACxB,CACF,CAAC,CAMD,GAAI,MAAOP,IAAG,GAAK,UAAU,CAAE,CAC7BA,GAAG,CAACK,KAAK,CAAC,CACZ,CAAC,IAAM,CAELL,GAAG,CAACI,OAAO,CAAGC,KAAK,CACrB,CACF,CAEA,MACE,MAAA,CAAA,aAAA,CAAC,aAAa,CAAC,QAAQ,CAAA,CAAC,KAAK,CAAE,CAAEN,QAAAA,CAAAA,QAAS,CAAE,CAAA,CAC1C,KAAA,CAAA,aAAA,CAAC,oBAAoB,CAAC,QAAQ,CAAA,CAAC,KAAK,CAAEK,OAAQ,CAAA,CAC3CN,QAAQ,CACqB,CACT,CAE7B,CAAC,CAAC","sourceRoot":"../../src","sourcesContent":["import { CurrentRenderContext } from '@react-navigation/core';\nimport * as React from 'react';\nimport ServerContext from './ServerContext';\n/**\n * Container component for server rendering.\n *\n * @param props.location Location object to base the initial URL for SSR.\n * @param props.children Child elements to render the content.\n * @param props.ref Ref object which contains helper methods.\n */\nexport default /*#__PURE__*/React.forwardRef(function ServerContainer(_ref, ref) {\n  let {\n    children,\n    location\n  } = _ref;\n  React.useEffect(() => {\n    console.error(\"'ServerContainer' should only be used on the server with 'react-dom/server' for SSR.\");\n  }, []);\n  const current = {};\n  if (ref) {\n    const value = {\n      getCurrentOptions() {\n        return current.options;\n      }\n    };\n\n    // We write to the `ref` during render instead of `React.useImperativeHandle`\n    // This is because `useImperativeHandle` will update the ref after 'commit',\n    // and there's no 'commit' phase during SSR.\n    // Mutating ref during render is unsafe in concurrent mode, but we don't care about it for SSR.\n    if (typeof ref === 'function') {\n      ref(value);\n    } else {\n      // @ts-expect-error: the TS types are incorrect and say that ref.current is readonly\n      ref.current = value;\n    }\n  }\n  return /*#__PURE__*/React.createElement(ServerContext.Provider, {\n    value: {\n      location\n    }\n  }, /*#__PURE__*/React.createElement(CurrentRenderContext.Provider, {\n    value: current\n  }, children));\n});\n//# sourceMappingURL=ServerContainer.js.map"]},"metadata":{},"sourceType":"module"}