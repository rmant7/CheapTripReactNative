{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"value\",\"disabled\",\"onValueChange\",\"color\",\"theme\"];function _extends(){_extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import*as React from'react';import NativeModules from\"react-native-web/dist/exports/NativeModules\";import Platform from\"react-native-web/dist/exports/Platform\";import NativeSwitch from\"react-native-web/dist/exports/Switch\";import{withInternalTheme}from\"../../core/theming\";import{getSwitchColor}from\"./utils\";var version=NativeModules.PlatformConstants?NativeModules.PlatformConstants.reactNativeVersion:undefined;var Switch=function Switch(_ref){var value=_ref.value,disabled=_ref.disabled,onValueChange=_ref.onValueChange,color=_ref.color,theme=_ref.theme,rest=_objectWithoutProperties(_ref,_excluded);var _getSwitchColor=getSwitchColor({theme:theme,disabled:disabled,value:value,color:color}),checkedColor=_getSwitchColor.checkedColor,onTintColor=_getSwitchColor.onTintColor,thumbTintColor=_getSwitchColor.thumbTintColor;var props=version&&version.major===0&&version.minor<=56?{onTintColor:onTintColor,thumbTintColor:thumbTintColor}:Platform.OS==='web'?{activeTrackColor:onTintColor,thumbColor:thumbTintColor,activeThumbColor:checkedColor}:{thumbColor:thumbTintColor,trackColor:{true:onTintColor,false:onTintColor}};return React.createElement(NativeSwitch,_extends({value:value,disabled:disabled,onValueChange:disabled?undefined:onValueChange},props,rest));};export default withInternalTheme(Switch);","map":{"version":3,"mappings":"mcAAA,MAAO,GAAKA,MAAK,KAAM,OAAO,oMAS9B,OAASC,iBAAiB,0BAE1B,OAASC,cAAc,eAEvB,GAAMC,QAAO,CAAGC,aAAa,CAACC,iBAAiB,CAC3CD,aAAa,CAACC,iBAAiB,CAACC,kBAAkB,CAClDC,SAAS,CAgEb,GAAMC,OAAM,CAAG,QAATA,OAAM,CAAGC,KAOF,IANXC,MAAK,CAMCD,KANNC,KAAK,CACLC,QAAQ,CAKFF,KALNE,QAAQ,CACRC,aAAa,CAIPH,KAJNG,aAAa,CACbC,KAAK,CAGCJ,KAHNI,KAAK,CACLC,KAAK,CAECL,KAFNK,KAAK,CACFC,8BACGN,gBACN,oBAAsDP,cAAc,CAAC,CACnEY,KAAK,CAALA,KAAK,CACLH,QAAQ,CAARA,QAAQ,CACRD,KAAK,CAALA,KAAK,CACLG,WACF,CAAC,CAAC,CALMG,YAAY,iBAAZA,YAAY,CAAEC,WAAW,iBAAXA,WAAW,CAAEC,8CAOnC,GAAMC,MAAK,CACThB,OAAO,EAAIA,OAAO,CAACiB,KAAK,GAAK,CAAC,EAAIjB,OAAO,CAACkB,KAAK,EAAI,EAAE,CACjD,CACEJ,WAAW,CAAXA,WAAW,CACXC,6BACF,CAAC,CACDI,QAAQ,CAACC,EAAE,GAAK,KAAK,CACrB,CACEC,gBAAgB,CAAEP,WAAW,CAC7BQ,UAAU,CAAEP,cAAc,CAC1BQ,gBAAgB,CAAEV,YACpB,CAAC,CACD,CACES,UAAU,CAAEP,cAAc,CAC1BS,UAAU,CAAE,CACVC,IAAI,CAAEX,WAAW,CACjBY,KAAK,CAAEZ,WACT,CACF,CAAC,CAEP,MACEjB,qBAAC8B,YAAY,WACXpB,KAAK,CAAEA,KAAM,CACbC,QAAQ,CAAEA,QAAS,CACnBC,aAAa,CAAED,QAAQ,CAAGJ,SAAS,CAAGK,aAAc,EAChDO,KAAK,CACLJ,IAAI,EACR,CAEN,CAAC,CAED,cAAed,kBAAiB,CAACO,MAAM,CAAC","names":["React","withInternalTheme","getSwitchColor","version","NativeModules","PlatformConstants","reactNativeVersion","undefined","Switch","_ref","value","disabled","onValueChange","color","theme","rest","checkedColor","onTintColor","thumbTintColor","props","major","minor","Platform","OS","activeTrackColor","thumbColor","activeThumbColor","trackColor","true","false","NativeSwitch"],"sources":["Switch.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  NativeModules,\n  Platform,\n  StyleProp,\n  Switch as NativeSwitch,\n  ViewStyle,\n} from 'react-native';\n\nimport { withInternalTheme } from '../../core/theming';\nimport type { InternalTheme } from '../../types';\nimport { getSwitchColor } from './utils';\n\nconst version = NativeModules.PlatformConstants\n  ? NativeModules.PlatformConstants.reactNativeVersion\n  : undefined;\n\nexport type Props = React.ComponentPropsWithRef<typeof NativeSwitch> & {\n  /**\n   * Disable toggling the switch.\n   */\n  disabled?: boolean;\n  /**\n   * Value of the switch, true means 'on', false means 'off'.\n   */\n  value?: boolean;\n  /**\n   * Custom color for switch.\n   */\n  color?: string;\n  /**\n   * Callback called with the new value when it changes.\n   */\n  onValueChange?: Function;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: InternalTheme;\n};\n\n/**\n * Switch is a visual toggle between two mutually exclusive states â€” on and off.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/switch-enabled.android.png\" />\n *     <figcaption>Android (enabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/switch-disabled.android.png\" />\n *     <figcaption>Android (disabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/switch-enabled.ios.png\" />\n *     <figcaption>iOS (enabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/switch-disabled.ios.png\" />\n *     <figcaption>iOS (disabled)</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Switch } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [isSwitchOn, setIsSwitchOn] = React.useState(false);\n *\n *   const onToggleSwitch = () => setIsSwitchOn(!isSwitchOn);\n *\n *   return <Switch value={isSwitchOn} onValueChange={onToggleSwitch} />;\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst Switch = ({\n  value,\n  disabled,\n  onValueChange,\n  color,\n  theme,\n  ...rest\n}: Props) => {\n  const { checkedColor, onTintColor, thumbTintColor } = getSwitchColor({\n    theme,\n    disabled,\n    value,\n    color,\n  });\n\n  const props =\n    version && version.major === 0 && version.minor <= 56\n      ? {\n          onTintColor,\n          thumbTintColor,\n        }\n      : Platform.OS === 'web'\n      ? {\n          activeTrackColor: onTintColor,\n          thumbColor: thumbTintColor,\n          activeThumbColor: checkedColor,\n        }\n      : {\n          thumbColor: thumbTintColor,\n          trackColor: {\n            true: onTintColor,\n            false: onTintColor,\n          },\n        };\n\n  return (\n    <NativeSwitch\n      value={value}\n      disabled={disabled}\n      onValueChange={disabled ? undefined : onValueChange}\n      {...props}\n      {...rest}\n    />\n  );\n};\n\nexport default withInternalTheme(Switch);\n"]},"metadata":{},"sourceType":"module"}