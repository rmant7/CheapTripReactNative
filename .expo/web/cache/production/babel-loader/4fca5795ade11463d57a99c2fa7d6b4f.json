{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _inherits from\"@babel/runtime/helpers/inherits\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}import*as React from'react';import{Consumer as SettingsConsumer,Provider as SettingsProvider}from\"../../core/settings\";import{ThemeProvider,withInternalTheme}from\"../../core/theming\";import PortalConsumer from\"./PortalConsumer\";import PortalHost,{PortalContext}from\"./PortalHost\";var Portal=function(_React$Component){_inherits(Portal,_React$Component);var _super=_createSuper(Portal);function Portal(){_classCallCheck(this,Portal);return _super.apply(this,arguments);}_createClass(Portal,[{key:\"render\",value:function render(){var _this$props=this.props,children=_this$props.children,theme=_this$props.theme;return React.createElement(SettingsConsumer,null,function(settings){return React.createElement(PortalContext.Consumer,null,function(manager){return React.createElement(PortalConsumer,{manager:manager},React.createElement(SettingsProvider,{value:settings},React.createElement(ThemeProvider,{theme:theme},children)));});});}}]);return Portal;}(React.Component);_defineProperty(Portal,\"Host\",PortalHost);export default withInternalTheme(Portal);","map":{"version":3,"mappings":"2rCAAA,MAAO,GAAKA,MAAK,KAAM,OAAO,CAI9B,OACEC,QAAQ,GAAIC,iBAAgB,CAC5BC,QAAQ,GAAIC,iBAAgB,2BAE9B,OAASC,aAAa,CAAEC,iBAAiB,0BACzC,MAAOC,eAAc,wBACrB,MAAOC,WAAU,EAAIC,aAAa,oBAAqC,GAiCjEC,OAAM,4NAIVC,iBAAS,CACP,gBAA4B,IAAI,CAACC,KAAK,CAA9BC,QAAQ,aAARA,QAAQ,CAAEC,wBAElB,MACEd,qBAACE,gBAAgB,MACba,iBAAQ,QACRf,qBAACS,aAAa,CAACR,QAAQ,MACnBe,gBAAO,QACPhB,qBAACO,cAAc,EAACS,OAAO,CAAEA,OAAyB,EAChDhB,oBAACI,gBAAgB,EAACa,KAAK,CAAEF,QAAS,EAEhCf,oBAACK,aAAa,EAACS,KAAK,CAAEA,KAAM,EAAED,QAAQ,CAAiB,CACtC,CAEtB,GAEJ,GACgB,CAEvB,qBAvBmBb,KAAK,CAACkB,SAAS,EAwBnCC,gBAxBKT,MAAM,QAEIF,UAAU,EAwB1B,cAAeF,kBAAiB,CAACI,MAAM,CAAC","names":["React","Consumer","SettingsConsumer","Provider","SettingsProvider","ThemeProvider","withInternalTheme","PortalConsumer","PortalHost","PortalContext","Portal","render","props","children","theme","settings","manager","value","Component","_defineProperty"],"sources":["Portal.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport type { InternalTheme } from 'src/types';\n\nimport {\n  Consumer as SettingsConsumer,\n  Provider as SettingsProvider,\n} from '../../core/settings';\nimport { ThemeProvider, withInternalTheme } from '../../core/theming';\nimport PortalConsumer from './PortalConsumer';\nimport PortalHost, { PortalContext, PortalMethods } from './PortalHost';\n\nexport type Props = {\n  /**\n   * Content of the `Portal`.\n   */\n  children: React.ReactNode;\n  /**\n   * @optional\n   */\n  theme: InternalTheme;\n};\n\n/**\n * Portal allows rendering a component at a different place in the parent tree.\n * You can use it to render content which should appear above other elements, similar to `Modal`.\n * It requires a [`Portal.Host`](portal-host.html) component to be rendered somewhere in the parent tree.\n * Note that if you're using the `Provider` component, this already includes a `Portal.Host`.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Portal, Text } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Portal>\n *     <Text>This is rendered at a different place</Text>\n *   </Portal>\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass Portal extends React.Component<Props> {\n  // @component ./PortalHost.tsx\n  static Host = PortalHost;\n\n  render() {\n    const { children, theme } = this.props;\n\n    return (\n      <SettingsConsumer>\n        {(settings) => (\n          <PortalContext.Consumer>\n            {(manager) => (\n              <PortalConsumer manager={manager as PortalMethods}>\n                <SettingsProvider value={settings}>\n                  {/* @ts-expect-error check @callstack/react-theme-provider's children prop */}\n                  <ThemeProvider theme={theme}>{children}</ThemeProvider>\n                </SettingsProvider>\n              </PortalConsumer>\n            )}\n          </PortalContext.Consumer>\n        )}\n      </SettingsConsumer>\n    );\n  }\n}\n\nexport default withInternalTheme(Portal);\n"]},"metadata":{},"sourceType":"module"}