{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import invariant from'invariant';import NativeEventEmitter from\"react-native-web/dist/exports/NativeEventEmitter\";import NativeModules from\"react-native-web/dist/exports/NativeModules\";import Platform from\"react-native-web/dist/exports/Platform\";var nativeEmitterSubscriptionKey='@@nativeEmitterSubscription@@';export var EventEmitter=function(){function EventEmitter(nativeModule){_classCallCheck(this,EventEmitter);this._listenerCount=0;if(nativeModule.__expo_module_name__&&NativeModules.EXReactNativeEventEmitter){nativeModule.addListener=function(){var _NativeModules$EXReac;for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}return(_NativeModules$EXReac=NativeModules.EXReactNativeEventEmitter).addProxiedListener.apply(_NativeModules$EXReac,[nativeModule.__expo_module_name__].concat(args));};nativeModule.removeListeners=function(){var _NativeModules$EXReac2;for(var _len2=arguments.length,args=new Array(_len2),_key2=0;_key2<_len2;_key2++){args[_key2]=arguments[_key2];}return(_NativeModules$EXReac2=NativeModules.EXReactNativeEventEmitter).removeProxiedListeners.apply(_NativeModules$EXReac2,[nativeModule.__expo_module_name__].concat(args));};}this._nativeModule=nativeModule;this._eventEmitter=new NativeEventEmitter(nativeModule);}_createClass(EventEmitter,[{key:\"addListener\",value:function addListener(eventName,listener){var _this=this,_subscription;if(!this._listenerCount&&Platform.OS!=='ios'&&this._nativeModule.startObserving){this._nativeModule.startObserving();}this._listenerCount++;var nativeEmitterSubscription=this._eventEmitter.addListener(eventName,listener);var subscription=(_subscription={},_defineProperty(_subscription,nativeEmitterSubscriptionKey,nativeEmitterSubscription),_defineProperty(_subscription,\"remove\",function remove(){_this.removeSubscription(subscription);}),_subscription);return subscription;}},{key:\"removeAllListeners\",value:function removeAllListeners(eventName){var removedListenerCount=this._eventEmitter.listenerCount?this._eventEmitter.listenerCount(eventName):this._eventEmitter.listeners(eventName).length;this._eventEmitter.removeAllListeners(eventName);this._listenerCount-=removedListenerCount;invariant(this._listenerCount>=0,\"EventEmitter must have a non-negative number of listeners\");if(!this._listenerCount&&Platform.OS!=='ios'&&this._nativeModule.stopObserving){this._nativeModule.stopObserving();}}},{key:\"removeSubscription\",value:function removeSubscription(subscription){var nativeEmitterSubscription=subscription[nativeEmitterSubscriptionKey];if(!nativeEmitterSubscription){return;}if('remove'in nativeEmitterSubscription){nativeEmitterSubscription.remove();}else if('removeSubscription'in this._eventEmitter){this._eventEmitter.removeSubscription(nativeEmitterSubscription);}this._listenerCount--;delete subscription[nativeEmitterSubscriptionKey];subscription.remove=function(){};if(!this._listenerCount&&Platform.OS!=='ios'&&this._nativeModule.stopObserving){this._nativeModule.stopObserving();}}},{key:\"emit\",value:function emit(eventName){var _this$_eventEmitter;for(var _len3=arguments.length,params=new Array(_len3>1?_len3-1:0),_key3=1;_key3<_len3;_key3++){params[_key3-1]=arguments[_key3];}(_this$_eventEmitter=this._eventEmitter).emit.apply(_this$_eventEmitter,[eventName].concat(params));}}]);return EventEmitter;}();","map":{"version":3,"mappings":"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","names":["invariant","nativeEmitterSubscriptionKey","EventEmitter","nativeModule","_listenerCount","__expo_module_name__","NativeModules","EXReactNativeEventEmitter","addListener","args","addProxiedListener","removeListeners","removeProxiedListeners","_nativeModule","_eventEmitter","NativeEventEmitter","eventName","listener","Platform","OS","startObserving","nativeEmitterSubscription","subscription","removeSubscription","removedListenerCount","listenerCount","listeners","length","removeAllListeners","stopObserving","remove","params","emit"],"sourceRoot":"","sources":["../src/EventEmitter.ts"],"sourcesContent":["import invariant from 'invariant';\nimport { NativeEventEmitter, NativeModules, Platform } from 'react-native';\n\nconst nativeEmitterSubscriptionKey = '@@nativeEmitterSubscription@@';\n\ntype NativeModule = {\n  __expo_module_name__?: string;\n  startObserving?: () => void;\n  stopObserving?: () => void;\n  addListener: (eventName: string) => void;\n  removeListeners: (count: number) => void;\n};\n\n// @needsAudit\nexport type Subscription = {\n  /**\n   * A method to unsubscribe the listener.\n   */\n  remove: () => void;\n};\n\nexport class EventEmitter {\n  _listenerCount = 0;\n  _nativeModule: NativeModule;\n  _eventEmitter: NativeEventEmitter;\n\n  constructor(nativeModule: NativeModule) {\n    // Expo modules installed through the JSI don't have `addListener` and `removeListeners` set,\n    // so if someone wants to use them with `EventEmitter`, make sure to provide these functions\n    // as they are required by `NativeEventEmitter`. This is only temporary â€” in the future\n    // JSI modules will have event emitter built in.\n    if (nativeModule.__expo_module_name__ && NativeModules.EXReactNativeEventEmitter) {\n      nativeModule.addListener = (...args) =>\n        NativeModules.EXReactNativeEventEmitter.addProxiedListener(\n          nativeModule.__expo_module_name__,\n          ...args\n        );\n      nativeModule.removeListeners = (...args) =>\n        NativeModules.EXReactNativeEventEmitter.removeProxiedListeners(\n          nativeModule.__expo_module_name__,\n          ...args\n        );\n    }\n    this._nativeModule = nativeModule;\n    this._eventEmitter = new NativeEventEmitter(nativeModule as any);\n  }\n\n  addListener<T>(eventName: string, listener: (event: T) => void): Subscription {\n    if (!this._listenerCount && Platform.OS !== 'ios' && this._nativeModule.startObserving) {\n      this._nativeModule.startObserving();\n    }\n\n    this._listenerCount++;\n    const nativeEmitterSubscription = this._eventEmitter.addListener(eventName, listener);\n    const subscription = {\n      [nativeEmitterSubscriptionKey]: nativeEmitterSubscription,\n      remove: () => {\n        this.removeSubscription(subscription);\n      },\n    };\n    return subscription;\n  }\n\n  removeAllListeners(eventName: string): void {\n    // @ts-ignore: the EventEmitter interface has been changed in react-native@0.64.0\n    const removedListenerCount = this._eventEmitter.listenerCount\n      ? // @ts-ignore: this is available since 0.64\n        this._eventEmitter.listenerCount(eventName)\n      : // @ts-ignore: this is available in older versions\n        this._eventEmitter.listeners(eventName).length;\n    this._eventEmitter.removeAllListeners(eventName);\n    this._listenerCount -= removedListenerCount;\n    invariant(\n      this._listenerCount >= 0,\n      `EventEmitter must have a non-negative number of listeners`\n    );\n\n    if (!this._listenerCount && Platform.OS !== 'ios' && this._nativeModule.stopObserving) {\n      this._nativeModule.stopObserving();\n    }\n  }\n\n  removeSubscription(subscription: Subscription): void {\n    const nativeEmitterSubscription = subscription[nativeEmitterSubscriptionKey];\n    if (!nativeEmitterSubscription) {\n      return;\n    }\n\n    if ('remove' in nativeEmitterSubscription) {\n      // `react-native-web@0.17.1` doesn't support `removeSubscription`\n      nativeEmitterSubscription.remove();\n    } else if ('removeSubscription' in this._eventEmitter) {\n      this._eventEmitter.removeSubscription(nativeEmitterSubscription!);\n    }\n    this._listenerCount--;\n\n    // Ensure that the emitter's internal state remains correct even if `removeSubscription` is\n    // called again with the same subscription\n    delete subscription[nativeEmitterSubscriptionKey];\n\n    // Release closed-over references to the emitter\n    subscription.remove = () => {};\n\n    if (!this._listenerCount && Platform.OS !== 'ios' && this._nativeModule.stopObserving) {\n      this._nativeModule.stopObserving();\n    }\n  }\n\n  emit(eventName: string, ...params: any[]): void {\n    this._eventEmitter.emit(eventName, ...params);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}