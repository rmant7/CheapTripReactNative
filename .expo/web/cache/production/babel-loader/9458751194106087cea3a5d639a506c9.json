{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import React from'react';import Animated from\"react-native-web/dist/exports/Animated\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import Text from\"react-native-web/dist/exports/Text\";import color from'color';import{withInternalTheme}from\"../../../core/theming\";import{getConstants}from\"../helpers\";import{AdornmentSide}from\"./enums\";var AffixContext=React.createContext({textStyle:{fontFamily:'',color:''},topPosition:null,side:AdornmentSide.Left});var AffixAdornment=function AffixAdornment(_ref){var affix=_ref.affix,side=_ref.side,textStyle=_ref.textStyle,topPosition=_ref.topPosition,onLayout=_ref.onLayout,visible=_ref.visible,paddingHorizontal=_ref.paddingHorizontal,maxFontSizeMultiplier=_ref.maxFontSizeMultiplier,testID=_ref.testID;return React.createElement(AffixContext.Provider,{value:{side:side,textStyle:textStyle,topPosition:topPosition,onLayout:onLayout,visible:visible,paddingHorizontal:paddingHorizontal,maxFontSizeMultiplier:maxFontSizeMultiplier,testID:testID}},affix);};var TextInputAffix=function TextInputAffix(_ref2){var _theme$colors;var text=_ref2.text,labelStyle=_ref2.textStyle,theme=_ref2.theme;var _getConstants=getConstants(theme.isV3),AFFIX_OFFSET=_getConstants.AFFIX_OFFSET;var _React$useContext=React.useContext(AffixContext),textStyle=_React$useContext.textStyle,onLayout=_React$useContext.onLayout,topPosition=_React$useContext.topPosition,side=_React$useContext.side,visible=_React$useContext.visible,paddingHorizontal=_React$useContext.paddingHorizontal,maxFontSizeMultiplier=_React$useContext.maxFontSizeMultiplier,testID=_React$useContext.testID;var textColor=color(theme.isV3?theme.colors.onSurface:(_theme$colors=theme.colors)===null||_theme$colors===void 0?void 0:_theme$colors.text).alpha(theme.dark?0.7:0.54).rgb().string();var offset=typeof paddingHorizontal==='number'?paddingHorizontal:AFFIX_OFFSET;var style=_defineProperty({top:topPosition},side,offset);return React.createElement(Animated.View,{style:[styles.container,style,{opacity:(visible===null||visible===void 0?void 0:visible.interpolate({inputRange:[0,1],outputRange:[1,0]}))||1}],onLayout:onLayout,testID:testID},React.createElement(Text,{maxFontSizeMultiplier:maxFontSizeMultiplier,style:[{color:textColor},textStyle,labelStyle]},text));};TextInputAffix.displayName='TextInput.Affix';var styles=StyleSheet.create({container:{position:'absolute',justifyContent:'center',alignItems:'center'}});export default withInternalTheme(TextInputAffix);export{TextInputAffix,AffixAdornment};","map":{"version":3,"mappings":"mEAAA,MAAOA,MAAK,KAAM,OAAO,oLAWzB,MAAOC,MAAK,KAAM,OAAO,CAEzB,OAASC,iBAAiB,6BAE1B,OAASC,YAAY,kBACrB,OAASC,aAAa,eA6BtB,GAAMC,aAAY,CAAGL,KAAK,CAACM,aAAa,CAAe,CACrDC,SAAS,CAAE,CAAEC,UAAU,CAAE,EAAE,CAAEP,KAAK,CAAE,EAAG,CAAC,CACxCQ,WAAW,CAAE,IAAI,CACjBC,IAAI,CAAEN,aAAa,CAACO,IACtB,CAAC,CAAC,CAEF,GAAMC,eAKL,CAAG,QALEA,eAKL,CAAGC,KAUE,IATJC,MAAK,CASND,KATCC,KAAK,CACLJ,IAAI,CAQLG,KARCH,IAAI,CACJH,SAAS,CAOVM,KAPCN,SAAS,CACTE,WAAW,CAMZI,KANCJ,WAAW,CACXM,QAAQ,CAKTF,KALCE,QAAQ,CACRC,OAAO,CAIRH,KAJCG,OAAO,CACPC,iBAAiB,CAGlBJ,KAHCI,iBAAiB,CACjBC,qBAAqB,CAEtBL,KAFCK,qBAAqB,CACrBC,OACDN,KADCM,OAEA,MACEnB,qBAACK,YAAY,CAACe,QAAQ,EACpBC,KAAK,CAAE,CACLX,IAAI,CAAJA,IAAI,CACJH,SAAS,CAATA,SAAS,CACTE,WAAW,CAAXA,WAAW,CACXM,QAAQ,CAARA,QAAQ,CACRC,OAAO,CAAPA,OAAO,CACPC,iBAAiB,CAAjBA,iBAAiB,CACjBC,qBAAqB,CAArBA,qBAAqB,CACrBC,aACF,CAAE,EAEDL,KAAK,CACgB,CAE5B,CAAC,CAiCD,GAAMQ,eAAc,CAAG,QAAjBA,eAAc,CAAGC,MAAmD,sBAAhDC,KAAI,CAAuCD,MAA3CC,IAAI,CAAaC,UAAU,CAAgBF,MAArChB,SAAS,CAAcmB,MAAcH,MAAdG,MACrD,kBAAyBvB,YAAY,CAACuB,KAAK,CAACC,IAAI,CAAC,CAAzCC,wCAER,sBASI5B,KAAK,CAAC6B,UAAU,CAACxB,YAAY,CAAC,CARhCE,SAAS,mBAATA,SAAS,CACTQ,QAAQ,mBAARA,QAAQ,CACRN,WAAW,mBAAXA,WAAW,CACXC,IAAI,mBAAJA,IAAI,CACJM,OAAO,mBAAPA,OAAO,CACPC,iBAAiB,mBAAjBA,iBAAiB,CACjBC,qBAAqB,mBAArBA,qBAAqB,CACrBC,gCAGF,GAAMW,UAAS,CAAG7B,KAAK,CACrByB,KAAK,CAACC,IAAI,CAAGD,KAAK,CAACK,MAAM,CAACC,SAAS,gBAAGN,KAAK,CAACK,MAAM,wCAAZE,cAAcT,IAAI,CACzD,CACEU,KAAK,CAACR,KAAK,CAACS,IAAI,CAAG,GAAG,CAAG,IAAI,CAAC,CAC9BC,GAAG,EAAE,CACLC,MAAM,EAAE,CAEX,GAAMC,OAAM,CACV,MAAOrB,kBAAiB,GAAK,QAAQ,CAAGA,iBAAiB,CAAGW,YAAY,CAE1E,GAAMW,MAAK,kBACTC,GAAG,CAAE/B,WAAW,EACfC,IAAI,CAAG4B,OACI,CAEd,MACEtC,qBAACyC,QAAQ,CAACC,IAAI,EACZH,KAAK,CAAE,CACLI,MAAM,CAACC,SAAS,CAChBL,KAAK,CACL,CACEM,OAAO,CACL,QAAO,SAAP7B,OAAO,iBAAPA,OAAO,CAAE8B,WAAW,CAAC,CACnBC,UAAU,CAAE,CAAC,CAAC,CAAE,CAAC,CAAC,CAClBC,WAAW,CAAE,CAAC,CAAC,CAAE,CAAC,CACpB,CAAC,CAAC,GAAI,CACV,CAAC,CACD,CACFjC,QAAQ,CAAEA,QAAS,CACnBI,MAAM,CAAEA,MAAO,EAEfnB,oBAACiD,IAAI,EACH/B,qBAAqB,CAAEA,qBAAsB,CAC7CqB,KAAK,CAAE,CAAC,CAAEtC,KAAK,CAAE6B,SAAU,CAAC,CAAEvB,SAAS,CAAEkB,UAAU,CAAE,EAEpDD,IAAI,CACA,CACO,CAEpB,CAAC,CACDF,cAAc,CAAC4B,WAAW,CAAG,iBAAiB,CAE9C,GAAMP,OAAM,CAAGQ,UAAU,CAACC,MAAM,CAAC,CAC/BR,SAAS,CAAE,CACTS,QAAQ,CAAE,UAAU,CACpBC,cAAc,CAAE,QAAQ,CACxBC,UAAU,CAAE,QACd,CACF,CAAC,CAAC,CAEF,cAAerD,kBAAiB,CAACoB,cAAc,CAAC,CAGhD,OAASA,cAAc,CAAEV,cAAc","names":["React","color","withInternalTheme","getConstants","AdornmentSide","AffixContext","createContext","textStyle","fontFamily","topPosition","side","Left","AffixAdornment","_ref","affix","onLayout","visible","paddingHorizontal","maxFontSizeMultiplier","testID","Provider","value","TextInputAffix","_ref2","text","labelStyle","theme","isV3","AFFIX_OFFSET","useContext","textColor","colors","onSurface","_theme$colors","alpha","dark","rgb","string","offset","style","top","Animated","View","styles","container","opacity","interpolate","inputRange","outputRange","Text","displayName","StyleSheet","create","position","justifyContent","alignItems"],"sources":["TextInputAffix.tsx"],"sourcesContent":["import React from 'react';\nimport {\n  Animated,\n  LayoutChangeEvent,\n  StyleProp,\n  StyleSheet,\n  Text,\n  TextStyle,\n  ViewStyle,\n} from 'react-native';\n\nimport color from 'color';\n\nimport { withInternalTheme } from '../../../core/theming';\nimport type { InternalTheme } from '../../../types';\nimport { getConstants } from '../helpers';\nimport { AdornmentSide } from './enums';\n\nexport type Props = {\n  /**\n   * Text to show.\n   */\n  text: string;\n  onLayout?: (event: LayoutChangeEvent) => void;\n  /**\n   * Style that is passed to the Text element.\n   */\n  textStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: InternalTheme;\n};\n\ntype ContextState = {\n  topPosition: number | null;\n  onLayout?: (event: LayoutChangeEvent) => void;\n  visible?: Animated.Value;\n  textStyle?: StyleProp<TextStyle>;\n  side: AdornmentSide;\n  paddingHorizontal?: number | string;\n  maxFontSizeMultiplier?: number | undefined | null;\n  testID?: string;\n};\n\nconst AffixContext = React.createContext<ContextState>({\n  textStyle: { fontFamily: '', color: '' },\n  topPosition: null,\n  side: AdornmentSide.Left,\n});\n\nconst AffixAdornment: React.FunctionComponent<\n  {\n    affix: React.ReactNode;\n    testID: string;\n  } & ContextState\n> = ({\n  affix,\n  side,\n  textStyle,\n  topPosition,\n  onLayout,\n  visible,\n  paddingHorizontal,\n  maxFontSizeMultiplier,\n  testID,\n}) => {\n  return (\n    <AffixContext.Provider\n      value={{\n        side,\n        textStyle,\n        topPosition,\n        onLayout,\n        visible,\n        paddingHorizontal,\n        maxFontSizeMultiplier,\n        testID,\n      }}\n    >\n      {affix}\n    </AffixContext.Provider>\n  );\n};\n\n/**\n * A component to render a leading / trailing text in the TextInput\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/textinput-outline.affix.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState('');\n *\n *   return (\n *     <TextInput\n *       mode=\"outlined\"\n *       label=\"Outlined input\"\n *       placeholder=\"Type something\"\n *       right={<TextInput.Affix text=\"/100\" />}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\n\nconst TextInputAffix = ({ text, textStyle: labelStyle, theme }: Props) => {\n  const { AFFIX_OFFSET } = getConstants(theme.isV3);\n\n  const {\n    textStyle,\n    onLayout,\n    topPosition,\n    side,\n    visible,\n    paddingHorizontal,\n    maxFontSizeMultiplier,\n    testID,\n  } = React.useContext(AffixContext);\n\n  const textColor = color(\n    theme.isV3 ? theme.colors.onSurface : theme.colors?.text\n  )\n    .alpha(theme.dark ? 0.7 : 0.54)\n    .rgb()\n    .string();\n\n  const offset =\n    typeof paddingHorizontal === 'number' ? paddingHorizontal : AFFIX_OFFSET;\n\n  const style = {\n    top: topPosition,\n    [side]: offset,\n  } as ViewStyle;\n\n  return (\n    <Animated.View\n      style={[\n        styles.container,\n        style,\n        {\n          opacity:\n            visible?.interpolate({\n              inputRange: [0, 1],\n              outputRange: [1, 0],\n            }) || 1,\n        },\n      ]}\n      onLayout={onLayout}\n      testID={testID}\n    >\n      <Text\n        maxFontSizeMultiplier={maxFontSizeMultiplier}\n        style={[{ color: textColor }, textStyle, labelStyle]}\n      >\n        {text}\n      </Text>\n    </Animated.View>\n  );\n};\nTextInputAffix.displayName = 'TextInput.Affix';\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n\nexport default withInternalTheme(TextInputAffix);\n\n// @component-docs ignore-next-line\nexport { TextInputAffix, AffixAdornment };\n"]},"metadata":{},"sourceType":"module"}