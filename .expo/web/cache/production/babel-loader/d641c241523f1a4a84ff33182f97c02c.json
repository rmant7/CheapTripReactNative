{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"focusedIcon\",\"unfocusedIcon\",\"label\",\"active\",\"theme\",\"style\",\"onPress\",\"accessibilityLabel\",\"badge\",\"testID\"];function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}import*as React from'react';import Animated from\"react-native-web/dist/exports/Animated\";import Platform from\"react-native-web/dist/exports/Platform\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import TouchableWithoutFeedback from\"react-native-web/dist/exports/TouchableWithoutFeedback\";import View from\"react-native-web/dist/exports/View\";import{withInternalTheme}from\"../../core/theming\";import Badge from\"../Badge\";import Icon from\"../Icon\";import Text from\"../Typography/Text\";var badgeSize=8;var iconSize=24;var itemSize=56;var outlineHeight=32;var DrawerCollapsedItem=function DrawerCollapsedItem(_ref){var focusedIcon=_ref.focusedIcon,unfocusedIcon=_ref.unfocusedIcon,label=_ref.label,active=_ref.active,theme=_ref.theme,style=_ref.style,onPress=_ref.onPress,accessibilityLabel=_ref.accessibilityLabel,_ref$badge=_ref.badge,badge=_ref$badge===void 0?false:_ref$badge,_ref$testID=_ref.testID,testID=_ref$testID===void 0?'drawer-collapsed-item':_ref$testID,rest=_objectWithoutProperties(_ref,_excluded);var isV3=theme.isV3;var scale=theme.animation.scale;var _React$useState=React.useState(1),_React$useState2=_slicedToArray(_React$useState,2),numOfLines=_React$useState2[0],setNumOfLines=_React$useState2[1];var _React$useRef=React.useRef(new Animated.Value(active?1:0.5)),animScale=_React$useRef.current;React.useEffect(function(){if(!active){animScale.setValue(0.5);}},[animScale,active]);if(!isV3){return null;}var handlePressOut=function handlePressOut(){Animated.timing(animScale,{toValue:1,duration:150*scale,useNativeDriver:true}).start();};var iconPadding=((!label?itemSize:outlineHeight)-iconSize)/2;var backgroundColor=active?theme.colors.secondaryContainer:'transparent';var labelColor=active?theme.colors.onSurface:theme.colors.onSurfaceVariant;var iconColor=active?theme.colors.onSecondaryContainer:theme.colors.onSurfaceVariant;var onTextLayout=function onTextLayout(_ref2){var nativeEvent=_ref2.nativeEvent;setNumOfLines(nativeEvent.lines.length);};var androidLetterSpacingStyle=Platform.OS==='android'&&numOfLines>4&&styles.letterSpacing;var labelTextStyle=_objectSpread({color:labelColor},isV3?theme.fonts.labelMedium:{});var icon=!active&&unfocusedIcon!==undefined?unfocusedIcon:focusedIcon;return React.createElement(View,rest,React.createElement(TouchableWithoutFeedback,{onPress:onPress,onPressOut:onPress?handlePressOut:undefined,accessibilityTraits:active?['button','selected']:'button',accessibilityComponentType:\"button\",accessibilityRole:\"button\",accessibilityState:{selected:active},accessibilityLabel:accessibilityLabel,testID:testID},React.createElement(View,{style:styles.wrapper},React.createElement(Animated.View,{style:[styles.outline,!label&&styles.roundedOutline,{transform:[label?{scaleX:animScale}:{scale:animScale}],backgroundColor:backgroundColor},style],testID:testID+\"-outline\"}),React.createElement(View,{style:[styles.icon,{top:iconPadding}],testID:testID+\"-container\"},badge&&React.createElement(View,{style:styles.badgeContainer},typeof badge==='boolean'?React.createElement(Badge,{visible:badge,size:badgeSize}):React.createElement(Badge,{visible:badge!=null,size:2*badgeSize},badge)),React.createElement(Icon,{source:icon,size:iconSize,color:iconColor})),label?React.createElement(Text,{variant:\"labelMedium\",selectable:false,numberOfLines:2,onTextLayout:onTextLayout,style:[styles.label,androidLetterSpacingStyle,labelTextStyle]},label):null)));};DrawerCollapsedItem.displayName='Drawer.CollapsedItem';var styles=StyleSheet.create({wrapper:{width:80,marginBottom:12,minHeight:itemSize,alignItems:'center'},outline:{width:itemSize,height:outlineHeight,borderRadius:itemSize/2,alignItems:'center',justifyContent:'center'},roundedOutline:{height:itemSize},icon:{position:'absolute'},letterSpacing:{letterSpacing:0.3,alignSelf:'stretch'},label:{marginHorizontal:12,marginTop:4,textAlign:'center'},badgeContainer:{position:'absolute',left:20,bottom:20,zIndex:2}});export default withInternalTheme(DrawerCollapsedItem);","map":{"version":3,"mappings":"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","names":["React","withInternalTheme","Badge","Icon","Text","badgeSize","iconSize","itemSize","outlineHeight","DrawerCollapsedItem","_ref","focusedIcon","unfocusedIcon","label","active","theme","style","onPress","accessibilityLabel","badge","testID","rest","isV3","scale","animation","useState","numOfLines","setNumOfLines","useRef","Animated","Value","animScale","current","useEffect","setValue","handlePressOut","timing","toValue","duration","useNativeDriver","start","iconPadding","backgroundColor","colors","secondaryContainer","labelColor","onSurface","onSurfaceVariant","iconColor","onSecondaryContainer","onTextLayout","_ref2","nativeEvent","lines","length","androidLetterSpacingStyle","Platform","OS","styles","letterSpacing","labelTextStyle","color","fonts","labelMedium","icon","undefined","View","TouchableWithoutFeedback","onPressOut","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityState","selected","wrapper","outline","roundedOutline","transform","scaleX","top","badgeContainer","visible","size","source","variant","selectable","numberOfLines","displayName","StyleSheet","create","width","marginBottom","minHeight","alignItems","height","borderRadius","justifyContent","position","alignSelf","marginHorizontal","marginTop","textAlign","left","bottom","zIndex"],"sources":["DrawerCollapsedItem.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  GestureResponderEvent,\n  NativeSyntheticEvent,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  TextLayoutEventData,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport { withInternalTheme } from '../../core/theming';\nimport type { InternalTheme } from '../../types';\nimport Badge from '../Badge';\nimport Icon, { IconSource } from '../Icon';\nimport Text from '../Typography/Text';\n\nexport type Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * The label text of the item.\n   */\n  label?: string;\n  /**\n   * Badge to show on the icon, can be `true` to show a dot, `string` or `number` to show text.\n   */\n  badge?: string | number | boolean;\n  /**\n   * Icon to use as the focused destination icon, can be a string, an image source or a react component @renamed Renamed from 'icon' to 'focusedIcon' in v5.x\n   */\n  focusedIcon?: IconSource;\n  /**\n   * Icon to use as the unfocused destination icon, can be a string, an image source or a react component @renamed Renamed from 'icon' to 'focusedIcon' in v5.x\n   */\n  unfocusedIcon?: IconSource;\n  /**\n   * Whether to highlight the drawer item as active.\n   */\n  active?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: InternalTheme;\n\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n};\n\nconst badgeSize = 8;\nconst iconSize = 24;\nconst itemSize = 56;\nconst outlineHeight = 32;\n\n/**\n * @supported Available in v5.x with theme version 3\n * Collapsed component used to show an action item with an icon and optionally label in a navigation drawer.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/drawer-collapsed.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Drawer } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *    <Drawer.CollapsedItem\n *      focusedIcon=\"inbox\"\n *      unfocusedIcon=\"inbox-outline\"\n *      label=\"Inbox\"\n *    />\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst DrawerCollapsedItem = ({\n  focusedIcon,\n  unfocusedIcon,\n  label,\n  active,\n  theme,\n  style,\n  onPress,\n  accessibilityLabel,\n  badge = false,\n  testID = 'drawer-collapsed-item',\n  ...rest\n}: Props) => {\n  const { isV3 } = theme;\n  const { scale } = theme.animation;\n\n  const [numOfLines, setNumOfLines] = React.useState(1);\n\n  const { current: animScale } = React.useRef<Animated.Value>(\n    new Animated.Value(active ? 1 : 0.5)\n  );\n\n  React.useEffect(() => {\n    if (!active) {\n      animScale.setValue(0.5);\n    }\n  }, [animScale, active]);\n\n  if (!isV3) {\n    return null;\n  }\n\n  const handlePressOut = () => {\n    Animated.timing(animScale, {\n      toValue: 1,\n      duration: 150 * scale,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  const iconPadding = ((!label ? itemSize : outlineHeight) - iconSize) / 2;\n\n  const backgroundColor = active\n    ? theme.colors.secondaryContainer\n    : 'transparent';\n  const labelColor = active\n    ? theme.colors.onSurface\n    : theme.colors.onSurfaceVariant;\n  const iconColor = active\n    ? theme.colors.onSecondaryContainer\n    : theme.colors.onSurfaceVariant;\n\n  const onTextLayout = ({\n    nativeEvent,\n  }: NativeSyntheticEvent<TextLayoutEventData>) => {\n    setNumOfLines(nativeEvent.lines.length);\n  };\n\n  // Label is cut off on Android, when centered \"labelMedium\" text\n  // has more than 4 lines, so there is a need to decrease the letter spacing.\n  const androidLetterSpacingStyle =\n    Platform.OS === 'android' && numOfLines > 4 && styles.letterSpacing;\n\n  const labelTextStyle = {\n    color: labelColor,\n    ...(isV3 ? theme.fonts.labelMedium : {}),\n  };\n\n  const icon =\n    !active && unfocusedIcon !== undefined ? unfocusedIcon : focusedIcon;\n\n  return (\n    <View {...rest}>\n      {/* eslint-disable-next-line react-native-a11y/has-accessibility-props */}\n      <TouchableWithoutFeedback\n        onPress={onPress}\n        onPressOut={onPress ? handlePressOut : undefined}\n        // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n        accessibilityTraits={active ? ['button', 'selected'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityState={{ selected: active }}\n        accessibilityLabel={accessibilityLabel}\n        testID={testID}\n      >\n        <View style={styles.wrapper}>\n          <Animated.View\n            style={[\n              styles.outline,\n              !label && styles.roundedOutline,\n              {\n                transform: [\n                  label\n                    ? {\n                        scaleX: animScale,\n                      }\n                    : { scale: animScale },\n                ],\n                backgroundColor,\n              },\n              style,\n            ]}\n            testID={`${testID}-outline`}\n          />\n\n          <View\n            style={[styles.icon, { top: iconPadding }]}\n            testID={`${testID}-container`}\n          >\n            {badge && (\n              <View style={styles.badgeContainer}>\n                {typeof badge === 'boolean' ? (\n                  <Badge visible={badge} size={badgeSize} />\n                ) : (\n                  <Badge visible={badge != null} size={2 * badgeSize}>\n                    {badge}\n                  </Badge>\n                )}\n              </View>\n            )}\n            <Icon source={icon} size={iconSize} color={iconColor} />\n          </View>\n\n          {label ? (\n            <Text\n              variant=\"labelMedium\"\n              selectable={false}\n              numberOfLines={2}\n              onTextLayout={onTextLayout}\n              style={[styles.label, androidLetterSpacingStyle, labelTextStyle]}\n            >\n              {label}\n            </Text>\n          ) : null}\n        </View>\n      </TouchableWithoutFeedback>\n    </View>\n  );\n};\n\nDrawerCollapsedItem.displayName = 'Drawer.CollapsedItem';\n\nconst styles = StyleSheet.create({\n  wrapper: {\n    width: 80,\n    marginBottom: 12,\n    minHeight: itemSize,\n    alignItems: 'center',\n  },\n  outline: {\n    width: itemSize,\n    height: outlineHeight,\n    borderRadius: itemSize / 2,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  roundedOutline: {\n    height: itemSize,\n  },\n  icon: {\n    position: 'absolute',\n  },\n  letterSpacing: {\n    letterSpacing: 0.3,\n    alignSelf: 'stretch',\n  },\n  label: {\n    marginHorizontal: 12,\n    marginTop: 4,\n    textAlign: 'center',\n  },\n  badgeContainer: {\n    position: 'absolute',\n    left: 20,\n    bottom: 20,\n    zIndex: 2,\n  },\n});\n\nexport default withInternalTheme(DrawerCollapsedItem);\n"]},"metadata":{},"sourceType":"module"}