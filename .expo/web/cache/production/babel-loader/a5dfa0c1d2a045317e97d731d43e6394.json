{"ast":null,"code":"import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";var _excluded=[\"get\",\"request\"];import{useCallback,useEffect,useRef,useState}from'react';function usePermission(methods,options){var isMounted=useRef(true);var _useState=useState(null),_useState2=_slicedToArray(_useState,2),status=_useState2[0],setStatus=_useState2[1];var _ref=options||{},_ref$get=_ref.get,get=_ref$get===void 0?true:_ref$get,_ref$request=_ref.request,request=_ref$request===void 0?false:_ref$request,permissionOptions=_objectWithoutProperties(_ref,_excluded);var getPermission=useCallback(_asyncToGenerator(function*(){var response=yield methods.getMethod(Object.keys(permissionOptions).length>0?permissionOptions:undefined);if(isMounted.current)setStatus(response);return response;}),[methods.getMethod]);var requestPermission=useCallback(_asyncToGenerator(function*(){var response=yield methods.requestMethod(Object.keys(permissionOptions).length>0?permissionOptions:undefined);if(isMounted.current)setStatus(response);return response;}),[methods.requestMethod]);useEffect(function runMethods(){if(request)requestPermission();if(!request&&get)getPermission();},[get,request,requestPermission,getPermission]);useEffect(function didMount(){isMounted.current=true;return function(){isMounted.current=false;};},[]);return[status,requestPermission,getPermission];}export function createPermissionHook(methods){return function(options){return usePermission(methods,options);};}","map":{"version":3,"mappings":"6PAAA,OAASA,WAAW,CAAEC,SAAS,CAAEC,MAAM,CAAEC,QAAQ,KAAQ,OAAO,CA6BhE,QAASC,cAAa,CACpBC,OAAmD,CACnDC,OAAwC,EAExC,GAAMC,UAAS,CAAGL,MAAM,CAAC,IAAI,CAAC,CAC9B,cAA4BC,QAAQ,CAAoB,IAAI,CAAC,wCAAtDK,MAAM,eAAEC,SAAS,eACxB,SAA8DH,OAAO,EAAI,EAAE,eAAnEI,GAAG,CAAHA,GAAG,mBAAG,IAAI,4BAAEC,OAAO,CAAPA,OAAO,uBAAG,KAAK,cAAKC,iBAAiB,0CAEzD,GAAMC,cAAa,CAAGb,WAAW,mBAAC,WAAW,CAC3C,GAAMc,SAAQ,MAAST,QAAO,CAACU,SAAS,CACtCC,MAAM,CAACC,IAAI,CAACL,iBAAiB,CAAC,CAACM,MAAM,CAAG,CAAC,CAAIN,iBAA6B,CAAGO,SAAS,CACvF,CACD,GAAIZ,SAAS,CAACa,OAAO,CAAEX,SAAS,CAACK,QAAQ,CAAC,CAC1C,MAAOA,SAAQ,CACjB,CAAC,EAAE,CAACT,OAAO,CAACU,SAAS,CAAC,CAAC,CAEvB,GAAMM,kBAAiB,CAAGrB,WAAW,mBAAC,WAAW,CAC/C,GAAMc,SAAQ,MAAST,QAAO,CAACiB,aAAa,CAC1CN,MAAM,CAACC,IAAI,CAACL,iBAAiB,CAAC,CAACM,MAAM,CAAG,CAAC,CAAIN,iBAA6B,CAAGO,SAAS,CACvF,CACD,GAAIZ,SAAS,CAACa,OAAO,CAAEX,SAAS,CAACK,QAAQ,CAAC,CAC1C,MAAOA,SAAQ,CACjB,CAAC,EAAE,CAACT,OAAO,CAACiB,aAAa,CAAC,CAAC,CAE3BrB,SAAS,CACP,QAASsB,WAAU,GACjB,GAAIZ,OAAO,CAAEU,iBAAiB,EAAE,CAChC,GAAI,CAACV,OAAO,EAAID,GAAG,CAAEG,aAAa,EAAE,CACtC,CAAC,CACD,CAACH,GAAG,CAAEC,OAAO,CAAEU,iBAAiB,CAAER,aAAa,CAAC,CACjD,CAGDZ,SAAS,CAAC,QAASuB,SAAQ,GACzBjB,SAAS,CAACa,OAAO,CAAG,IAAI,CACxB,MAAO,WAAK,CACVb,SAAS,CAACa,OAAO,CAAG,KAAK,CAC3B,CAAC,CACH,CAAC,CAAE,EAAE,CAAC,CAEN,MAAO,CAACZ,MAAM,CAAEa,iBAAiB,CAAER,aAAa,CAAC,CACnD,CAMA,MAAM,SAAUY,qBAAoB,CAClCpB,OAAmD,EAEnD,MAAO,UAACC,OAAwC,QAC9CF,cAAa,CAAsBC,OAAO,CAAEC,OAAO,CAAC,GACxD","names":["useCallback","useEffect","useRef","useState","usePermission","methods","options","isMounted","status","setStatus","get","request","permissionOptions","getPermission","response","getMethod","Object","keys","length","undefined","current","requestPermission","requestMethod","runMethods","didMount","createPermissionHook"],"sourceRoot":"","sources":["../src/PermissionsHook.ts"],"sourcesContent":["import { useCallback, useEffect, useRef, useState } from 'react';\n\nimport { PermissionResponse } from './PermissionsInterface';\n\n// These types are identical, but improves the readability for suggestions in editors\ntype RequestPermissionMethod<Permission extends PermissionResponse> = () => Promise<Permission>;\ntype GetPermissionMethod<Permission extends PermissionResponse> = () => Promise<Permission>;\n\ninterface PermissionHookMethods<Permission extends PermissionResponse, Options = never> {\n  /** The permission method that requests the user to grant permission. */\n  requestMethod: (options?: Options) => Promise<Permission>;\n  /** The permission method that only fetches the current permission status. */\n  getMethod: (options?: Options) => Promise<Permission>;\n}\n\ninterface PermissionHookBehavior {\n  /** If the hook should automatically fetch the current permission status, without asking the user. */\n  get?: boolean;\n  /** If the hook should automatically request the user to grant permission. */\n  request?: boolean;\n}\n\nexport type PermissionHookOptions<Options extends object> = PermissionHookBehavior & Options;\n\n/**\n * Get or request permission for protected functionality within the app.\n * It uses separate permission requesters to interact with a single permission.\n * By default, the hook will only retrieve the permission status.\n */\nfunction usePermission<Permission extends PermissionResponse, Options extends object>(\n  methods: PermissionHookMethods<Permission, Options>,\n  options?: PermissionHookOptions<Options>\n): [Permission | null, RequestPermissionMethod<Permission>, GetPermissionMethod<Permission>] {\n  const isMounted = useRef(true);\n  const [status, setStatus] = useState<Permission | null>(null);\n  const { get = true, request = false, ...permissionOptions } = options || {};\n\n  const getPermission = useCallback(async () => {\n    const response = await methods.getMethod(\n      Object.keys(permissionOptions).length > 0 ? (permissionOptions as Options) : undefined\n    );\n    if (isMounted.current) setStatus(response);\n    return response;\n  }, [methods.getMethod]);\n\n  const requestPermission = useCallback(async () => {\n    const response = await methods.requestMethod(\n      Object.keys(permissionOptions).length > 0 ? (permissionOptions as Options) : undefined\n    );\n    if (isMounted.current) setStatus(response);\n    return response;\n  }, [methods.requestMethod]);\n\n  useEffect(\n    function runMethods() {\n      if (request) requestPermission();\n      if (!request && get) getPermission();\n    },\n    [get, request, requestPermission, getPermission]\n  );\n\n  // Workaround for unmounting components receiving state updates\n  useEffect(function didMount() {\n    isMounted.current = true;\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n\n  return [status, requestPermission, getPermission];\n}\n\n/**\n * Create a new permission hook with the permission methods built-in.\n * This can be used to quickly create specific permission hooks in every module.\n */\nexport function createPermissionHook<Permission extends PermissionResponse, Options extends object>(\n  methods: PermissionHookMethods<Permission, Options>\n) {\n  return (options?: PermissionHookOptions<Options>) =>\n    usePermission<Permission, Options>(methods, options);\n}\n"]},"metadata":{},"sourceType":"module"}