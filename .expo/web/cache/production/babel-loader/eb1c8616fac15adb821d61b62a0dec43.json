{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}import color from'color';var getBorderColor=function getBorderColor(_ref){var theme=_ref.theme,disabled=_ref.disabled;if(theme.isV3){if(disabled){return theme.colors.surfaceDisabled;}return theme.colors.outline;}return undefined;};var getBackgroundColor=function getBackgroundColor(_ref2){var theme=_ref2.theme,isMode=_ref2.isMode,disabled=_ref2.disabled,selected=_ref2.selected,customContainerColor=_ref2.customContainerColor;if(theme.isV3){if(disabled){if(isMode('contained')||isMode('contained-tonal')){return theme.colors.surfaceDisabled;}}if(typeof customContainerColor!=='undefined'){return customContainerColor;}if(isMode('contained')){if(selected){return theme.colors.primary;}return theme.colors.surfaceVariant;}if(isMode('contained-tonal')){if(selected){return theme.colors.secondaryContainer;}return theme.colors.surfaceVariant;}if(isMode('outlined')){if(selected){return theme.colors.inverseSurface;}}}if(typeof customContainerColor!=='undefined'){return customContainerColor;}return undefined;};var getIconColor=function getIconColor(_ref3){var theme=_ref3.theme,isMode=_ref3.isMode,disabled=_ref3.disabled,selected=_ref3.selected,customIconColor=_ref3.customIconColor;if(theme.isV3){if(disabled){return theme.colors.onSurfaceDisabled;}if(typeof customIconColor!=='undefined'){return customIconColor;}if(isMode('contained')){if(selected){return theme.colors.onPrimary;}return theme.colors.primary;}if(isMode('contained-tonal')){if(selected){return theme.colors.onSecondaryContainer;}return theme.colors.onSurfaceVariant;}if(isMode('outlined')){if(selected){return theme.colors.inverseOnSurface;}return theme.colors.onSurfaceVariant;}if(selected){return theme.colors.primary;}return theme.colors.onSurfaceVariant;}if(typeof customIconColor!=='undefined'){return customIconColor;}return theme.colors.text;};var getRippleColor=function getRippleColor(_ref4){var theme=_ref4.theme,iconColor=_ref4.iconColor;if(theme.isV3){return color(iconColor).alpha(0.12).rgb().string();}return color(iconColor).alpha(0.32).rgb().string();};export var getIconButtonColor=function getIconButtonColor(_ref5){var theme=_ref5.theme,disabled=_ref5.disabled,mode=_ref5.mode,selected=_ref5.selected,customIconColor=_ref5.customIconColor,customContainerColor=_ref5.customContainerColor;var isMode=function isMode(modeToCompare){return mode===modeToCompare;};var baseIconColorProps={theme:theme,isMode:isMode,disabled:disabled,selected:selected};var iconColor=getIconColor(_objectSpread(_objectSpread({},baseIconColorProps),{},{customIconColor:customIconColor}));return{iconColor:iconColor,backgroundColor:getBackgroundColor(_objectSpread(_objectSpread({},baseIconColorProps),{},{customContainerColor:customContainerColor})),rippleColor:getRippleColor({theme:theme,iconColor:iconColor}),borderColor:getBorderColor({theme:theme,disabled:disabled})};};","map":{"version":3,"sources":["utils.ts"],"names":["color","getBorderColor","theme","disabled","isV3","colors","surfaceDisabled","outline","undefined","getBackgroundColor","isMode","selected","customContainerColor","primary","surfaceVariant","secondaryContainer","inverseSurface","getIconColor","customIconColor","onSurfaceDisabled","onPrimary","onSecondaryContainer","onSurfaceVariant","inverseOnSurface","text","getRippleColor","iconColor","alpha","rgb","string","getIconButtonColor","mode","modeToCompare","baseIconColorProps","backgroundColor","rippleColor","borderColor"],"mappings":"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","sourcesContent":["import color from 'color';\n\nimport type { InternalTheme } from '../../types';\n\ntype IconButtonMode = 'outlined' | 'contained' | 'contained-tonal';\n\ntype BaseProps = {\n  theme: InternalTheme;\n  isMode: (mode: IconButtonMode) => boolean;\n  disabled?: boolean;\n  selected?: boolean;\n};\n\nconst getBorderColor = ({\n  theme,\n  disabled,\n}: {\n  theme: InternalTheme;\n  disabled?: boolean;\n}) => {\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.surfaceDisabled;\n    }\n\n    return theme.colors.outline;\n  }\n\n  return undefined;\n};\n\nconst getBackgroundColor = ({\n  theme,\n  isMode,\n  disabled,\n  selected,\n  customContainerColor,\n}: BaseProps & { customContainerColor?: string }) => {\n  if (theme.isV3) {\n    if (disabled) {\n      if (isMode('contained') || isMode('contained-tonal')) {\n        return theme.colors.surfaceDisabled;\n      }\n    }\n\n    if (typeof customContainerColor !== 'undefined') {\n      return customContainerColor;\n    }\n\n    if (isMode('contained')) {\n      if (selected) {\n        return theme.colors.primary;\n      }\n      return theme.colors.surfaceVariant;\n    }\n\n    if (isMode('contained-tonal')) {\n      if (selected) {\n        return theme.colors.secondaryContainer;\n      }\n      return theme.colors.surfaceVariant;\n    }\n\n    if (isMode('outlined')) {\n      if (selected) {\n        return theme.colors.inverseSurface;\n      }\n    }\n  }\n\n  if (typeof customContainerColor !== 'undefined') {\n    return customContainerColor;\n  }\n\n  return undefined;\n};\n\nconst getIconColor = ({\n  theme,\n  isMode,\n  disabled,\n  selected,\n  customIconColor,\n}: BaseProps & { customIconColor?: string }) => {\n  if (theme.isV3) {\n    if (disabled) {\n      return theme.colors.onSurfaceDisabled;\n    }\n\n    if (typeof customIconColor !== 'undefined') {\n      return customIconColor;\n    }\n\n    if (isMode('contained')) {\n      if (selected) {\n        return theme.colors.onPrimary;\n      }\n      return theme.colors.primary;\n    }\n\n    if (isMode('contained-tonal')) {\n      if (selected) {\n        return theme.colors.onSecondaryContainer;\n      }\n      return theme.colors.onSurfaceVariant;\n    }\n\n    if (isMode('outlined')) {\n      if (selected) {\n        return theme.colors.inverseOnSurface;\n      }\n      return theme.colors.onSurfaceVariant;\n    }\n\n    if (selected) {\n      return theme.colors.primary;\n    }\n    return theme.colors.onSurfaceVariant;\n  }\n\n  if (typeof customIconColor !== 'undefined') {\n    return customIconColor;\n  }\n\n  return theme.colors.text;\n};\n\nconst getRippleColor = ({\n  theme,\n  iconColor,\n}: {\n  theme: InternalTheme;\n  iconColor: string;\n}) => {\n  if (theme.isV3) {\n    return color(iconColor).alpha(0.12).rgb().string();\n  }\n  return color(iconColor).alpha(0.32).rgb().string();\n};\n\nexport const getIconButtonColor = ({\n  theme,\n  disabled,\n  mode,\n  selected,\n  customIconColor,\n  customContainerColor,\n}: {\n  theme: InternalTheme;\n  disabled?: boolean;\n  selected?: boolean;\n  mode?: IconButtonMode;\n  customIconColor?: string;\n  customContainerColor?: string;\n}) => {\n  const isMode = (modeToCompare: IconButtonMode) => {\n    return mode === modeToCompare;\n  };\n\n  const baseIconColorProps = {\n    theme,\n    isMode,\n    disabled,\n    selected,\n  };\n\n  const iconColor = getIconColor({\n    ...baseIconColorProps,\n    customIconColor,\n  });\n\n  return {\n    iconColor,\n    backgroundColor: getBackgroundColor({\n      ...baseIconColorProps,\n      customContainerColor,\n    }),\n    rippleColor: getRippleColor({ theme, iconColor }),\n    borderColor: getBorderColor({ theme, disabled }),\n  };\n};\n"]},"metadata":{},"sourceType":"module"}