{"ast":null,"code":"import{tagMessage}from\"../../utils\";var Reanimated;try{Reanimated=require('react-native-reanimated');if(!Reanimated.useSharedValue){Reanimated=undefined;throw new Error('react-native-reanimated is not found');}if(!Reanimated.setGestureState){Reanimated.setGestureState=function(){'worklet';console.warn(tagMessage('Please use newer version of react-native-reanimated in order to control state of the gestures.'));};}}catch(e){}export{Reanimated};","map":{"version":3,"mappings":"AAKA,OAASA,UAAT,mBAMA,GAAIC,WAAJ,CAkBA,GAAI,CACFA,UAAU,CAAGC,OAAO,CAAC,yBAAD,CAApB,CAEA,GAAI,CAACD,UAAU,CAACE,cAAhB,CAAgC,CAG9BF,UAAU,CAAGG,SAAb,CACA,KAAM,IAAIC,MAAJ,CAAU,sCAAV,CAAN,CACD,CAED,GAAI,CAACJ,UAAU,CAACK,eAAhB,CAAiC,CAC/BL,UAAU,CAACK,eAAX,CAA6B,UAAM,CACjC,UACAC,OAAO,CAACC,IAAR,CACER,UAAU,CACR,gGADQ,CADZ,EAKD,CAPD,CAQD,CAIF,CAAC,MAAOS,CAAP,CAAU,CAAE,CAEd,OAASR,UAAT","names":["tagMessage","Reanimated","require","useSharedValue","undefined","Error","setGestureState","console","warn","e"],"sources":["reanimatedWrapper.ts"],"sourcesContent":["import { ComponentClass } from 'react';\nimport {\n  GestureUpdateEvent,\n  GestureStateChangeEvent,\n} from '../gestureHandlerCommon';\nimport { tagMessage } from '../../utils';\n\nexport interface SharedValue<T> {\n  value: T;\n}\n\nlet Reanimated: {\n  default: {\n    // Slightly modified definition copied from 'react-native-reanimated'\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    createAnimatedComponent<P extends object>(\n      component: ComponentClass<P>,\n      options?: unknown\n    ): ComponentClass<P>;\n  };\n  useEvent: (\n    callback: (event: GestureUpdateEvent | GestureStateChangeEvent) => void,\n    events: string[],\n    rebuild: boolean\n  ) => unknown;\n  useSharedValue: <T>(value: T) => SharedValue<T>;\n  setGestureState: (handlerTag: number, newState: number) => void;\n};\n\ntry {\n  Reanimated = require('react-native-reanimated');\n\n  if (!Reanimated.useSharedValue) {\n    // @ts-ignore Make sure the loaded module is actually Reanimated, if it's not\n    // reset the module to undefined so we can fallback to the default implementation\n    Reanimated = undefined;\n    throw new Error('react-native-reanimated is not found');\n  }\n\n  if (!Reanimated.setGestureState) {\n    Reanimated.setGestureState = () => {\n      'worklet';\n      console.warn(\n        tagMessage(\n          'Please use newer version of react-native-reanimated in order to control state of the gestures.'\n        )\n      );\n    };\n  }\n  // When 'react-native-reanimated' is not available we want to\n  // quietly continue\n  // eslint-disable-next-line no-empty\n} catch (e) {}\n\nexport { Reanimated };\n"]},"metadata":{},"sourceType":"module"}