{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import*as React from'react';var UNINTIALIZED_STATE={};export default function useSyncState(initialState){var stateRef=React.useRef(UNINTIALIZED_STATE);var isSchedulingRef=React.useRef(false);var isMountedRef=React.useRef(true);React.useEffect(function(){isMountedRef.current=true;return function(){isMountedRef.current=false;};},[]);if(stateRef.current===UNINTIALIZED_STATE){stateRef.current=typeof initialState==='function'?initialState():initialState;}var _React$useState=React.useState(stateRef.current),_React$useState2=_slicedToArray(_React$useState,2),trackingState=_React$useState2[0],setTrackingState=_React$useState2[1];var getState=React.useCallback(function(){return stateRef.current;},[]);var setState=React.useCallback(function(state){if(state===stateRef.current||!isMountedRef.current){return;}stateRef.current=state;if(!isSchedulingRef.current){setTrackingState(state);}},[]);var scheduleUpdate=React.useCallback(function(callback){isSchedulingRef.current=true;try{callback();}finally{isSchedulingRef.current=false;}},[]);var flushUpdates=React.useCallback(function(){if(!isMountedRef.current){return;}setTrackingState(stateRef.current);},[]);if(trackingState!==stateRef.current){setTrackingState(stateRef.current);}var state=stateRef.current;React.useDebugValue(state);return[state,getState,setState,scheduleUpdate,flushUpdates];}","map":{"version":3,"sources":["useSyncState.tsx"],"names":["React","UNINTIALIZED_STATE","useSyncState","initialState","stateRef","useRef","isSchedulingRef","isMountedRef","useEffect","current","trackingState","setTrackingState","useState","getState","useCallback","setState","state","scheduleUpdate","callback","flushUpdates","useDebugValue"],"mappings":"iEAAA,MAAO,GAAKA,MAAK,KAAM,OAAO,CAE9B,GAAMC,mBAAkB,CAAG,CAAC,CAAC,CAK7B,cAAe,SAASC,aAAY,CAAIC,YAA4B,CAAE,CACpE,GAAMC,SAAQ,CAAGJ,KAAK,CAACK,MAAM,CAAIJ,kBAAkB,CAAQ,CAC3D,GAAMK,gBAAe,CAAGN,KAAK,CAACK,MAAM,CAAC,KAAK,CAAC,CAC3C,GAAME,aAAY,CAAGP,KAAK,CAACK,MAAM,CAAC,IAAI,CAAC,CAEvCL,KAAK,CAACQ,SAAS,CAAC,UAAM,CACpBD,YAAY,CAACE,OAAO,CAAG,IAAI,CAE3B,MAAO,WAAM,CACXF,YAAY,CAACE,OAAO,CAAG,KAAK,CAC9B,CAAC,CACH,CAAC,CAAE,EAAE,CAAC,CAEN,GAAIL,QAAQ,CAACK,OAAO,GAAKR,kBAAkB,CAAE,CAC3CG,QAAQ,CAACK,OAAO,CAEd,MAAON,aAAY,GAAK,UAAU,CAAGA,YAAY,EAAE,CAAGA,YAAY,CACtE,CAEA,oBAA0CH,KAAK,CAACY,QAAQ,CAACR,QAAQ,CAACK,OAAO,CAAC,oDAAnEC,aAAa,qBAAEC,gBAAgB,qBAEtC,GAAME,SAAQ,CAAGb,KAAK,CAACc,WAAW,CAAC,iBAAMV,SAAQ,CAACK,OAAO,GAAE,EAAE,CAAC,CAE9D,GAAMM,SAAQ,CAAGf,KAAK,CAACc,WAAW,CAAEE,SAAAA,KAAQ,CAAK,CAC/C,GAAIA,KAAK,GAAKZ,QAAQ,CAACK,OAAO,EAAI,CAACF,YAAY,CAACE,OAAO,CAAE,CACvD,OACF,CAEAL,QAAQ,CAACK,OAAO,CAAGO,KAAK,CAExB,GAAI,CAACV,eAAe,CAACG,OAAO,CAAE,CAC5BE,gBAAgB,CAACK,KAAK,CAAC,CACzB,CACF,CAAC,CAAE,EAAE,CAAC,CAEN,GAAMC,eAAc,CAAGjB,KAAK,CAACc,WAAW,CAAEI,SAAAA,QAAoB,CAAK,CACjEZ,eAAe,CAACG,OAAO,CAAG,IAAI,CAE9B,GAAI,CACFS,QAAQ,EAAE,CACZ,CAAC,OAAS,CACRZ,eAAe,CAACG,OAAO,CAAG,KAAK,CACjC,CACF,CAAC,CAAE,EAAE,CAAC,CAEN,GAAMU,aAAY,CAAGnB,KAAK,CAACc,WAAW,CAAC,UAAM,CAC3C,GAAI,CAACP,YAAY,CAACE,OAAO,CAAE,CACzB,OACF,CAIAE,gBAAgB,CAACP,QAAQ,CAACK,OAAO,CAAC,CACpC,CAAC,CAAE,EAAE,CAAC,CAIN,GAAIC,aAAa,GAAKN,QAAQ,CAACK,OAAO,CAAE,CACtCE,gBAAgB,CAACP,QAAQ,CAACK,OAAO,CAAC,CACpC,CAEA,GAAMO,MAAK,CAAGZ,QAAQ,CAACK,OAAO,CAE9BT,KAAK,CAACoB,aAAa,CAACJ,KAAK,CAAC,CAE1B,MAAO,CAACA,KAAK,CAAEH,QAAQ,CAAEE,QAAQ,CAAEE,cAAc,CAAEE,YAAY,CAAC,CAClE","sourceRoot":"../../src","sourcesContent":["import * as React from 'react';\nconst UNINTIALIZED_STATE = {};\n\n/**\n * This is definitely not compatible with concurrent mode, but we don't have a solution for sync state yet.\n */\nexport default function useSyncState(initialState) {\n  const stateRef = React.useRef(UNINTIALIZED_STATE);\n  const isSchedulingRef = React.useRef(false);\n  const isMountedRef = React.useRef(true);\n  React.useEffect(() => {\n    isMountedRef.current = true;\n    return () => {\n      isMountedRef.current = false;\n    };\n  }, []);\n  if (stateRef.current === UNINTIALIZED_STATE) {\n    stateRef.current =\n    // @ts-expect-error: initialState is a function, but TypeScript doesn't think so\n    typeof initialState === 'function' ? initialState() : initialState;\n  }\n  const [trackingState, setTrackingState] = React.useState(stateRef.current);\n  const getState = React.useCallback(() => stateRef.current, []);\n  const setState = React.useCallback(state => {\n    if (state === stateRef.current || !isMountedRef.current) {\n      return;\n    }\n    stateRef.current = state;\n    if (!isSchedulingRef.current) {\n      setTrackingState(state);\n    }\n  }, []);\n  const scheduleUpdate = React.useCallback(callback => {\n    isSchedulingRef.current = true;\n    try {\n      callback();\n    } finally {\n      isSchedulingRef.current = false;\n    }\n  }, []);\n  const flushUpdates = React.useCallback(() => {\n    if (!isMountedRef.current) {\n      return;\n    }\n\n    // Make sure that the tracking state is up-to-date.\n    // We call it unconditionally, but React should skip the update if state is unchanged.\n    setTrackingState(stateRef.current);\n  }, []);\n\n  // If we're rendering and the tracking state is out of date, update it immediately\n  // This will make sure that our updates are applied as early as possible.\n  if (trackingState !== stateRef.current) {\n    setTrackingState(stateRef.current);\n  }\n  const state = stateRef.current;\n  React.useDebugValue(state);\n  return [state, getState, setState, scheduleUpdate, flushUpdates];\n}\n//# sourceMappingURL=useSyncState.js.map"]},"metadata":{},"sourceType":"module"}