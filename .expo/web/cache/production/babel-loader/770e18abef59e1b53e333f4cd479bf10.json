{"ast":null,"code":"import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}import*as queryString from'query-string';import fromEntries from\"./fromEntries\";import validatePathConfig from\"./validatePathConfig\";var getActiveRoute=function getActiveRoute(state){var route=typeof state.index==='number'?state.routes[state.index]:state.routes[state.routes.length-1];if(route.state){return getActiveRoute(route.state);}return route;};export default function getPathFromState(state,options){if(state==null){throw Error(\"Got 'undefined' for the navigation state. You must pass a valid state object.\");}if(options){validatePathConfig(options);}var configs=options!==null&&options!==void 0&&options.screens?createNormalizedConfigs(options===null||options===void 0?void 0:options.screens):{};var path='/';var current=state;var allParams={};var _loop=function _loop(){var index=typeof current.index==='number'?current.index:0;var route=current.routes[index];var pattern;var focusedParams;var focusedRoute=getActiveRoute(state);var currentOptions=configs;var nestedRouteNames=[];var hasNext=true;var _loop2=function _loop2(){pattern=currentOptions[route.name].pattern;nestedRouteNames.push(route.name);if(route.params){var stringify=(_currentOptions$route=currentOptions[route.name])===null||_currentOptions$route===void 0?void 0:_currentOptions$route.stringify;var currentParams=fromEntries(Object.entries(route.params).map(function(_ref){var _ref3=_slicedToArray(_ref,2),key=_ref3[0],value=_ref3[1];return[key,stringify!==null&&stringify!==void 0&&stringify[key]?stringify[key](value):String(value)];}));if(pattern){Object.assign(allParams,currentParams);}if(focusedRoute===route){focusedParams=_objectSpread({},currentParams);(_pattern=pattern)===null||_pattern===void 0?void 0:_pattern.split('/').filter(function(p){return p.startsWith(':');}).forEach(function(p){var name=getParamName(p);if(focusedParams){delete focusedParams[name];}});}}if(!currentOptions[route.name].screens||route.state===undefined){hasNext=false;}else{index=typeof route.state.index==='number'?route.state.index:route.state.routes.length-1;var nextRoute=route.state.routes[index];var nestedConfig=currentOptions[route.name].screens;if(nestedConfig&&nextRoute.name in nestedConfig){route=nextRoute;currentOptions=nestedConfig;}else{hasNext=false;}}};while(route.name in currentOptions&&hasNext){_loop2();}if(pattern===undefined){pattern=nestedRouteNames.join('/');}if(currentOptions[route.name]!==undefined){path+=pattern.split('/').map(function(p){var name=getParamName(p);if(p==='*'){return route.name;}if(p.startsWith(':')){var value=allParams[name];if(value===undefined&&p.endsWith('?')){return'';}return encodeURIComponent(value);}return encodeURIComponent(p);}).join('/');}else{path+=encodeURIComponent(route.name);}if(!focusedParams){focusedParams=focusedRoute.params;}if(route.state){path+='/';}else if(focusedParams){for(var param in focusedParams){if(focusedParams[param]==='undefined'){delete focusedParams[param];}}var query=queryString.stringify(focusedParams,{sort:false});if(query){path+=\"?\"+query;}}current=route.state;};while(current){var _currentOptions$route,_pattern;_loop();}path=path.replace(/\\/+/g,'/');path=path.length>1?path.replace(/\\/$/,''):path;return path;}var getParamName=function getParamName(pattern){return pattern.replace(/^:/,'').replace(/\\?$/,'');};var joinPaths=function joinPaths(){var _ref4;for(var _len=arguments.length,paths=new Array(_len),_key=0;_key<_len;_key++){paths[_key]=arguments[_key];}return(_ref4=[]).concat.apply(_ref4,_toConsumableArray(paths.map(function(p){return p.split('/');}))).filter(Boolean).join('/');};var createConfigItem=function createConfigItem(config,parentPattern){var _pattern2;if(typeof config==='string'){var _pattern3=parentPattern?joinPaths(parentPattern,config):config;return{pattern:_pattern3};}var pattern;if(config.exact&&config.path===undefined){throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");}pattern=config.exact!==true?joinPaths(parentPattern||'',config.path||''):config.path||'';var screens=config.screens?createNormalizedConfigs(config.screens,pattern):undefined;return{pattern:(_pattern2=pattern)===null||_pattern2===void 0?void 0:_pattern2.split('/').filter(Boolean).join('/'),stringify:config.stringify,screens:screens};};var createNormalizedConfigs=function createNormalizedConfigs(options,pattern){return fromEntries(Object.entries(options).map(function(_ref2){var _ref5=_slicedToArray(_ref2,2),name=_ref5[0],c=_ref5[1];var result=createConfigItem(c,pattern);return[name,result];}));};","map":{"version":3,"sources":["getPathFromState.tsx"],"names":["queryString","fromEntries","validatePathConfig","getActiveRoute","state","route","index","routes","length","getPathFromState","options","Error","configs","screens","createNormalizedConfigs","path","current","allParams","pattern","focusedParams","focusedRoute","currentOptions","nestedRouteNames","hasNext","name","push","params","stringify","currentParams","Object","entries","map","key","value","String","assign","split","filter","p","startsWith","forEach","getParamName","undefined","nextRoute","nestedConfig","join","endsWith","encodeURIComponent","param","query","sort","replace","joinPaths","paths","concat","Boolean","createConfigItem","config","parentPattern","exact","c","result"],"mappings":"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","sourceRoot":"../../src","sourcesContent":["import * as queryString from 'query-string';\nimport fromEntries from './fromEntries';\nimport validatePathConfig from './validatePathConfig';\nconst getActiveRoute = state => {\n  const route = typeof state.index === 'number' ? state.routes[state.index] : state.routes[state.routes.length - 1];\n  if (route.state) {\n    return getActiveRoute(route.state);\n  }\n  return route;\n};\n\n/**\n * Utility to serialize a navigation state object to a path string.\n *\n * @example\n * ```js\n * getPathFromState(\n *   {\n *     routes: [\n *       {\n *         name: 'Chat',\n *         params: { author: 'Jane', id: 42 },\n *       },\n *     ],\n *   },\n *   {\n *     screens: {\n *       Chat: {\n *         path: 'chat/:author/:id',\n *         stringify: { author: author => author.toLowerCase() }\n *       }\n *     }\n *   }\n * )\n * ```\n *\n * @param state Navigation state to serialize.\n * @param options Extra options to fine-tune how to serialize the path.\n * @returns Path representing the state, e.g. /foo/bar?count=42.\n */\nexport default function getPathFromState(state, options) {\n  if (state == null) {\n    throw Error(\"Got 'undefined' for the navigation state. You must pass a valid state object.\");\n  }\n  if (options) {\n    validatePathConfig(options);\n  }\n\n  // Create a normalized configs object which will be easier to use\n  const configs = options !== null && options !== void 0 && options.screens ? createNormalizedConfigs(options === null || options === void 0 ? void 0 : options.screens) : {};\n  let path = '/';\n  let current = state;\n  const allParams = {};\n  while (current) {\n    let index = typeof current.index === 'number' ? current.index : 0;\n    let route = current.routes[index];\n    let pattern;\n    let focusedParams;\n    let focusedRoute = getActiveRoute(state);\n    let currentOptions = configs;\n\n    // Keep all the route names that appeared during going deeper in config in case the pattern is resolved to undefined\n    let nestedRouteNames = [];\n    let hasNext = true;\n    while (route.name in currentOptions && hasNext) {\n      pattern = currentOptions[route.name].pattern;\n      nestedRouteNames.push(route.name);\n      if (route.params) {\n        var _currentOptions$route;\n        const stringify = (_currentOptions$route = currentOptions[route.name]) === null || _currentOptions$route === void 0 ? void 0 : _currentOptions$route.stringify;\n        const currentParams = fromEntries(Object.entries(route.params).map(_ref => {\n          let [key, value] = _ref;\n          return [key, stringify !== null && stringify !== void 0 && stringify[key] ? stringify[key](value) : String(value)];\n        }));\n        if (pattern) {\n          Object.assign(allParams, currentParams);\n        }\n        if (focusedRoute === route) {\n          var _pattern;\n          // If this is the focused route, keep the params for later use\n          // We save it here since it's been stringified already\n          focusedParams = {\n            ...currentParams\n          };\n          (_pattern = pattern) === null || _pattern === void 0 ? void 0 : _pattern.split('/').filter(p => p.startsWith(':'))\n          // eslint-disable-next-line no-loop-func\n          .forEach(p => {\n            const name = getParamName(p);\n\n            // Remove the params present in the pattern since we'll only use the rest for query string\n            if (focusedParams) {\n              // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n              delete focusedParams[name];\n            }\n          });\n        }\n      }\n\n      // If there is no `screens` property or no nested state, we return pattern\n      if (!currentOptions[route.name].screens || route.state === undefined) {\n        hasNext = false;\n      } else {\n        index = typeof route.state.index === 'number' ? route.state.index : route.state.routes.length - 1;\n        const nextRoute = route.state.routes[index];\n        const nestedConfig = currentOptions[route.name].screens;\n\n        // if there is config for next route name, we go deeper\n        if (nestedConfig && nextRoute.name in nestedConfig) {\n          route = nextRoute;\n          currentOptions = nestedConfig;\n        } else {\n          // If not, there is no sense in going deeper in config\n          hasNext = false;\n        }\n      }\n    }\n    if (pattern === undefined) {\n      pattern = nestedRouteNames.join('/');\n    }\n    if (currentOptions[route.name] !== undefined) {\n      path += pattern.split('/').map(p => {\n        const name = getParamName(p);\n\n        // We don't know what to show for wildcard patterns\n        // Showing the route name seems ok, though whatever we show here will be incorrect\n        // Since the page doesn't actually exist\n        if (p === '*') {\n          return route.name;\n        }\n\n        // If the path has a pattern for a param, put the param in the path\n        if (p.startsWith(':')) {\n          const value = allParams[name];\n          if (value === undefined && p.endsWith('?')) {\n            // Optional params without value assigned in route.params should be ignored\n            return '';\n          }\n          return encodeURIComponent(value);\n        }\n        return encodeURIComponent(p);\n      }).join('/');\n    } else {\n      path += encodeURIComponent(route.name);\n    }\n    if (!focusedParams) {\n      focusedParams = focusedRoute.params;\n    }\n    if (route.state) {\n      path += '/';\n    } else if (focusedParams) {\n      for (let param in focusedParams) {\n        if (focusedParams[param] === 'undefined') {\n          // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n          delete focusedParams[param];\n        }\n      }\n      const query = queryString.stringify(focusedParams, {\n        sort: false\n      });\n      if (query) {\n        path += `?${query}`;\n      }\n    }\n    current = route.state;\n  }\n\n  // Remove multiple as well as trailing slashes\n  path = path.replace(/\\/+/g, '/');\n  path = path.length > 1 ? path.replace(/\\/$/, '') : path;\n  return path;\n}\nconst getParamName = pattern => pattern.replace(/^:/, '').replace(/\\?$/, '');\nconst joinPaths = function () {\n  for (var _len = arguments.length, paths = new Array(_len), _key = 0; _key < _len; _key++) {\n    paths[_key] = arguments[_key];\n  }\n  return [].concat(...paths.map(p => p.split('/'))).filter(Boolean).join('/');\n};\nconst createConfigItem = (config, parentPattern) => {\n  var _pattern2;\n  if (typeof config === 'string') {\n    // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n    const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n    return {\n      pattern\n    };\n  }\n\n  // If an object is specified as the value (e.g. Foo: { ... }),\n  // It can have `path` property and `screens` prop which has nested configs\n  let pattern;\n  if (config.exact && config.path === undefined) {\n    throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");\n  }\n  pattern = config.exact !== true ? joinPaths(parentPattern || '', config.path || '') : config.path || '';\n  const screens = config.screens ? createNormalizedConfigs(config.screens, pattern) : undefined;\n  return {\n    // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n    pattern: (_pattern2 = pattern) === null || _pattern2 === void 0 ? void 0 : _pattern2.split('/').filter(Boolean).join('/'),\n    stringify: config.stringify,\n    screens\n  };\n};\nconst createNormalizedConfigs = (options, pattern) => fromEntries(Object.entries(options).map(_ref2 => {\n  let [name, c] = _ref2;\n  const result = createConfigItem(c, pattern);\n  return [name, result];\n}));\n//# sourceMappingURL=getPathFromState.js.map"]},"metadata":{},"sourceType":"module"}