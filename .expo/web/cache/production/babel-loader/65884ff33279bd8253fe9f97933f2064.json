{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}import createHandler from\"./createHandler\";import{baseGestureHandlerProps}from\"./gestureHandlerCommon\";export var panGestureHandlerProps=['activeOffsetY','activeOffsetX','failOffsetY','failOffsetX','minDist','minVelocity','minVelocityX','minVelocityY','minPointers','maxPointers','avgTouches','enableTrackpadTwoFingerGesture','activateAfterLongPress'];export var panGestureHandlerCustomNativeProps=['activeOffsetYStart','activeOffsetYEnd','activeOffsetXStart','activeOffsetXEnd','failOffsetYStart','failOffsetYEnd','failOffsetXStart','failOffsetXEnd'];export var panHandlerName='PanGestureHandler';export var PanGestureHandler=createHandler({name:panHandlerName,allowedProps:[].concat(_toConsumableArray(baseGestureHandlerProps),panGestureHandlerProps),config:{},transformProps:managePanProps,customNativeProps:panGestureHandlerCustomNativeProps});function validatePanGestureHandlerProps(props){if(Array.isArray(props.activeOffsetX)&&(props.activeOffsetX[0]>0||props.activeOffsetX[1]<0)){throw new Error(\"First element of activeOffsetX should be negative, a the second one should be positive\");}if(Array.isArray(props.activeOffsetY)&&(props.activeOffsetY[0]>0||props.activeOffsetY[1]<0)){throw new Error(\"First element of activeOffsetY should be negative, a the second one should be positive\");}if(Array.isArray(props.failOffsetX)&&(props.failOffsetX[0]>0||props.failOffsetX[1]<0)){throw new Error(\"First element of failOffsetX should be negative, a the second one should be positive\");}if(Array.isArray(props.failOffsetY)&&(props.failOffsetY[0]>0||props.failOffsetY[1]<0)){throw new Error(\"First element of failOffsetY should be negative, a the second one should be positive\");}if(props.minDist&&(props.failOffsetX||props.failOffsetY)){throw new Error(\"It is not supported to use minDist with failOffsetX or failOffsetY, use activeOffsetX and activeOffsetY instead\");}if(props.minDist&&(props.activeOffsetX||props.activeOffsetY)){throw new Error(\"It is not supported to use minDist with activeOffsetX or activeOffsetY\");}}function transformPanGestureHandlerProps(props){var res=_objectSpread({},props);if(props.activeOffsetX!==undefined){delete res.activeOffsetX;if(Array.isArray(props.activeOffsetX)){res.activeOffsetXStart=props.activeOffsetX[0];res.activeOffsetXEnd=props.activeOffsetX[1];}else if(props.activeOffsetX<0){res.activeOffsetXStart=props.activeOffsetX;}else{res.activeOffsetXEnd=props.activeOffsetX;}}if(props.activeOffsetY!==undefined){delete res.activeOffsetY;if(Array.isArray(props.activeOffsetY)){res.activeOffsetYStart=props.activeOffsetY[0];res.activeOffsetYEnd=props.activeOffsetY[1];}else if(props.activeOffsetY<0){res.activeOffsetYStart=props.activeOffsetY;}else{res.activeOffsetYEnd=props.activeOffsetY;}}if(props.failOffsetX!==undefined){delete res.failOffsetX;if(Array.isArray(props.failOffsetX)){res.failOffsetXStart=props.failOffsetX[0];res.failOffsetXEnd=props.failOffsetX[1];}else if(props.failOffsetX<0){res.failOffsetXStart=props.failOffsetX;}else{res.failOffsetXEnd=props.failOffsetX;}}if(props.failOffsetY!==undefined){delete res.failOffsetY;if(Array.isArray(props.failOffsetY)){res.failOffsetYStart=props.failOffsetY[0];res.failOffsetYEnd=props.failOffsetY[1];}else if(props.failOffsetY<0){res.failOffsetYStart=props.failOffsetY;}else{res.failOffsetYEnd=props.failOffsetY;}}return res;}export function managePanProps(props){if(__DEV__){validatePanGestureHandlerProps(props);}return transformPanGestureHandlerProps(props);}","map":{"version":3,"mappings":"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","names":["createHandler","baseGestureHandlerProps","panGestureHandlerProps","panGestureHandlerCustomNativeProps","panHandlerName","PanGestureHandler","name","allowedProps","config","transformProps","managePanProps","customNativeProps","validatePanGestureHandlerProps","props","Array","isArray","activeOffsetX","Error","activeOffsetY","failOffsetX","failOffsetY","minDist","transformPanGestureHandlerProps","res","undefined","activeOffsetXStart","activeOffsetXEnd","activeOffsetYStart","activeOffsetYEnd","failOffsetXStart","failOffsetXEnd","failOffsetYStart","failOffsetYEnd","__DEV__"],"sources":["PanGestureHandler.ts"],"sourcesContent":["import createHandler from './createHandler';\nimport {\n  BaseGestureHandlerProps,\n  baseGestureHandlerProps,\n} from './gestureHandlerCommon';\n\nexport const panGestureHandlerProps = [\n  'activeOffsetY',\n  'activeOffsetX',\n  'failOffsetY',\n  'failOffsetX',\n  'minDist',\n  'minVelocity',\n  'minVelocityX',\n  'minVelocityY',\n  'minPointers',\n  'maxPointers',\n  'avgTouches',\n  'enableTrackpadTwoFingerGesture',\n  'activateAfterLongPress',\n] as const;\n\nexport const panGestureHandlerCustomNativeProps = [\n  'activeOffsetYStart',\n  'activeOffsetYEnd',\n  'activeOffsetXStart',\n  'activeOffsetXEnd',\n  'failOffsetYStart',\n  'failOffsetYEnd',\n  'failOffsetXStart',\n  'failOffsetXEnd',\n] as const;\n\nexport type PanGestureHandlerEventPayload = {\n  /**\n   * X coordinate of the current position of the pointer (finger or a leading\n   * pointer when there are multiple fingers placed) relative to the view\n   * attached to the handler. Expressed in point units.\n   */\n  x: number;\n\n  /**\n   * Y coordinate of the current position of the pointer (finger or a leading\n   * pointer when there are multiple fingers placed) relative to the view\n   * attached to the handler. Expressed in point units.\n   */\n  y: number;\n\n  /**\n   * X coordinate of the current position of the pointer (finger or a leading\n   * pointer when there are multiple fingers placed) relative to the window.\n   * The value is expressed in point units. It is recommended to use it instead\n   * of `x` in cases when the original view can be transformed as an effect of\n   * the gesture.\n   */\n  absoluteX: number;\n\n  /**\n   * Y coordinate of the current position of the pointer (finger or a leading\n   * pointer when there are multiple fingers placed) relative to the window.\n   * The value is expressed in point units. It is recommended to use it instead\n   * of `y` in cases when the original view can be transformed as an\n   * effect of the gesture.\n   */\n  absoluteY: number;\n\n  /**\n   * Translation of the pan gesture along X axis accumulated over the time of\n   * the gesture. The value is expressed in the point units.\n   */\n  translationX: number;\n\n  /**\n   * Translation of the pan gesture along Y axis accumulated over the time of\n   * the gesture. The value is expressed in the point units.\n   */\n  translationY: number;\n\n  /**\n   * Velocity of the pan gesture along the X axis in the current moment. The\n   * value is expressed in point units per second.\n   */\n  velocityX: number;\n\n  /**\n   * Velocity of the pan gesture along the Y axis in the current moment. The\n   * value is expressed in point units per second.\n   */\n  velocityY: number;\n};\n\ninterface CommonPanProperties {\n  /**\n   * Minimum distance the finger (or multiple finger) need to travel before the\n   * handler activates. Expressed in points.\n   */\n  minDist?: number;\n\n  /**\n   * Android only.\n   */\n  avgTouches?: boolean;\n\n  /**\n   * Enables two-finger gestures on supported devices, for example iPads with\n   * trackpads. If not enabled the gesture will require click + drag, with\n   * enableTrackpadTwoFingerGesture swiping with two fingers will also trigger\n   * the gesture.\n   */\n  enableTrackpadTwoFingerGesture?: boolean;\n\n  /**\n   * A number of fingers that is required to be placed before handler can\n   * activate. Should be a higher or equal to 0 integer.\n   */\n  minPointers?: number;\n\n  /**\n   * When the given number of fingers is placed on the screen and handler hasn't\n   * yet activated it will fail recognizing the gesture. Should be a higher or\n   * equal to 0 integer.\n   */\n  maxPointers?: number;\n\n  minVelocity?: number;\n  minVelocityX?: number;\n  minVelocityY?: number;\n  activateAfterLongPress?: number;\n}\n\nexport interface PanGestureConfig extends CommonPanProperties {\n  activeOffsetYStart?: number;\n  activeOffsetYEnd?: number;\n  activeOffsetXStart?: number;\n  activeOffsetXEnd?: number;\n  failOffsetYStart?: number;\n  failOffsetYEnd?: number;\n  failOffsetXStart?: number;\n  failOffsetXEnd?: number;\n}\n\nexport interface PanGestureHandlerProps\n  extends BaseGestureHandlerProps<PanGestureHandlerEventPayload>,\n    CommonPanProperties {\n  /**\n   * Range along X axis (in points) where fingers travels without activation of\n   * handler. Moving outside of this range implies activation of handler. Range\n   * can be given as an array or a single number. If range is set as an array,\n   * first value must be lower or equal to 0, a the second one higher or equal\n   * to 0. If only one number `p` is given a range of `(-inf, p)` will be used\n   * if `p` is higher or equal to 0 and `(-p, inf)` otherwise.\n   */\n  activeOffsetY?: number | number[];\n\n  /**\n   * Range along X axis (in points) where fingers travels without activation of\n   * handler. Moving outside of this range implies activation of handler. Range\n   * can be given as an array or a single number. If range is set as an array,\n   * first value must be lower or equal to 0, a the second one higher or equal\n   * to 0. If only one number `p` is given a range of `(-inf, p)` will be used\n   * if `p` is higher or equal to 0 and `(-p, inf)` otherwise.\n   */\n  activeOffsetX?: number | number[];\n\n  /**\n   * When the finger moves outside this range (in points) along Y axis and\n   * handler hasn't yet activated it will fail recognizing the gesture. Range\n   * can be given as an array or a single number. If range is set as an array,\n   * first value must be lower or equal to 0, a the second one higher or equal\n   * to 0. If only one number `p` is given a range of `(-inf, p)` will be used\n   * if `p` is higher or equal to 0 and `(-p, inf)` otherwise.\n   */\n  failOffsetY?: number | number[];\n\n  /**\n   * When the finger moves outside this range (in points) along X axis and\n   * handler hasn't yet activated it will fail recognizing the gesture. Range\n   * can be given as an array or a single number. If range is set as an array,\n   * first value must be lower or equal to 0, a the second one higher or equal\n   * to 0. If only one number `p` is given a range of `(-inf, p)` will be used\n   * if `p` is higher or equal to 0 and `(-p, inf)` otherwise.\n   */\n  failOffsetX?: number | number[];\n}\n\nexport const panHandlerName = 'PanGestureHandler';\n\nexport type PanGestureHandler = typeof PanGestureHandler;\n// eslint-disable-next-line @typescript-eslint/no-redeclare -- backward compatibility; see description on the top of gestureHandlerCommon.ts file\nexport const PanGestureHandler = createHandler<\n  PanGestureHandlerProps,\n  PanGestureHandlerEventPayload\n>({\n  name: panHandlerName,\n  allowedProps: [\n    ...baseGestureHandlerProps,\n    ...panGestureHandlerProps,\n  ] as const,\n  config: {},\n  transformProps: managePanProps,\n  customNativeProps: panGestureHandlerCustomNativeProps,\n});\n\nfunction validatePanGestureHandlerProps(props: PanGestureHandlerProps) {\n  if (\n    Array.isArray(props.activeOffsetX) &&\n    (props.activeOffsetX[0] > 0 || props.activeOffsetX[1] < 0)\n  ) {\n    throw new Error(\n      `First element of activeOffsetX should be negative, a the second one should be positive`\n    );\n  }\n\n  if (\n    Array.isArray(props.activeOffsetY) &&\n    (props.activeOffsetY[0] > 0 || props.activeOffsetY[1] < 0)\n  ) {\n    throw new Error(\n      `First element of activeOffsetY should be negative, a the second one should be positive`\n    );\n  }\n\n  if (\n    Array.isArray(props.failOffsetX) &&\n    (props.failOffsetX[0] > 0 || props.failOffsetX[1] < 0)\n  ) {\n    throw new Error(\n      `First element of failOffsetX should be negative, a the second one should be positive`\n    );\n  }\n\n  if (\n    Array.isArray(props.failOffsetY) &&\n    (props.failOffsetY[0] > 0 || props.failOffsetY[1] < 0)\n  ) {\n    throw new Error(\n      `First element of failOffsetY should be negative, a the second one should be positive`\n    );\n  }\n\n  if (props.minDist && (props.failOffsetX || props.failOffsetY)) {\n    throw new Error(\n      `It is not supported to use minDist with failOffsetX or failOffsetY, use activeOffsetX and activeOffsetY instead`\n    );\n  }\n\n  if (props.minDist && (props.activeOffsetX || props.activeOffsetY)) {\n    throw new Error(\n      `It is not supported to use minDist with activeOffsetX or activeOffsetY`\n    );\n  }\n}\n\nfunction transformPanGestureHandlerProps(props: PanGestureHandlerProps) {\n  type InternalPanGHKeys =\n    | 'activeOffsetXStart'\n    | 'activeOffsetXEnd'\n    | 'failOffsetXStart'\n    | 'failOffsetXEnd'\n    | 'activeOffsetYStart'\n    | 'activeOffsetYEnd'\n    | 'failOffsetYStart'\n    | 'failOffsetYEnd';\n  type PanGestureHandlerInternalProps = PanGestureHandlerProps &\n    Partial<Record<InternalPanGHKeys, number>>;\n\n  const res: PanGestureHandlerInternalProps = { ...props };\n\n  if (props.activeOffsetX !== undefined) {\n    delete res.activeOffsetX;\n    if (Array.isArray(props.activeOffsetX)) {\n      res.activeOffsetXStart = props.activeOffsetX[0];\n      res.activeOffsetXEnd = props.activeOffsetX[1];\n    } else if (props.activeOffsetX < 0) {\n      res.activeOffsetXStart = props.activeOffsetX;\n    } else {\n      res.activeOffsetXEnd = props.activeOffsetX;\n    }\n  }\n\n  if (props.activeOffsetY !== undefined) {\n    delete res.activeOffsetY;\n    if (Array.isArray(props.activeOffsetY)) {\n      res.activeOffsetYStart = props.activeOffsetY[0];\n      res.activeOffsetYEnd = props.activeOffsetY[1];\n    } else if (props.activeOffsetY < 0) {\n      res.activeOffsetYStart = props.activeOffsetY;\n    } else {\n      res.activeOffsetYEnd = props.activeOffsetY;\n    }\n  }\n\n  if (props.failOffsetX !== undefined) {\n    delete res.failOffsetX;\n    if (Array.isArray(props.failOffsetX)) {\n      res.failOffsetXStart = props.failOffsetX[0];\n      res.failOffsetXEnd = props.failOffsetX[1];\n    } else if (props.failOffsetX < 0) {\n      res.failOffsetXStart = props.failOffsetX;\n    } else {\n      res.failOffsetXEnd = props.failOffsetX;\n    }\n  }\n\n  if (props.failOffsetY !== undefined) {\n    delete res.failOffsetY;\n    if (Array.isArray(props.failOffsetY)) {\n      res.failOffsetYStart = props.failOffsetY[0];\n      res.failOffsetYEnd = props.failOffsetY[1];\n    } else if (props.failOffsetY < 0) {\n      res.failOffsetYStart = props.failOffsetY;\n    } else {\n      res.failOffsetYEnd = props.failOffsetY;\n    }\n  }\n\n  return res;\n}\n\nexport function managePanProps(props: PanGestureHandlerProps) {\n  if (__DEV__) {\n    validatePanGestureHandlerProps(props);\n  }\n  return transformPanGestureHandlerProps(props);\n}\n"]},"metadata":{},"sourceType":"module"}