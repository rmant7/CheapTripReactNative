{"ast":null,"code":"import{nanoid}from'nanoid/non-secure';export default function createMemoryHistory(){var index=0;var items=[];var pending=[];var interrupt=function interrupt(){pending.forEach(function(it){var cb=it.cb;it.cb=function(){return cb(true);};});};var history={get index(){var _window$history$state;var id=(_window$history$state=window.history.state)===null||_window$history$state===void 0?void 0:_window$history$state.id;if(id){var _index=items.findIndex(function(item){return item.id===id;});return _index>-1?_index:0;}return 0;},get:function get(index){return items[index];},backIndex:function backIndex(_ref){var path=_ref.path;for(var i=index-1;i>=0;i--){var item=items[i];if(item.path===path){return i;}}return-1;},push:function push(_ref2){var path=_ref2.path,state=_ref2.state;interrupt();var id=nanoid();items=items.slice(0,index+1);items.push({path:path,state:state,id:id});index=items.length-1;window.history.pushState({id:id},'',path);},replace:function replace(_ref3){var _ref4;var _window$history$state2;var path=_ref3.path,state=_ref3.state;interrupt();var id=(_ref4=(_window$history$state2=window.history.state)===null||_window$history$state2===void 0?void 0:_window$history$state2.id)!=null?_ref4:nanoid();var pathWithHash=path;if(!items.length||items.findIndex(function(item){return item.id===id;})<0){pathWithHash=pathWithHash+location.hash;items=[{path:pathWithHash,state:state,id:id}];index=0;}else{if(items[index].path===path){pathWithHash=pathWithHash+location.hash;}items[index]={path:path,state:state,id:id};}window.history.replaceState({id:id},'',pathWithHash);},go:function go(n){interrupt();var nextIndex=index+n;var lastItemIndex=items.length-1;if(n<0&&!items[nextIndex]){n=-index;index=0;}else if(n>0&&nextIndex>lastItemIndex){n=lastItemIndex-index;index=lastItemIndex;}else{index=nextIndex;}if(n===0){return;}return new Promise(function(resolve,reject){var done=function done(interrupted){clearTimeout(timer);if(interrupted){reject(new Error('History was changed during navigation.'));return;}var title=window.document.title;window.document.title='';window.document.title=title;resolve();};pending.push({ref:done,cb:done});var timer=setTimeout(function(){var index=pending.findIndex(function(it){return it.ref===done;});if(index>-1){pending[index].cb();pending.splice(index,1);}},100);var onPopState=function onPopState(){var _window$history$state3;var id=(_window$history$state3=window.history.state)===null||_window$history$state3===void 0?void 0:_window$history$state3.id;var currentIndex=items.findIndex(function(item){return item.id===id;});index=Math.max(currentIndex,0);var last=pending.pop();window.removeEventListener('popstate',onPopState);last===null||last===void 0?void 0:last.cb();};window.addEventListener('popstate',onPopState);window.history.go(n);});},listen:function listen(listener){var onPopState=function onPopState(){if(pending.length){return;}listener();};window.addEventListener('popstate',onPopState);return function(){return window.removeEventListener('popstate',onPopState);};}};return history;}","map":{"version":3,"sources":["createMemoryHistory.tsx"],"names":["nanoid","createMemoryHistory","index","items","pending","interrupt","forEach","it","cb","history","id","window","state","findIndex","item","get","backIndex","path","i","push","slice","length","pushState","replace","pathWithHash","location","hash","replaceState","go","n","nextIndex","lastItemIndex","Promise","resolve","reject","done","interrupted","clearTimeout","timer","Error","title","document","ref","setTimeout","splice","onPopState","currentIndex","Math","max","last","pop","removeEventListener","addEventListener","listen","listener"],"mappings":"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","sourceRoot":"../../src","sourcesContent":["import { nanoid } from 'nanoid/non-secure';\nexport default function createMemoryHistory() {\n  let index = 0;\n  let items = [];\n\n  // Pending callbacks for `history.go(n)`\n  // We might modify the callback stored if it was interrupted, so we have a ref to identify it\n  const pending = [];\n  const interrupt = () => {\n    // If another history operation was performed we need to interrupt existing ones\n    // This makes sure that calls such as `history.replace` after `history.go` don't happen\n    // Since otherwise it won't be correct if something else has changed\n    pending.forEach(it => {\n      const cb = it.cb;\n      it.cb = () => cb(true);\n    });\n  };\n  const history = {\n    get index() {\n      var _window$history$state;\n      // We store an id in the state instead of an index\n      // Index could get out of sync with in-memory values if page reloads\n      const id = (_window$history$state = window.history.state) === null || _window$history$state === void 0 ? void 0 : _window$history$state.id;\n      if (id) {\n        const index = items.findIndex(item => item.id === id);\n        return index > -1 ? index : 0;\n      }\n      return 0;\n    },\n    get(index) {\n      return items[index];\n    },\n    backIndex(_ref) {\n      let {\n        path\n      } = _ref;\n      // We need to find the index from the element before current to get closest path to go back to\n      for (let i = index - 1; i >= 0; i--) {\n        const item = items[i];\n        if (item.path === path) {\n          return i;\n        }\n      }\n      return -1;\n    },\n    push(_ref2) {\n      let {\n        path,\n        state\n      } = _ref2;\n      interrupt();\n      const id = nanoid();\n\n      // When a new entry is pushed, all the existing entries after index will be inaccessible\n      // So we remove any existing entries after the current index to clean them up\n      items = items.slice(0, index + 1);\n      items.push({\n        path,\n        state,\n        id\n      });\n      index = items.length - 1;\n\n      // We pass empty string for title because it's ignored in all browsers except safari\n      // We don't store state object in history.state because:\n      // - browsers have limits on how big it can be, and we don't control the size\n      // - while not recommended, there could be non-serializable data in state\n      window.history.pushState({\n        id\n      }, '', path);\n    },\n    replace(_ref3) {\n      var _window$history$state2;\n      let {\n        path,\n        state\n      } = _ref3;\n      interrupt();\n      const id = ((_window$history$state2 = window.history.state) === null || _window$history$state2 === void 0 ? void 0 : _window$history$state2.id) ?? nanoid();\n\n      // Need to keep the hash part of the path if there was no previous history entry\n      // or the previous history entry had the same path\n      let pathWithHash = path;\n      if (!items.length || items.findIndex(item => item.id === id) < 0) {\n        // There are two scenarios for creating an array with only one history record:\n        // - When loaded id not found in the items array, this function by default will replace\n        //   the first item. We need to keep only the new updated object, otherwise it will break\n        //   the page when navigating forward in history.\n        // - This is the first time any state modifications are done\n        //   So we need to push the entry as there's nothing to replace\n        pathWithHash = pathWithHash + location.hash;\n        items = [{\n          path: pathWithHash,\n          state,\n          id\n        }];\n        index = 0;\n      } else {\n        if (items[index].path === path) {\n          pathWithHash = pathWithHash + location.hash;\n        }\n        items[index] = {\n          path,\n          state,\n          id\n        };\n      }\n      window.history.replaceState({\n        id\n      }, '', pathWithHash);\n    },\n    // `history.go(n)` is asynchronous, there are couple of things to keep in mind:\n    // - it won't do anything if we can't go `n` steps, the `popstate` event won't fire.\n    // - each `history.go(n)` call will trigger a separate `popstate` event with correct location.\n    // - the `popstate` event fires before the next frame after calling `history.go(n)`.\n    // This method differs from `history.go(n)` in the sense that it'll go back as many steps it can.\n    go(n) {\n      interrupt();\n\n      // To guard against unexpected navigation out of the app we will assume that browser history is only as deep as the length of our memory\n      // history. If we don't have an item to navigate to then update our index and navigate as far as we can without taking the user out of the app.\n      const nextIndex = index + n;\n      const lastItemIndex = items.length - 1;\n      if (n < 0 && !items[nextIndex]) {\n        // Attempted to navigate beyond the first index. Negating the current index will align the browser history with the first item.\n        n = -index;\n        index = 0;\n      } else if (n > 0 && nextIndex > lastItemIndex) {\n        // Attempted to navigate past the last index. Calculate how many indices away from the last index and go there.\n        n = lastItemIndex - index;\n        index = lastItemIndex;\n      } else {\n        index = nextIndex;\n      }\n      if (n === 0) {\n        return;\n      }\n\n      // When we call `history.go`, `popstate` will fire when there's history to go back to\n      // So we need to somehow handle following cases:\n      // - There's history to go back, `history.go` is called, and `popstate` fires\n      // - `history.go` is called multiple times, we need to resolve on respective `popstate`\n      // - No history to go back, but `history.go` was called, browser has no API to detect it\n      return new Promise((resolve, reject) => {\n        const done = interrupted => {\n          clearTimeout(timer);\n          if (interrupted) {\n            reject(new Error('History was changed during navigation.'));\n            return;\n          }\n\n          // There seems to be a bug in Chrome regarding updating the title\n          // If we set a title just before calling `history.go`, the title gets lost\n          // However the value of `document.title` is still what we set it to\n          // It's just not displayed in the tab bar\n          // To update the tab bar, we need to reset the title to something else first (e.g. '')\n          // And set the title to what it was before so it gets applied\n          // It won't work without setting it to empty string coz otherwise title isn't changing\n          // Which means that the browser won't do anything after setting the title\n          const {\n            title\n          } = window.document;\n          window.document.title = '';\n          window.document.title = title;\n          resolve();\n        };\n        pending.push({\n          ref: done,\n          cb: done\n        });\n\n        // If navigation didn't happen within 100ms, assume that it won't happen\n        // This may not be accurate, but hopefully it won't take so much time\n        // In Chrome, navigation seems to happen instantly in next microtask\n        // But on Firefox, it seems to take much longer, around 50ms from our testing\n        // We're using a hacky timeout since there doesn't seem to be way to know for sure\n        const timer = setTimeout(() => {\n          const index = pending.findIndex(it => it.ref === done);\n          if (index > -1) {\n            pending[index].cb();\n            pending.splice(index, 1);\n          }\n        }, 100);\n        const onPopState = () => {\n          var _window$history$state3;\n          const id = (_window$history$state3 = window.history.state) === null || _window$history$state3 === void 0 ? void 0 : _window$history$state3.id;\n          const currentIndex = items.findIndex(item => item.id === id);\n\n          // Fix createMemoryHistory.index variable's value\n          // as it may go out of sync when navigating in the browser.\n          index = Math.max(currentIndex, 0);\n          const last = pending.pop();\n          window.removeEventListener('popstate', onPopState);\n          last === null || last === void 0 ? void 0 : last.cb();\n        };\n        window.addEventListener('popstate', onPopState);\n        window.history.go(n);\n      });\n    },\n    // The `popstate` event is triggered when history changes, except `pushState` and `replaceState`\n    // If we call `history.go(n)` ourselves, we don't want it to trigger the listener\n    // Here we normalize it so that only external changes (e.g. user pressing back/forward) trigger the listener\n    listen(listener) {\n      const onPopState = () => {\n        if (pending.length) {\n          // This was triggered by `history.go(n)`, we shouldn't call the listener\n          return;\n        }\n        listener();\n      };\n      window.addEventListener('popstate', onPopState);\n      return () => window.removeEventListener('popstate', onPopState);\n    }\n  };\n  return history;\n}\n//# sourceMappingURL=createMemoryHistory.js.map"]},"metadata":{},"sourceType":"module"}