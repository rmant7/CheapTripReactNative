{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _inherits from\"@babel/runtime/helpers/inherits\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}import{EventTypes,MouseButtons,PointerType}from\"../interfaces\";import EventManager from\"./EventManager\";import{isPointerInBounds}from\"../utils\";var PointerEventManager=function(_EventManager){_inherits(PointerEventManager,_EventManager);var _super=_createSuper(PointerEventManager);function PointerEventManager(){_classCallCheck(this,PointerEventManager);return _super.apply(this,arguments);}_createClass(PointerEventManager,[{key:\"setListeners\",value:function setListeners(){var _this=this;this.view.addEventListener('pointerdown',function(event){if(event.pointerType===PointerType.TOUCH){return;}if(!isPointerInBounds(_this.view,{x:event.clientX,y:event.clientY})){return;}var adaptedEvent=_this.mapEvent(event,EventTypes.DOWN);var target=event.target;target.setPointerCapture(adaptedEvent.pointerId);_this.markAsInBounds(adaptedEvent.pointerId);if(++_this.activePointersCounter>1){adaptedEvent.eventType=EventTypes.ADDITIONAL_POINTER_DOWN;_this.onPointerAdd(adaptedEvent);}else{_this.onPointerDown(adaptedEvent);}});this.view.addEventListener('pointerup',function(event){if(event.pointerType===PointerType.TOUCH){return;}if(_this.activePointersCounter===0){return;}var adaptedEvent=_this.mapEvent(event,EventTypes.UP);var target=event.target;target.releasePointerCapture(adaptedEvent.pointerId);_this.markAsOutOfBounds(adaptedEvent.pointerId);if(--_this.activePointersCounter>0){adaptedEvent.eventType=EventTypes.ADDITIONAL_POINTER_UP;_this.onPointerRemove(adaptedEvent);}else{_this.onPointerUp(adaptedEvent);}});this.view.addEventListener('pointermove',function(event){if(event.pointerType===PointerType.TOUCH){return;}if(event.pointerType===PointerType.MOUSE&&event.buttons!==MouseButtons.LEFT){return;}var adaptedEvent=_this.mapEvent(event,EventTypes.MOVE);var inBounds=isPointerInBounds(_this.view,{x:adaptedEvent.x,y:adaptedEvent.y});var pointerIndex=_this.pointersInBounds.indexOf(adaptedEvent.pointerId);if(inBounds){if(pointerIndex<0){adaptedEvent.eventType=EventTypes.ENTER;_this.onPointerEnter(adaptedEvent);_this.markAsInBounds(adaptedEvent.pointerId);}else{_this.onPointerMove(adaptedEvent);}}else{if(pointerIndex>=0){adaptedEvent.eventType=EventTypes.OUT;_this.onPointerOut(adaptedEvent);_this.markAsOutOfBounds(adaptedEvent.pointerId);}else{_this.onPointerOutOfBounds(adaptedEvent);}}});this.view.addEventListener('pointercancel',function(event){if(event.pointerType===PointerType.TOUCH){return;}var adaptedEvent=_this.mapEvent(event,EventTypes.CANCEL);_this.onPointerCancel(adaptedEvent);_this.markAsOutOfBounds(adaptedEvent.pointerId);_this.activePointersCounter=0;});}},{key:\"mapEvent\",value:function mapEvent(event,eventType){return{x:event.clientX,y:event.clientY,offsetX:event.offsetX,offsetY:event.offsetY,pointerId:event.pointerId,eventType:eventType,pointerType:event.pointerType,buttons:event.buttons,time:event.timeStamp};}}]);return PointerEventManager;}(EventManager);export{PointerEventManager as default};","map":{"version":3,"mappings":"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","names":["EventTypes","MouseButtons","PointerType","EventManager","isPointerInBounds","PointerEventManager","setListeners","view","addEventListener","event","pointerType","TOUCH","x","clientX","y","clientY","adaptedEvent","mapEvent","DOWN","target","setPointerCapture","pointerId","markAsInBounds","activePointersCounter","eventType","ADDITIONAL_POINTER_DOWN","onPointerAdd","onPointerDown","UP","releasePointerCapture","markAsOutOfBounds","ADDITIONAL_POINTER_UP","onPointerRemove","onPointerUp","MOUSE","buttons","LEFT","MOVE","inBounds","pointerIndex","pointersInBounds","indexOf","ENTER","onPointerEnter","onPointerMove","OUT","onPointerOut","onPointerOutOfBounds","CANCEL","onPointerCancel","offsetX","offsetY","time","timeStamp"],"sources":["PointerEventManager.ts"],"sourcesContent":["import {\n  AdaptedEvent,\n  EventTypes,\n  MouseButtons,\n  PointerType,\n} from '../interfaces';\nimport EventManager from './EventManager';\nimport { isPointerInBounds } from '../utils';\n\nexport default class PointerEventManager extends EventManager {\n  public setListeners(): void {\n    this.view.addEventListener('pointerdown', (event: PointerEvent): void => {\n      if (event.pointerType === PointerType.TOUCH) {\n        return;\n      }\n      if (\n        !isPointerInBounds(this.view, { x: event.clientX, y: event.clientY })\n      ) {\n        return;\n      }\n\n      const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.DOWN);\n      const target = event.target as HTMLElement;\n\n      target.setPointerCapture(adaptedEvent.pointerId);\n      this.markAsInBounds(adaptedEvent.pointerId);\n\n      if (++this.activePointersCounter > 1) {\n        adaptedEvent.eventType = EventTypes.ADDITIONAL_POINTER_DOWN;\n        this.onPointerAdd(adaptedEvent);\n      } else {\n        this.onPointerDown(adaptedEvent);\n      }\n    });\n\n    this.view.addEventListener('pointerup', (event: PointerEvent): void => {\n      if (event.pointerType === PointerType.TOUCH) {\n        return;\n      }\n\n      // When we call reset on gesture handlers, it also resets their event managers\n      // In some handlers (like RotationGestureHandler) reset is called before all pointers leave view\n      // This means, that activePointersCounter will be set to 0, while there are still remaining pointers on view\n      // Removing them will end in activePointersCounter going below 0, therefore handlers won't behave properly\n      if (this.activePointersCounter === 0) {\n        return;\n      }\n\n      const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.UP);\n      const target = event.target as HTMLElement;\n\n      target.releasePointerCapture(adaptedEvent.pointerId);\n      this.markAsOutOfBounds(adaptedEvent.pointerId);\n\n      if (--this.activePointersCounter > 0) {\n        adaptedEvent.eventType = EventTypes.ADDITIONAL_POINTER_UP;\n        this.onPointerRemove(adaptedEvent);\n      } else {\n        this.onPointerUp(adaptedEvent);\n      }\n    });\n\n    this.view.addEventListener('pointermove', (event: PointerEvent): void => {\n      if (event.pointerType === PointerType.TOUCH) {\n        return;\n      }\n\n      if (\n        event.pointerType === PointerType.MOUSE &&\n        event.buttons !== MouseButtons.LEFT\n      ) {\n        return;\n      }\n\n      const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.MOVE);\n\n      const inBounds: boolean = isPointerInBounds(this.view, {\n        x: adaptedEvent.x,\n        y: adaptedEvent.y,\n      });\n\n      const pointerIndex: number = this.pointersInBounds.indexOf(\n        adaptedEvent.pointerId\n      );\n\n      if (inBounds) {\n        if (pointerIndex < 0) {\n          adaptedEvent.eventType = EventTypes.ENTER;\n          this.onPointerEnter(adaptedEvent);\n          this.markAsInBounds(adaptedEvent.pointerId);\n        } else {\n          this.onPointerMove(adaptedEvent);\n        }\n      } else {\n        if (pointerIndex >= 0) {\n          adaptedEvent.eventType = EventTypes.OUT;\n          this.onPointerOut(adaptedEvent);\n          this.markAsOutOfBounds(adaptedEvent.pointerId);\n        } else {\n          this.onPointerOutOfBounds(adaptedEvent);\n        }\n      }\n    });\n\n    this.view.addEventListener('pointercancel', (event: PointerEvent): void => {\n      if (event.pointerType === PointerType.TOUCH) {\n        return;\n      }\n\n      const adaptedEvent: AdaptedEvent = this.mapEvent(\n        event,\n        EventTypes.CANCEL\n      );\n\n      this.onPointerCancel(adaptedEvent);\n      this.markAsOutOfBounds(adaptedEvent.pointerId);\n      this.activePointersCounter = 0;\n    });\n  }\n\n  protected mapEvent(event: PointerEvent, eventType: EventTypes): AdaptedEvent {\n    return {\n      x: event.clientX,\n      y: event.clientY,\n      offsetX: event.offsetX,\n      offsetY: event.offsetY,\n      pointerId: event.pointerId,\n      eventType: eventType,\n      pointerType: event.pointerType as PointerType,\n      buttons: event.buttons,\n      time: event.timeStamp,\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}