{"ast":null,"code":"import compareVersions from'compare-versions';import{CodedError}from\"./errors/CodedError\";var postedWarnings={};export default function deprecate(library,deprecatedAPI){var options=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};var currentVersion=options.currentVersion,versionToRemove=options.versionToRemove,replacement=options.replacement;var code=codeFromLibrary(library);var key=code+\":\"+deprecatedAPI+\":\"+replacement;if(!postedWarnings[key]){postedWarnings[key]=true;}if(!currentVersion||!versionToRemove||compareVersions(currentVersion,versionToRemove)>=0){var _message=\"`\"+deprecatedAPI+\"` has been removed\";if(versionToRemove){_message=_message+\" as of version \\\"\"+versionToRemove+\"\\\"\";}if(replacement&&replacement.length){_message=_message+\" please migrate to: `\"+replacement+\"`\";}throw new CodedError(\"ERR_DEPRECATED_API\",prependLibrary(library,_message));}var message=\"`\"+deprecatedAPI+\"` has been deprecated\";if(replacement&&replacement.length){message=message+\" in favor of `\"+replacement+\"`\";}if(versionToRemove&&versionToRemove.length){message=message+\" and will be removed in version \\\"\"+versionToRemove+\"\\\"\";}console.warn(prependLibrary(library,message));}function prependLibrary(library,message){return library+\": \"+message;}function codeFromLibrary(library){var code=library.replace(/[-.]/g,'_').toUpperCase();return code;}","map":{"version":3,"sources":["../src/deprecate.ts"],"names":[],"mappings":"AAAA,MAAO,gBAAe,KAAM,kBAAkB,CAE9C,OAAS,UAAU,2BAEnB,GAAM,eAAc,CAA+B,CAAA,CAAE,CAKrD,cAAc,SAAU,UAAS,CAC/B,OAAe,CACf,aAAqB,CAKf,IAJN,QAAA,2DAII,CAAA,CAAE,CAEN,GAAQ,eAAc,CAAmC,OAAO,CAAxD,cAAc,CAAE,eAAe,CAAkB,OAAO,CAAxC,eAAe,CAAE,WAAW,CAAK,OAAO,CAAvB,WAAW,CACpD,GAAM,KAAI,CAAG,eAAe,CAAC,OAAO,CAAC,CACrC,GAAM,IAAG,CAAM,IAAI,KAAI,aAAa,KAAI,WAAa,CACrD,GAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAE,CACxB,cAAc,CAAC,GAAG,CAAC,CAAG,IAAI,CAC3B,CAED,GACE,CAAC,cAAc,EACf,CAAC,eAAe,EAChB,eAAe,CAAC,cAAc,CAAE,eAAe,CAAC,EAAI,CAAC,CACrD,CACA,GAAI,SAAO,KAAQ,aAAa,qBAAqB,CACrD,GAAI,eAAe,CAAE,CACnB,QAAO,CAAM,QAAO,qBAAmB,eAAe,KAAG,CAC1D,CACD,GAAI,WAAW,EAAI,WAAW,CAAC,MAAM,CAAE,CACrC,QAAO,CAAM,QAAO,yBAAyB,WAAW,IAAI,CAC7D,CAED,KAAM,IAAI,WAAU,sBAAuB,cAAc,CAAC,OAAO,CAAE,QAAO,CAAC,CAAC,CAC7E,CAED,GAAI,QAAO,KAAQ,aAAa,wBAAwB,CACxD,GAAI,WAAW,EAAI,WAAW,CAAC,MAAM,CAAE,CACrC,OAAO,CAAM,OAAO,kBAAkB,WAAW,IAAI,CACtD,CACD,GAAI,eAAe,EAAI,eAAe,CAAC,MAAM,CAAE,CAC7C,OAAO,CAAM,OAAO,sCAAoC,eAAe,KAAG,CAC3E,CACD,OAAO,CAAC,IAAI,CAAC,cAAc,CAAC,OAAO,CAAE,OAAO,CAAC,CAAC,CAChD,CAEA,QAAS,eAAc,CAAC,OAAe,CAAE,OAAe,CAAA,CACtD,MAAU,QAAO,MAAK,OAAO,CAC/B,CAOA,QAAS,gBAAe,CAAC,OAAe,CAAA,CACtC,GAAM,KAAI,CAAG,OAAO,CAAC,OAAO,CAAC,OAAO,CAAE,GAAG,CAAC,CAAC,WAAW,EAAE,CACxD,MAAO,KAAI,CACb","sourcesContent":["import compareVersions from 'compare-versions';\n\nimport { CodedError } from './errors/CodedError';\n\nconst postedWarnings: { [key: string]: boolean } = {};\n\n/**\n * Used for deprecating values and throwing an error if a given version of Expo has passed.\n */\nexport default function deprecate(\n  library: string,\n  deprecatedAPI: string,\n  options: {\n    replacement?: string;\n    currentVersion?: string;\n    versionToRemove?: string;\n  } = {}\n): void {\n  const { currentVersion, versionToRemove, replacement } = options;\n  const code = codeFromLibrary(library);\n  const key = `${code}:${deprecatedAPI}:${replacement}`;\n  if (!postedWarnings[key]) {\n    postedWarnings[key] = true;\n  }\n\n  if (\n    !currentVersion ||\n    !versionToRemove ||\n    compareVersions(currentVersion, versionToRemove) >= 0\n  ) {\n    let message = `\\`${deprecatedAPI}\\` has been removed`;\n    if (versionToRemove) {\n      message = `${message} as of version \"${versionToRemove}\"`;\n    }\n    if (replacement && replacement.length) {\n      message = `${message} please migrate to: \\`${replacement}\\``;\n    }\n\n    throw new CodedError(`ERR_DEPRECATED_API`, prependLibrary(library, message));\n  }\n\n  let message = `\\`${deprecatedAPI}\\` has been deprecated`;\n  if (replacement && replacement.length) {\n    message = `${message} in favor of \\`${replacement}\\``;\n  }\n  if (versionToRemove && versionToRemove.length) {\n    message = `${message} and will be removed in version \"${versionToRemove}\"`;\n  }\n  console.warn(prependLibrary(library, message));\n}\n\nfunction prependLibrary(library: string, message: string): string {\n  return `${library}: ${message}`;\n}\n\n/**\n * Transform format:\n * Expo.AR -> EXPO_AR\n * expo-ar -> EXPO_AR\n */\nfunction codeFromLibrary(library: string): string {\n  const code = library.replace(/[-.]/g, '_').toUpperCase();\n  return code;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}