{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"size\",\"color\",\"icon\",\"disabled\",\"onPress\",\"accessibilityLabel\",\"isLeading\"];function _extends(){_extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import*as React from'react';import color from'color';import{useInternalTheme}from\"../../core/theming\";import{black}from\"../../styles/themes/v2/colors\";import IconButton from\"../IconButton/IconButton\";var AppbarAction=React.forwardRef(function(_ref,ref){var _ref$size=_ref.size,size=_ref$size===void 0?24:_ref$size,iconColor=_ref.color,icon=_ref.icon,disabled=_ref.disabled,onPress=_ref.onPress,accessibilityLabel=_ref.accessibilityLabel,isLeading=_ref.isLeading,rest=_objectWithoutProperties(_ref,_excluded);var theme=useInternalTheme();var actionIconColor=iconColor?iconColor:theme.isV3?isLeading?theme.colors.onSurface:theme.colors.onSurfaceVariant:color(black).alpha(0.54).rgb().string();return React.createElement(IconButton,_extends({size:size,onPress:onPress,iconColor:actionIconColor,icon:icon,disabled:disabled,accessibilityLabel:accessibilityLabel,animated:true,ref:ref},rest));});AppbarAction.displayName='Appbar.Action';export default AppbarAction;export{AppbarAction};","map":{"version":3,"sources":["AppbarAction.tsx"],"names":["React","color","useInternalTheme","black","IconButton","AppbarAction","forwardRef","size","iconColor","icon","disabled","onPress","accessibilityLabel","isLeading","rest","ref","theme","actionIconColor","isV3","colors","onSurface","onSurfaceVariant","alpha","rgb","string","displayName"],"mappings":"4dAAA,MAAO,GAAKA,MAAK,KAAM,OAAO,CAG9B,MAAOC,MAAK,KAAM,OAAO,CAEzB,OAASC,gBAAgB,0BACzB,OAASC,KAAK,qCAEd,MAAOC,WAAU,gCA8DjB,GAAMC,aAAY,CAAGL,KAAK,CAACM,UAAU,CACnC,SAAA,IAAA,CAWES,GAAG,CACA,CAXH,cASQ,IAAA,CARNR,IAAI,CAAJA,IAAI,oBAAG,EAAE,WACFC,SAAS,CAOV,IAAA,CAPNP,KAAK,CACLQ,IAAI,CAME,IAAA,CANNA,IAAI,CACJC,QAAQ,CAKF,IAAA,CALNA,QAAQ,CACRC,OAAO,CAID,IAAA,CAJNA,OAAO,CACPC,kBAAkB,CAGZ,IAAA,CAHNA,kBAAkB,CAClBC,SAAS,CAEH,IAAA,CAFNA,SAAS,CACNC,IAAAA,0BACG,IAAA,YAGR,GAAME,MAAK,CAAGd,gBAAgB,EAAE,CAEhC,GAAMe,gBAAe,CAAGT,SAAS,CAC7BA,SAAS,CACTQ,KAAK,CAACE,IAAI,CACVL,SAAS,CACPG,KAAK,CAACG,MAAM,CAACC,SAAS,CACtBJ,KAAK,CAACG,MAAM,CAACE,gBAAgB,CAC/BpB,KAAK,CAACE,KAAK,CAAC,CAACmB,KAAK,CAAC,IAAI,CAAC,CAACC,GAAG,EAAE,CAACC,MAAM,EAAE,CAE3C,MACE,MAAA,CAAA,aAAA,CAAC,UAAU,CAAA,QAAA,CAAA,CACT,IAAI,CAAEjB,IAAK,CACX,OAAO,CAAEI,OAAQ,CACjB,SAAS,CAAEM,eAAgB,CAC3B,IAAI,CAAER,IAAK,CACX,QAAQ,CAAEC,QAAS,CACnB,kBAAkB,CAAEE,kBAAmB,CACvC,QAAQ,CAAA,IAAA,CACR,GAAG,CAAEG,GAAI,CAAA,CACLD,IAAI,CAAA,CACR,CAEN,CAAC,CACF,CAEDT,YAAY,CAACoB,WAAW,CAAG,eAAe,CAE1C,cAAepB,aAAY,CAG3B,OAASA,YAAY","sourcesContent":["import * as React from 'react';\nimport type { StyleProp, ViewStyle, View } from 'react-native';\n\nimport color from 'color';\n\nimport { useInternalTheme } from '../../core/theming';\nimport { black } from '../../styles/themes/v2/colors';\nimport type { IconSource } from '../Icon';\nimport IconButton from '../IconButton/IconButton';\n\nexport type Props = React.ComponentPropsWithoutRef<typeof IconButton> & {\n  /**\n   *  Custom color for action icon.\n   */\n  color?: string;\n  /**\n   * Name of the icon to show.\n   */\n  icon: IconSource;\n  /**\n   * Optional icon size.\n   */\n  size?: number;\n  /**\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * @supported Available in v5.x with theme version 3\n   *\n   * Whether it's the leading button.\n   */\n  isLeading?: boolean;\n  style?: StyleProp<ViewStyle>;\n  ref?: React.RefObject<View>;\n};\n\n/**\n * A component used to display an action item in the appbar.\n * <div class=\"screenshots\">\n *   <img class=\"small\" src=\"screenshots/appbar-action-android.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Appbar } from 'react-native-paper';\n * import { Platform } from 'react-native';\n *\n * const MORE_ICON = Platform.OS === 'ios' ? 'dots-horizontal' : 'dots-vertical';\n *\n * const MyComponent = () => (\n *     <Appbar.Header>\n *        <Appbar.Content title=\"Title\" subtitle={'Subtitle'} />\n *         <Appbar.Action icon=\"magnify\" onPress={() => {}} />\n *         <Appbar.Action icon={MORE_ICON} onPress={() => {}} />\n *     </Appbar.Header>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst AppbarAction = React.forwardRef<View, Props>(\n  (\n    {\n      size = 24,\n      color: iconColor,\n      icon,\n      disabled,\n      onPress,\n      accessibilityLabel,\n      isLeading,\n      ...rest\n    }: Props,\n    ref\n  ) => {\n    const theme = useInternalTheme();\n\n    const actionIconColor = iconColor\n      ? iconColor\n      : theme.isV3\n      ? isLeading\n        ? theme.colors.onSurface\n        : theme.colors.onSurfaceVariant\n      : color(black).alpha(0.54).rgb().string();\n\n    return (\n      <IconButton\n        size={size}\n        onPress={onPress}\n        iconColor={actionIconColor}\n        icon={icon}\n        disabled={disabled}\n        accessibilityLabel={accessibilityLabel}\n        animated\n        ref={ref}\n        {...rest}\n      />\n    );\n  }\n);\n\nAppbarAction.displayName = 'Appbar.Action';\n\nexport default AppbarAction;\n\n// @component-docs ignore-next-line\nexport { AppbarAction };\n"]},"metadata":{},"sourceType":"module"}