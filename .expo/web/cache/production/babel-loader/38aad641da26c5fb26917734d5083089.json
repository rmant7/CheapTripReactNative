{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}import{nanoid}from'nanoid/non-secure';var BaseRouter={getStateForAction:function getStateForAction(state,action){switch(action.type){case'SET_PARAMS':{var index=action.source?state.routes.findIndex(function(r){return r.key===action.source;}):state.index;if(index===-1){return null;}return _objectSpread(_objectSpread({},state),{},{routes:state.routes.map(function(r,i){return i===index?_objectSpread(_objectSpread({},r),{},{params:_objectSpread(_objectSpread({},r.params),action.payload.params)}):r;})});}case'RESET':{var nextState=action.payload;if(nextState.routes.length===0||nextState.routes.some(function(route){return!state.routeNames.includes(route.name);})){return null;}if(nextState.stale===false){if(state.routeNames.length!==nextState.routeNames.length||nextState.routeNames.some(function(name){return!state.routeNames.includes(name);})){return null;}return _objectSpread(_objectSpread({},nextState),{},{routes:nextState.routes.map(function(route){return route.key?route:_objectSpread(_objectSpread({},route),{},{key:route.name+\"-\"+nanoid()});})});}return nextState;}default:return null;}},shouldActionChangeFocus:function shouldActionChangeFocus(action){return action.type==='NAVIGATE';}};export default BaseRouter;","map":{"version":3,"sources":["BaseRouter.tsx"],"names":["nanoid","BaseRouter","getStateForAction","state","action","type","index","source","routes","findIndex","r","key","map","i","params","payload","nextState","length","some","route","routeNames","includes","name","stale","shouldActionChangeFocus"],"mappings":"w0BAAA,OAASA,MAAM,KAAQ,mBAAmB,CAY1C,GAAMC,WAAU,CAAG,CACjBC,iBAAiB,4BACfC,KAAY,CACZC,MAA8B,CACM,CACpC,OAAQA,MAAM,CAACC,IAAI,EACjB,IAAK,YAAY,CAAE,CACjB,GAAMC,MAAK,CAAGF,MAAM,CAACG,MAAM,CACvBJ,KAAK,CAACK,MAAM,CAACC,SAAS,CAAEC,SAAAA,CAAC,QAAKA,EAAC,CAACC,GAAG,GAAKP,MAAM,CAACG,MAAM,GAAC,CACtDJ,KAAK,CAACG,KAAK,CAEf,GAAIA,KAAK,GAAK,CAAC,CAAC,CAAE,CAChB,MAAO,KAAI,CACb,CAEA,sCACKH,KAAK,MACRK,MAAM,CAAEL,KAAK,CAACK,MAAM,CAACI,GAAG,CAAC,SAACF,CAAC,CAAEG,CAAC,QAC5BA,EAAC,GAAKP,KAAK,gCACFI,CAAC,MAAEI,MAAM,gCAAOJ,CAAC,CAACI,MAAM,EAAKV,MAAM,CAACW,OAAO,CAACD,MAAAA,CAAO,GACxDJ,CAAC,GAAA,GAGX,CAEA,IAAK,OAAO,CAAE,CACZ,GAAMM,UAAS,CAAGZ,MAAM,CAACW,OAAsC,CAE/D,GACEC,SAAS,CAACR,MAAM,CAACS,MAAM,GAAK,CAAC,EAC7BD,SAAS,CAACR,MAAM,CAACU,IAAI,CAClBC,SAAAA,KAAuB,QAAK,CAAChB,KAAK,CAACiB,UAAU,CAACC,QAAQ,CAACF,KAAK,CAACG,IAAI,CAAC,GACpE,CACD,CACA,MAAO,KAAI,CACb,CAEA,GAAIN,SAAS,CAACO,KAAK,GAAK,KAAK,CAAE,CAC7B,GACEpB,KAAK,CAACiB,UAAU,CAACH,MAAM,GAAKD,SAAS,CAACI,UAAU,CAACH,MAAM,EACvDD,SAAS,CAACI,UAAU,CAACF,IAAI,CACtBI,SAAAA,IAAI,QAAK,CAACnB,KAAK,CAACiB,UAAU,CAACC,QAAQ,CAACC,IAAI,CAAC,GAC3C,CACD,CACA,MAAO,KAAI,CACb,CAEA,sCACKN,SAAS,MACZR,MAAM,CAAEQ,SAAS,CAACR,MAAM,CAACI,GAAG,CAAEO,SAAAA,KAAK,QACjCA,MAAK,CAACR,GAAG,CAAGQ,KAAK,gCAAQA,KAAK,MAAER,GAAG,CAAKQ,KAAK,CAACG,IAAK,KAAGtB,MAAM,EAAG,EAAG,GAAA,GAGxE,CAEA,MAAOgB,UAAS,CAClB,CAEA,QACE,MAAO,KAAI,CAAA,CAEjB,CAAC,CAEDQ,uBAAuB,kCAACpB,MAA8B,CAAE,CACtD,MAAOA,OAAM,CAACC,IAAI,GAAK,UAAU,CACnC,CACF,CAAC,CAED,cAAeJ,WAAU","sourceRoot":"../../src","sourcesContent":["import { nanoid } from 'nanoid/non-secure';\n/**\n * Base router object that can be used when writing custom routers.\n * This provides few helper methods to handle common actions such as `RESET`.\n */\nconst BaseRouter = {\n  getStateForAction(state, action) {\n    switch (action.type) {\n      case 'SET_PARAMS':\n        {\n          const index = action.source ? state.routes.findIndex(r => r.key === action.source) : state.index;\n          if (index === -1) {\n            return null;\n          }\n          return {\n            ...state,\n            routes: state.routes.map((r, i) => i === index ? {\n              ...r,\n              params: {\n                ...r.params,\n                ...action.payload.params\n              }\n            } : r)\n          };\n        }\n      case 'RESET':\n        {\n          const nextState = action.payload;\n          if (nextState.routes.length === 0 || nextState.routes.some(route => !state.routeNames.includes(route.name))) {\n            return null;\n          }\n          if (nextState.stale === false) {\n            if (state.routeNames.length !== nextState.routeNames.length || nextState.routeNames.some(name => !state.routeNames.includes(name))) {\n              return null;\n            }\n            return {\n              ...nextState,\n              routes: nextState.routes.map(route => route.key ? route : {\n                ...route,\n                key: `${route.name}-${nanoid()}`\n              })\n            };\n          }\n          return nextState;\n        }\n      default:\n        return null;\n    }\n  },\n  shouldActionChangeFocus(action) {\n    return action.type === 'NAVIGATE';\n  }\n};\nexport default BaseRouter;\n//# sourceMappingURL=BaseRouter.js.map"]},"metadata":{},"sourceType":"module"}