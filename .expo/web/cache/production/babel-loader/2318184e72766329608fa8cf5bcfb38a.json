{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"status\",\"theme\",\"disabled\",\"onPress\",\"testID\"];function _extends(){_extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import*as React from'react';import Animated from\"react-native-web/dist/exports/Animated\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import View from\"react-native-web/dist/exports/View\";import{withInternalTheme}from\"../../core/theming\";import MaterialCommunityIcon from\"../MaterialCommunityIcon\";import TouchableRipple from\"../TouchableRipple/TouchableRipple\";import{getAndroidSelectionControlColor}from\"./utils\";var ANIMATION_DURATION=100;var CheckboxAndroid=function CheckboxAndroid(_ref){var status=_ref.status,theme=_ref.theme,disabled=_ref.disabled,onPress=_ref.onPress,testID=_ref.testID,rest=_objectWithoutProperties(_ref,_excluded);var _React$useRef=React.useRef(new Animated.Value(1)),scaleAnim=_React$useRef.current;var isFirstRendering=React.useRef(true);var scale=theme.animation.scale;React.useEffect(function(){if(isFirstRendering.current){isFirstRendering.current=false;return;}var checked=status==='checked';Animated.sequence([Animated.timing(scaleAnim,{toValue:0.85,duration:checked?ANIMATION_DURATION*scale:0,useNativeDriver:false}),Animated.timing(scaleAnim,{toValue:1,duration:checked?ANIMATION_DURATION*scale:ANIMATION_DURATION*scale*1.75,useNativeDriver:false})]).start();},[status,scaleAnim,scale]);var checked=status==='checked';var indeterminate=status==='indeterminate';var _getAndroidSelectionC=getAndroidSelectionControlColor({theme:theme,disabled:disabled,checked:checked,customColor:rest.color,customUncheckedColor:rest.uncheckedColor}),rippleColor=_getAndroidSelectionC.rippleColor,selectionControlColor=_getAndroidSelectionC.selectionControlColor;var borderWidth=scaleAnim.interpolate({inputRange:[0.8,1],outputRange:[7,0]});var icon=indeterminate?'minus-box':checked?'checkbox-marked':'checkbox-blank-outline';return React.createElement(TouchableRipple,_extends({},rest,{borderless:true,rippleColor:rippleColor,onPress:onPress,disabled:disabled,accessibilityRole:\"checkbox\",accessibilityState:{disabled:disabled,checked:checked},accessibilityLiveRegion:\"polite\",style:styles.container,testID:testID}),React.createElement(Animated.View,{style:{transform:[{scale:scaleAnim}]}},React.createElement(MaterialCommunityIcon,{allowFontScaling:false,name:icon,size:24,color:selectionControlColor,direction:\"ltr\"}),React.createElement(View,{style:[StyleSheet.absoluteFill,styles.fillContainer]},React.createElement(Animated.View,{style:[styles.fill,{borderColor:selectionControlColor},{borderWidth:borderWidth}]}))));};CheckboxAndroid.displayName='Checkbox.Android';var styles=StyleSheet.create({container:{borderRadius:18,width:36,height:36,padding:6},fillContainer:{alignItems:'center',justifyContent:'center'},fill:{height:14,width:14}});export default withInternalTheme(CheckboxAndroid);var CheckboxAndroidWithTheme=withInternalTheme(CheckboxAndroid);export{CheckboxAndroidWithTheme as CheckboxAndroid};","map":{"version":3,"mappings":"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","names":["React","withInternalTheme","MaterialCommunityIcon","TouchableRipple","getAndroidSelectionControlColor","ANIMATION_DURATION","CheckboxAndroid","_ref","status","theme","disabled","onPress","testID","rest","useRef","Animated","Value","scaleAnim","current","isFirstRendering","scale","animation","useEffect","checked","sequence","timing","toValue","duration","useNativeDriver","start","indeterminate","customColor","color","customUncheckedColor","uncheckedColor","rippleColor","selectionControlColor","borderWidth","interpolate","inputRange","outputRange","icon","borderless","accessibilityRole","accessibilityState","accessibilityLiveRegion","style","styles","container","View","transform","allowFontScaling","name","size","direction","StyleSheet","absoluteFill","fillContainer","fill","borderColor","displayName","create","borderRadius","width","height","padding","alignItems","justifyContent","CheckboxAndroidWithTheme"],"sources":["CheckboxAndroid.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  GestureResponderEvent,\n  StyleSheet,\n  View,\n} from 'react-native';\n\nimport { withInternalTheme } from '../../core/theming';\nimport type { $RemoveChildren, InternalTheme } from '../../types';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { getAndroidSelectionControlColor } from './utils';\n\nexport type Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Custom color for unchecked checkbox.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: InternalTheme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n// From https://material.io/design/motion/speed.html#duration\nconst ANIMATION_DURATION = 100;\n\n/**\n * Checkboxes allow the selection of multiple options from a set.\n * This component follows platform guidelines for Android, but can be used\n * on any platform.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/checkbox-enabled.android.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/checkbox-disabled.android.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nconst CheckboxAndroid = ({\n  status,\n  theme,\n  disabled,\n  onPress,\n  testID,\n  ...rest\n}: Props) => {\n  const { current: scaleAnim } = React.useRef<Animated.Value>(\n    new Animated.Value(1)\n  );\n  const isFirstRendering = React.useRef<boolean>(true);\n\n  const {\n    animation: { scale },\n  } = theme;\n\n  React.useEffect(() => {\n    // Do not run animation on very first rendering\n    if (isFirstRendering.current) {\n      isFirstRendering.current = false;\n      return;\n    }\n\n    const checked = status === 'checked';\n\n    Animated.sequence([\n      Animated.timing(scaleAnim, {\n        toValue: 0.85,\n        duration: checked ? ANIMATION_DURATION * scale : 0,\n        useNativeDriver: false,\n      }),\n      Animated.timing(scaleAnim, {\n        toValue: 1,\n        duration: checked\n          ? ANIMATION_DURATION * scale\n          : ANIMATION_DURATION * scale * 1.75,\n        useNativeDriver: false,\n      }),\n    ]).start();\n  }, [status, scaleAnim, scale]);\n\n  const checked = status === 'checked';\n  const indeterminate = status === 'indeterminate';\n\n  const { rippleColor, selectionControlColor } =\n    getAndroidSelectionControlColor({\n      theme,\n      disabled,\n      checked,\n      customColor: rest.color,\n      customUncheckedColor: rest.uncheckedColor,\n    });\n\n  const borderWidth = scaleAnim.interpolate({\n    inputRange: [0.8, 1],\n    outputRange: [7, 0],\n  });\n\n  const icon = indeterminate\n    ? 'minus-box'\n    : checked\n    ? 'checkbox-marked'\n    : 'checkbox-blank-outline';\n\n  return (\n    <TouchableRipple\n      {...rest}\n      borderless\n      rippleColor={rippleColor}\n      onPress={onPress}\n      disabled={disabled}\n      accessibilityRole=\"checkbox\"\n      accessibilityState={{ disabled, checked }}\n      accessibilityLiveRegion=\"polite\"\n      style={styles.container}\n      testID={testID}\n    >\n      <Animated.View style={{ transform: [{ scale: scaleAnim }] }}>\n        <MaterialCommunityIcon\n          allowFontScaling={false}\n          name={icon}\n          size={24}\n          color={selectionControlColor}\n          direction=\"ltr\"\n        />\n        <View style={[StyleSheet.absoluteFill, styles.fillContainer]}>\n          <Animated.View\n            style={[\n              styles.fill,\n              { borderColor: selectionControlColor },\n              { borderWidth },\n            ]}\n          />\n        </View>\n      </Animated.View>\n    </TouchableRipple>\n  );\n};\n\nCheckboxAndroid.displayName = 'Checkbox.Android';\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    width: 36,\n    height: 36,\n    padding: 6,\n  },\n  fillContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  fill: {\n    height: 14,\n    width: 14,\n  },\n});\n\nexport default withInternalTheme(CheckboxAndroid);\n\n// @component-docs ignore-next-line\nconst CheckboxAndroidWithTheme = withInternalTheme(CheckboxAndroid);\n// @component-docs ignore-next-line\nexport { CheckboxAndroidWithTheme as CheckboxAndroid };\n"]},"metadata":{},"sourceType":"module"}