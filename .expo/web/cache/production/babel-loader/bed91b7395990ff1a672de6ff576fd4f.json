{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}import{State}from\"../../State\";import{PointerType}from\"../interfaces\";import PointerTracker from\"./PointerTracker\";import{isPointerInBounds}from\"../utils\";var GestureHandlerOrchestrator=function(){function GestureHandlerOrchestrator(){_classCallCheck(this,GestureHandlerOrchestrator);_defineProperty(this,\"gestureHandlers\",[]);_defineProperty(this,\"awaitingHandlers\",[]);_defineProperty(this,\"handlersToCancel\",[]);_defineProperty(this,\"handlingChangeSemaphore\",0);_defineProperty(this,\"activationIndex\",0);}_createClass(GestureHandlerOrchestrator,[{key:\"scheduleFinishedHandlersCleanup\",value:function scheduleFinishedHandlersCleanup(){if(this.handlingChangeSemaphore===0){this.cleanupFinishedHandlers();}}},{key:\"cleanHandler\",value:function cleanHandler(handler){handler.reset();handler.setActive(false);handler.setAwaiting(false);handler.setActivationIndex(Number.MAX_VALUE);}},{key:\"removeHandlerFromOrchestrator\",value:function removeHandlerFromOrchestrator(handler){this.gestureHandlers.splice(this.gestureHandlers.indexOf(handler),1);this.awaitingHandlers.splice(this.awaitingHandlers.indexOf(handler),1);this.handlersToCancel.splice(this.handlersToCancel.indexOf(handler),1);}},{key:\"cleanupFinishedHandlers\",value:function cleanupFinishedHandlers(){for(var i=this.gestureHandlers.length-1;i>=0;--i){var handler=this.gestureHandlers[i];if(!handler){continue;}if(this.isFinished(handler.getState())&&!handler.isAwaiting()){this.gestureHandlers.splice(i,1);this.cleanHandler(handler);}}}},{key:\"hasOtherHandlerToWaitFor\",value:function hasOtherHandlerToWaitFor(handler){var _this=this;var hasToWait=false;this.gestureHandlers.forEach(function(otherHandler){if(otherHandler&&!_this.isFinished(otherHandler.getState())&&_this.shouldHandlerWaitForOther(handler,otherHandler)){hasToWait=true;return;}});return hasToWait;}},{key:\"tryActivate\",value:function tryActivate(handler){if(this.hasOtherHandlerToWaitFor(handler)){this.addAwaitingHandler(handler);}else if(handler.getState()!==State.CANCELLED&&handler.getState()!==State.FAILED){if(this.shouldActivate(handler)){this.makeActive(handler);}else{switch(handler.getState()){case State.ACTIVE:handler.fail();break;case State.BEGAN:handler.cancel();}}}}},{key:\"shouldActivate\",value:function shouldActivate(handler){for(var otherHandler of this.gestureHandlers){if(this.shouldHandlerBeCancelledBy(handler,otherHandler)){return false;}}return true;}},{key:\"cleanupAwaitingHandlers\",value:function cleanupAwaitingHandlers(handler){for(var i=0;i<this.awaitingHandlers.length;++i){if(!this.awaitingHandlers[i].isAwaiting()&&this.shouldHandlerWaitForOther(this.awaitingHandlers[i],handler)){this.cleanHandler(this.awaitingHandlers[i]);this.awaitingHandlers.splice(i,1);}}}},{key:\"onHandlerStateChange\",value:function onHandlerStateChange(handler,newState,oldState,sendIfDisabled){var _this2=this;if(!handler.isEnabled()&&!sendIfDisabled){return;}this.handlingChangeSemaphore+=1;if(this.isFinished(newState)){this.awaitingHandlers.forEach(function(otherHandler){if(_this2.shouldHandlerWaitForOther(otherHandler,handler)){if(newState===State.END){otherHandler===null||otherHandler===void 0?void 0:otherHandler.cancel();if(otherHandler.getState()===State.END){otherHandler.sendEvent(State.CANCELLED,State.BEGAN);}otherHandler===null||otherHandler===void 0?void 0:otherHandler.setAwaiting(false);}else{_this2.tryActivate(otherHandler);}}});}if(newState===State.ACTIVE){this.tryActivate(handler);}else if(oldState===State.ACTIVE||oldState===State.END){if(handler.isActive()){handler.sendEvent(newState,oldState);}else if(oldState===State.ACTIVE&&(newState===State.CANCELLED||newState===State.FAILED)){handler.sendEvent(newState,State.BEGAN);}}else if(oldState!==State.UNDETERMINED||newState!==State.CANCELLED){handler.sendEvent(newState,oldState);}this.handlingChangeSemaphore-=1;this.scheduleFinishedHandlersCleanup();if(this.awaitingHandlers.indexOf(handler)<0){this.cleanupAwaitingHandlers(handler);}}},{key:\"makeActive\",value:function makeActive(handler){var _this3=this;var currentState=handler.getState();handler.setActive(true);handler.setShouldResetProgress(true);handler.setActivationIndex(this.activationIndex++);this.gestureHandlers.forEach(function(otherHandler){if(_this3.shouldHandlerBeCancelledBy(otherHandler,handler)){_this3.handlersToCancel.push(otherHandler);}});for(var i=this.handlersToCancel.length-1;i>=0;--i){var _this$handlersToCance;(_this$handlersToCance=this.handlersToCancel[i])===null||_this$handlersToCance===void 0?void 0:_this$handlersToCance.cancel();}this.awaitingHandlers.forEach(function(otherHandler){if(_this3.shouldHandlerBeCancelledBy(otherHandler,handler)){otherHandler===null||otherHandler===void 0?void 0:otherHandler.cancel();otherHandler===null||otherHandler===void 0?void 0:otherHandler.setAwaiting(true);}});handler.sendEvent(State.ACTIVE,State.BEGAN);if(currentState!==State.ACTIVE){handler.sendEvent(State.END,State.ACTIVE);if(currentState!==State.END){handler.sendEvent(State.UNDETERMINED,State.END);}}if(handler.isAwaiting()){handler.setAwaiting(false);for(var _i=0;_i<this.awaitingHandlers.length;++_i){if(this.awaitingHandlers[_i]===handler){this.awaitingHandlers.splice(_i,1);}}}this.handlersToCancel=[];}},{key:\"addAwaitingHandler\",value:function addAwaitingHandler(handler){var alreadyExists=false;this.awaitingHandlers.forEach(function(otherHandler){if(otherHandler===handler){alreadyExists=true;return;}});if(alreadyExists){return;}this.awaitingHandlers.push(handler);handler.setAwaiting(true);handler.setActivationIndex(this.activationIndex++);}},{key:\"recordHandlerIfNotPresent\",value:function recordHandlerIfNotPresent(handler){var alreadyExists=false;this.gestureHandlers.forEach(function(otherHandler){if(otherHandler===handler){alreadyExists=true;return;}});if(alreadyExists){return;}this.gestureHandlers.push(handler);handler.setActive(false);handler.setAwaiting(false);handler.setActivationIndex(Number.MAX_SAFE_INTEGER);}},{key:\"shouldHandlerWaitForOther\",value:function shouldHandlerWaitForOther(handler,otherHandler){return handler!==otherHandler&&(handler.shouldWaitForHandlerFailure(otherHandler)||otherHandler.shouldRequireToWaitForFailure(handler));}},{key:\"canRunSimultaneously\",value:function canRunSimultaneously(gh1,gh2){return gh1===gh2||gh1.shouldRecognizeSimultaneously(gh2)||gh2.shouldRecognizeSimultaneously(gh1);}},{key:\"shouldHandlerBeCancelledBy\",value:function shouldHandlerBeCancelledBy(handler,otherHandler){if(this.canRunSimultaneously(handler,otherHandler)){return false;}if(handler!==otherHandler&&(handler.isAwaiting()||handler.getState()===State.ACTIVE)){return handler.shouldBeCancelledByOther(otherHandler);}var handlerPointers=handler.getTrackedPointersID();var otherPointers=otherHandler.getTrackedPointersID();if(!PointerTracker.shareCommonPointers(handlerPointers,otherPointers)&&handler.getView()!==otherHandler.getView()){return this.checkOverlap(handler,otherHandler);}return true;}},{key:\"checkOverlap\",value:function checkOverlap(handler,otherHandler){var handlerPointers=handler.getTrackedPointersID();var otherPointers=otherHandler.getTrackedPointersID();var overlap=false;handlerPointers.forEach(function(pointer){var handlerX=handler.getTracker().getLastX(pointer);var handlerY=handler.getTracker().getLastY(pointer);if(isPointerInBounds(handler.getView(),{x:handlerX,y:handlerY})&&isPointerInBounds(otherHandler.getView(),{x:handlerX,y:handlerY})){overlap=true;}});otherPointers.forEach(function(pointer){var otherX=otherHandler.getTracker().getLastX(pointer);var otherY=otherHandler.getTracker().getLastY(pointer);if(isPointerInBounds(handler.getView(),{x:otherX,y:otherY})&&isPointerInBounds(otherHandler.getView(),{x:otherX,y:otherY})){overlap=true;}});return overlap;}},{key:\"isFinished\",value:function isFinished(state){return state===State.END||state===State.FAILED||state===State.CANCELLED;}},{key:\"cancelMouseAndPenGestures\",value:function cancelMouseAndPenGestures(currentHandler){this.gestureHandlers.forEach(function(handler){if(handler.getPointerType()!==PointerType.MOUSE&&handler.getPointerType()!==PointerType.PEN){return;}if(handler!==currentHandler){handler.cancel();}else{handler.getTracker().resetTracker();}});}}],[{key:\"getInstance\",value:function getInstance(){if(!GestureHandlerOrchestrator.instance){GestureHandlerOrchestrator.instance=new GestureHandlerOrchestrator();}return GestureHandlerOrchestrator.instance;}}]);return GestureHandlerOrchestrator;}();export{GestureHandlerOrchestrator as default};_defineProperty(GestureHandlerOrchestrator,\"instance\",void 0);","map":{"version":3,"sources":["GestureHandlerOrchestrator.ts"],"names":["State","PointerType","PointerTracker","isPointerInBounds","GestureHandlerOrchestrator","constructor","scheduleFinishedHandlersCleanup","handlingChangeSemaphore","cleanupFinishedHandlers","cleanHandler","handler","reset","setActive","setAwaiting","setActivationIndex","Number","MAX_VALUE","removeHandlerFromOrchestrator","gestureHandlers","splice","indexOf","awaitingHandlers","handlersToCancel","i","length","isFinished","getState","isAwaiting","hasOtherHandlerToWaitFor","hasToWait","forEach","otherHandler","shouldHandlerWaitForOther","tryActivate","addAwaitingHandler","CANCELLED","FAILED","shouldActivate","makeActive","ACTIVE","fail","BEGAN","cancel","shouldHandlerBeCancelledBy","cleanupAwaitingHandlers","onHandlerStateChange","newState","oldState","sendIfDisabled","isEnabled","END","sendEvent","isActive","UNDETERMINED","currentState","setShouldResetProgress","activationIndex","push","alreadyExists","recordHandlerIfNotPresent","MAX_SAFE_INTEGER","shouldWaitForHandlerFailure","shouldRequireToWaitForFailure","canRunSimultaneously","gh1","gh2","shouldRecognizeSimultaneously","shouldBeCancelledByOther","handlerPointers","getTrackedPointersID","otherPointers","shareCommonPointers","getView","checkOverlap","overlap","pointer","handlerX","getTracker","getLastX","handlerY","getLastY","x","y","otherX","otherY","state","cancelMouseAndPenGestures","currentHandler","getPointerType","MOUSE","PEN","resetTracker","getInstance","instance"],"mappings":"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","sourcesContent":["import { State } from '../../State';\nimport { PointerType } from '../interfaces';\n\nimport GestureHandler from '../handlers/GestureHandler';\nimport PointerTracker from './PointerTracker';\nimport { isPointerInBounds } from '../utils';\n\nexport default class GestureHandlerOrchestrator {\n  private static instance: GestureHandlerOrchestrator;\n\n  private gestureHandlers: GestureHandler[] = [];\n  private awaitingHandlers: GestureHandler[] = [];\n  private handlersToCancel: GestureHandler[] = [];\n\n  private handlingChangeSemaphore = 0;\n  private activationIndex = 0;\n\n  // Private beacuse of Singleton\n  // eslint-disable-next-line no-useless-constructor, @typescript-eslint/no-empty-function\n  private constructor() {}\n\n  private scheduleFinishedHandlersCleanup(): void {\n    if (this.handlingChangeSemaphore === 0) {\n      this.cleanupFinishedHandlers();\n    }\n  }\n\n  private cleanHandler(handler: GestureHandler): void {\n    handler.reset();\n    handler.setActive(false);\n    handler.setAwaiting(false);\n    handler.setActivationIndex(Number.MAX_VALUE);\n  }\n\n  public removeHandlerFromOrchestrator(handler: GestureHandler): void {\n    this.gestureHandlers.splice(this.gestureHandlers.indexOf(handler), 1);\n    this.awaitingHandlers.splice(this.awaitingHandlers.indexOf(handler), 1);\n    this.handlersToCancel.splice(this.handlersToCancel.indexOf(handler), 1);\n  }\n\n  private cleanupFinishedHandlers(): void {\n    for (let i = this.gestureHandlers.length - 1; i >= 0; --i) {\n      const handler = this.gestureHandlers[i];\n\n      if (!handler) {\n        continue;\n      }\n      if (this.isFinished(handler.getState()) && !handler.isAwaiting()) {\n        this.gestureHandlers.splice(i, 1);\n\n        this.cleanHandler(handler);\n      }\n    }\n  }\n\n  private hasOtherHandlerToWaitFor(handler: GestureHandler): boolean {\n    let hasToWait = false;\n    this.gestureHandlers.forEach((otherHandler) => {\n      if (\n        otherHandler &&\n        !this.isFinished(otherHandler.getState()) &&\n        this.shouldHandlerWaitForOther(handler, otherHandler)\n      ) {\n        hasToWait = true;\n        return;\n      }\n    });\n\n    return hasToWait;\n  }\n\n  private tryActivate(handler: GestureHandler): void {\n    if (this.hasOtherHandlerToWaitFor(handler)) {\n      this.addAwaitingHandler(handler);\n    } else if (\n      handler.getState() !== State.CANCELLED &&\n      handler.getState() !== State.FAILED\n    ) {\n      if (this.shouldActivate(handler)) {\n        this.makeActive(handler);\n      } else {\n        switch (handler.getState()) {\n          case State.ACTIVE:\n            handler.fail();\n            break;\n          case State.BEGAN:\n            handler.cancel();\n        }\n      }\n    }\n  }\n\n  private shouldActivate(handler: GestureHandler): boolean {\n    for (const otherHandler of this.gestureHandlers) {\n      if (this.shouldHandlerBeCancelledBy(handler, otherHandler)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  private cleanupAwaitingHandlers(handler: GestureHandler): void {\n    for (let i = 0; i < this.awaitingHandlers.length; ++i) {\n      if (\n        !this.awaitingHandlers[i].isAwaiting() &&\n        this.shouldHandlerWaitForOther(this.awaitingHandlers[i], handler)\n      ) {\n        this.cleanHandler(this.awaitingHandlers[i]);\n        this.awaitingHandlers.splice(i, 1);\n      }\n    }\n  }\n\n  public onHandlerStateChange(\n    handler: GestureHandler,\n    newState: State,\n    oldState: State,\n    sendIfDisabled?: boolean\n  ): void {\n    if (!handler.isEnabled() && !sendIfDisabled) {\n      return;\n    }\n\n    this.handlingChangeSemaphore += 1;\n\n    if (this.isFinished(newState)) {\n      this.awaitingHandlers.forEach((otherHandler) => {\n        if (this.shouldHandlerWaitForOther(otherHandler, handler)) {\n          if (newState === State.END) {\n            otherHandler?.cancel();\n            if (otherHandler.getState() === State.END) {\n              // Handle edge case, where discrete gestures end immediately after activation thus\n              // their state is set to END and when the gesture they are waiting for activates they\n              // should be cancelled, however `cancel` was never sent as gestures were already in the END state.\n              // Send synthetic BEGAN -> CANCELLED to properly handle JS logic\n              otherHandler.sendEvent(State.CANCELLED, State.BEGAN);\n            }\n            otherHandler?.setAwaiting(false);\n          } else {\n            this.tryActivate(otherHandler);\n          }\n        }\n      });\n    }\n\n    if (newState === State.ACTIVE) {\n      this.tryActivate(handler);\n    } else if (oldState === State.ACTIVE || oldState === State.END) {\n      if (handler.isActive()) {\n        handler.sendEvent(newState, oldState);\n      } else if (\n        oldState === State.ACTIVE &&\n        (newState === State.CANCELLED || newState === State.FAILED)\n      ) {\n        handler.sendEvent(newState, State.BEGAN);\n      }\n    } else if (\n      oldState !== State.UNDETERMINED ||\n      newState !== State.CANCELLED\n    ) {\n      handler.sendEvent(newState, oldState);\n    }\n\n    this.handlingChangeSemaphore -= 1;\n\n    this.scheduleFinishedHandlersCleanup();\n\n    if (this.awaitingHandlers.indexOf(handler) < 0) {\n      this.cleanupAwaitingHandlers(handler);\n    }\n  }\n\n  private makeActive(handler: GestureHandler): void {\n    const currentState = handler.getState();\n\n    handler.setActive(true);\n    handler.setShouldResetProgress(true);\n    handler.setActivationIndex(this.activationIndex++);\n\n    this.gestureHandlers.forEach((otherHandler) => {\n      // Order of arguments is correct - we check whether current handler should cancel existing handlers\n\n      if (this.shouldHandlerBeCancelledBy(otherHandler, handler)) {\n        this.handlersToCancel.push(otherHandler);\n      }\n    });\n\n    for (let i = this.handlersToCancel.length - 1; i >= 0; --i) {\n      this.handlersToCancel[i]?.cancel();\n    }\n    this.awaitingHandlers.forEach((otherHandler) => {\n      if (this.shouldHandlerBeCancelledBy(otherHandler, handler)) {\n        otherHandler?.cancel();\n        otherHandler?.setAwaiting(true);\n      }\n    });\n\n    handler.sendEvent(State.ACTIVE, State.BEGAN);\n\n    if (currentState !== State.ACTIVE) {\n      handler.sendEvent(State.END, State.ACTIVE);\n      if (currentState !== State.END) {\n        handler.sendEvent(State.UNDETERMINED, State.END);\n      }\n    }\n\n    if (handler.isAwaiting()) {\n      handler.setAwaiting(false);\n      for (let i = 0; i < this.awaitingHandlers.length; ++i) {\n        if (this.awaitingHandlers[i] === handler) {\n          this.awaitingHandlers.splice(i, 1);\n        }\n      }\n    }\n\n    this.handlersToCancel = [];\n  }\n\n  private addAwaitingHandler(handler: GestureHandler): void {\n    let alreadyExists = false;\n\n    this.awaitingHandlers.forEach((otherHandler) => {\n      if (otherHandler === handler) {\n        alreadyExists = true;\n        return;\n      }\n    });\n\n    if (alreadyExists) {\n      return;\n    }\n\n    this.awaitingHandlers.push(handler);\n\n    handler.setAwaiting(true);\n    handler.setActivationIndex(this.activationIndex++);\n  }\n\n  public recordHandlerIfNotPresent(handler: GestureHandler): void {\n    let alreadyExists = false;\n\n    this.gestureHandlers.forEach((otherHandler) => {\n      if (otherHandler === handler) {\n        alreadyExists = true;\n        return;\n      }\n    });\n\n    if (alreadyExists) {\n      return;\n    }\n\n    this.gestureHandlers.push(handler);\n\n    handler.setActive(false);\n    handler.setAwaiting(false);\n    handler.setActivationIndex(Number.MAX_SAFE_INTEGER);\n  }\n\n  private shouldHandlerWaitForOther(\n    handler: GestureHandler,\n    otherHandler: GestureHandler\n  ): boolean {\n    return (\n      handler !== otherHandler &&\n      (handler.shouldWaitForHandlerFailure(otherHandler) ||\n        otherHandler.shouldRequireToWaitForFailure(handler))\n    );\n  }\n\n  private canRunSimultaneously(\n    gh1: GestureHandler,\n    gh2: GestureHandler\n  ): boolean {\n    return (\n      gh1 === gh2 ||\n      gh1.shouldRecognizeSimultaneously(gh2) ||\n      gh2.shouldRecognizeSimultaneously(gh1)\n    );\n  }\n\n  private shouldHandlerBeCancelledBy(\n    handler: GestureHandler,\n    otherHandler: GestureHandler\n  ): boolean {\n    if (this.canRunSimultaneously(handler, otherHandler)) {\n      return false;\n    }\n\n    if (\n      handler !== otherHandler &&\n      (handler.isAwaiting() || handler.getState() === State.ACTIVE)\n    ) {\n      // For now it always returns false\n      return handler.shouldBeCancelledByOther(otherHandler);\n    }\n\n    const handlerPointers: number[] = handler.getTrackedPointersID();\n    const otherPointers: number[] = otherHandler.getTrackedPointersID();\n\n    if (\n      !PointerTracker.shareCommonPointers(handlerPointers, otherPointers) &&\n      handler.getView() !== otherHandler.getView()\n    ) {\n      return this.checkOverlap(handler, otherHandler);\n    }\n\n    return true;\n  }\n\n  private checkOverlap(\n    handler: GestureHandler,\n    otherHandler: GestureHandler\n  ): boolean {\n    // If handlers don't have common pointers, default return value is false.\n    // However, if at least on pointer overlaps with both handlers, we return true\n    // This solves issue in overlapping parents example\n\n    // TODO: Find better way to handle that issue, for example by activation order and handler cancelling\n\n    const handlerPointers: number[] = handler.getTrackedPointersID();\n    const otherPointers: number[] = otherHandler.getTrackedPointersID();\n\n    let overlap = false;\n\n    handlerPointers.forEach((pointer: number) => {\n      const handlerX: number = handler.getTracker().getLastX(pointer);\n      const handlerY: number = handler.getTracker().getLastY(pointer);\n\n      if (\n        isPointerInBounds(handler.getView(), { x: handlerX, y: handlerY }) &&\n        isPointerInBounds(otherHandler.getView(), { x: handlerX, y: handlerY })\n      ) {\n        overlap = true;\n      }\n    });\n\n    otherPointers.forEach((pointer: number) => {\n      const otherX: number = otherHandler.getTracker().getLastX(pointer);\n      const otherY: number = otherHandler.getTracker().getLastY(pointer);\n\n      if (\n        isPointerInBounds(handler.getView(), { x: otherX, y: otherY }) &&\n        isPointerInBounds(otherHandler.getView(), { x: otherX, y: otherY })\n      ) {\n        overlap = true;\n      }\n    });\n\n    return overlap;\n  }\n\n  private isFinished(state: State): boolean {\n    return (\n      state === State.END || state === State.FAILED || state === State.CANCELLED\n    );\n  }\n\n  // This function is called when handler receives touchdown event\n  // If handler is using mouse or pen as a pointer and any handler receives touch event,\n  // mouse/pen event dissappears - it doesn't send onPointerCancel nor onPointerUp (and others)\n  // This became a problem because handler was left at active state without any signal to end or fail\n  // To handle this, when new touch event is received, we loop through active handlers and check which type of\n  // pointer they're using. If there are any handler with mouse/pen as a pointer, we cancel them\n  public cancelMouseAndPenGestures(currentHandler: GestureHandler): void {\n    this.gestureHandlers.forEach((handler: GestureHandler) => {\n      if (\n        handler.getPointerType() !== PointerType.MOUSE &&\n        handler.getPointerType() !== PointerType.PEN\n      ) {\n        return;\n      }\n\n      if (handler !== currentHandler) {\n        handler.cancel();\n      } else {\n        // Handler that received touch event should have its pointer tracker reset\n        // This allows handler to smoothly change from mouse/pen to touch\n        // The drawback is, that when we try to use mouse/pen one more time, it doesn't send onPointerDown at the first time\n        // so it is required to click two times to get handler to work\n        //\n        // However, handler will receive manually created onPointerEnter that is triggered in EventManager in onPointerMove method.\n        // There may be possibility to use that fact to make handler respond properly to first mouse click\n        handler.getTracker().resetTracker();\n      }\n    });\n  }\n\n  public static getInstance(): GestureHandlerOrchestrator {\n    if (!GestureHandlerOrchestrator.instance) {\n      GestureHandlerOrchestrator.instance = new GestureHandlerOrchestrator();\n    }\n\n    return GestureHandlerOrchestrator.instance;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}