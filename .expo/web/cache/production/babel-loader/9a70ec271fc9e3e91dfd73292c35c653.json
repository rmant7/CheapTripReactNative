{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import*as React from'react';import I18nManager from\"react-native-web/dist/exports/I18nManager\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import View from\"react-native-web/dist/exports/View\";import{withInternalTheme}from\"../../core/theming\";import MaterialCommunityIcon from\"../MaterialCommunityIcon\";import TouchableRipple from\"../TouchableRipple/TouchableRipple\";import Text from\"../Typography/Text\";import{ListAccordionGroupContext}from\"./ListAccordionGroup\";import{getAccordionColors}from\"./utils\";var ListAccordion=function ListAccordion(_ref){var _theme$colors,_theme$colors2;var left=_ref.left,right=_ref.right,title=_ref.title,description=_ref.description,children=_ref.children,theme=_ref.theme,titleStyle=_ref.titleStyle,descriptionStyle=_ref.descriptionStyle,_ref$titleNumberOfLin=_ref.titleNumberOfLines,titleNumberOfLines=_ref$titleNumberOfLin===void 0?1:_ref$titleNumberOfLin,_ref$descriptionNumbe=_ref.descriptionNumberOfLines,descriptionNumberOfLines=_ref$descriptionNumbe===void 0?2:_ref$descriptionNumbe,style=_ref.style,id=_ref.id,testID=_ref.testID,onPress=_ref.onPress,onLongPress=_ref.onLongPress,expandedProp=_ref.expanded,accessibilityLabel=_ref.accessibilityLabel;var _React$useState=React.useState(expandedProp||false),_React$useState2=_slicedToArray(_React$useState,2),expanded=_React$useState2[0],setExpanded=_React$useState2[1];var handlePressAction=function handlePressAction(e){onPress===null||onPress===void 0?void 0:onPress(e);if(expandedProp===undefined){setExpanded(function(expanded){return!expanded;});}};var expandedInternal=expandedProp!==undefined?expandedProp:expanded;var groupContext=React.useContext(ListAccordionGroupContext);if(groupContext!==null&&!id){throw new Error('List.Accordion is used inside a List.AccordionGroup without specifying an id prop.');}var isExpanded=groupContext?groupContext.expandedId===id:expandedInternal;var _getAccordionColors=getAccordionColors({theme:theme,isExpanded:isExpanded}),titleColor=_getAccordionColors.titleColor,descriptionColor=_getAccordionColors.descriptionColor,titleTextColor=_getAccordionColors.titleTextColor,rippleColor=_getAccordionColors.rippleColor;var handlePress=groupContext&&id!==undefined?function(){return groupContext.onAccordionPress(id);}:handlePressAction;return React.createElement(View,null,React.createElement(View,{style:{backgroundColor:theme===null||theme===void 0?void 0:(_theme$colors=theme.colors)===null||_theme$colors===void 0?void 0:_theme$colors.background}},React.createElement(TouchableRipple,{style:[styles.container,style],onPress:handlePress,onLongPress:onLongPress,rippleColor:rippleColor,accessibilityRole:\"button\",accessibilityState:{expanded:isExpanded},accessibilityLabel:accessibilityLabel,testID:testID,borderless:true},React.createElement(View,{style:styles.row,pointerEvents:\"none\"},left?left({color:isExpanded?(_theme$colors2=theme.colors)===null||_theme$colors2===void 0?void 0:_theme$colors2.primary:descriptionColor}):null,React.createElement(View,{style:[styles.item,styles.content]},React.createElement(Text,{selectable:false,numberOfLines:titleNumberOfLines,style:[styles.title,{color:titleTextColor},titleStyle]},title),description?React.createElement(Text,{selectable:false,numberOfLines:descriptionNumberOfLines,style:[styles.description,{color:descriptionColor},descriptionStyle]},description):null),React.createElement(View,{style:[styles.item,description?styles.multiline:undefined]},right?right({isExpanded:isExpanded}):React.createElement(MaterialCommunityIcon,{name:isExpanded?'chevron-up':'chevron-down',color:theme.isV3?descriptionColor:titleColor,size:24,direction:I18nManager.getConstants().isRTL?'rtl':'ltr'}))))),isExpanded?React.Children.map(children,function(child){if(left&&React.isValidElement(child)&&!child.props.left&&!child.props.right){return React.cloneElement(child,{style:[styles.child,child.props.style]});}return child;}):null);};ListAccordion.displayName='List.Accordion';var styles=StyleSheet.create({container:{padding:8},row:{flexDirection:'row',alignItems:'center'},multiline:{height:40,alignItems:'center',justifyContent:'center'},title:{fontSize:16},description:{fontSize:14},item:{margin:8},child:{paddingLeft:64},content:{flex:1,justifyContent:'center'}});export default withInternalTheme(ListAccordion);","map":{"version":3,"mappings":"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","names":["React","withInternalTheme","MaterialCommunityIcon","TouchableRipple","Text","ListAccordionGroupContext","getAccordionColors","ListAccordion","_ref","left","right","title","description","children","theme","titleStyle","descriptionStyle","titleNumberOfLines","descriptionNumberOfLines","style","id","testID","onPress","onLongPress","expandedProp","expanded","accessibilityLabel","useState","setExpanded","handlePressAction","e","undefined","expandedInternal","groupContext","useContext","Error","isExpanded","expandedId","titleColor","descriptionColor","titleTextColor","rippleColor","handlePress","onAccordionPress","View","backgroundColor","colors","_theme$colors","background","styles","container","accessibilityRole","accessibilityState","borderless","row","pointerEvents","color","_theme$colors2","primary","item","content","selectable","numberOfLines","multiline","name","isV3","size","direction","I18nManager","getConstants","isRTL","Children","map","child","isValidElement","props","cloneElement","displayName","StyleSheet","create","padding","flexDirection","alignItems","height","justifyContent","fontSize","margin","paddingLeft","flex"],"sources":["ListAccordion.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  GestureResponderEvent,\n  I18nManager,\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport { withInternalTheme } from '../../core/theming';\nimport type { InternalTheme } from '../../types';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\nimport { ListAccordionGroupContext } from './ListAccordionGroup';\nimport { getAccordionColors } from './utils';\n\nexport type Props = {\n  /**\n   * Title text for the list accordion.\n   */\n  title: React.ReactNode;\n  /**\n   * Description text for the list accordion.\n   */\n  description?: React.ReactNode;\n  /**\n   * Callback which returns a React element to display on the left side.\n   */\n  left?: (props: { color: string }) => React.ReactNode;\n  /**\n   * Callback which returns a React element to display on the right side.\n   */\n  right?: (props: { isExpanded: boolean }) => React.ReactNode;\n  /**\n   * Whether the accordion is expanded\n   * If this prop is provided, the accordion will behave as a \"controlled component\".\n   * You'll need to update this prop when you want to toggle the component or on `onPress`.\n   */\n  expanded?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Content of the section.\n   */\n  children: React.ReactNode;\n  /**\n   * @optional\n   */\n  theme: InternalTheme;\n  /**\n   * Style that is passed to the wrapping TouchableRipple element.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Title element.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * Style that is passed to Description element.\n   */\n  descriptionStyle?: StyleProp<TextStyle>;\n  /**\n   * Truncate Title text such that the total number of lines does not\n   * exceed this number.\n   */\n  titleNumberOfLines?: number;\n  /**\n   * Truncate Description text such that the total number of lines does not\n   * exceed this number.\n   */\n  descriptionNumberOfLines?: number;\n  /**\n   * Id is used for distinguishing specific accordion when using List.AccordionGroup. Property is required when using List.AccordionGroup and has no impact on behavior when using standalone List.Accordion.\n   */\n  id?: string | number;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n  /**\n   * Accessibility label for the TouchableRipple. This is read by the screen reader when the user taps the touchable.\n   */\n  accessibilityLabel?: string;\n};\n\n/**\n * A component used to display an expandable list item.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-accordion-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-accordion-2.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-accordion-3.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [expanded, setExpanded] = React.useState(true);\n *\n *   const handlePress = () => setExpanded(!expanded);\n *\n *   return (\n *     <List.Section title=\"Accordions\">\n *       <List.Accordion\n *         title=\"Uncontrolled Accordion\"\n *         left={props => <List.Icon {...props} icon=\"folder\" />}>\n *         <List.Item title=\"First item\" />\n *         <List.Item title=\"Second item\" />\n *       </List.Accordion>\n *\n *       <List.Accordion\n *         title=\"Controlled Accordion\"\n *         left={props => <List.Icon {...props} icon=\"folder\" />}\n *         expanded={expanded}\n *         onPress={handlePress}>\n *         <List.Item title=\"First item\" />\n *         <List.Item title=\"Second item\" />\n *       </List.Accordion>\n *     </List.Section>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst ListAccordion = ({\n  left,\n  right,\n  title,\n  description,\n  children,\n  theme,\n  titleStyle,\n  descriptionStyle,\n  titleNumberOfLines = 1,\n  descriptionNumberOfLines = 2,\n  style,\n  id,\n  testID,\n  onPress,\n  onLongPress,\n  expanded: expandedProp,\n  accessibilityLabel,\n}: Props) => {\n  const [expanded, setExpanded] = React.useState<boolean>(\n    expandedProp || false\n  );\n\n  const handlePressAction = (e: GestureResponderEvent) => {\n    onPress?.(e);\n\n    if (expandedProp === undefined) {\n      // Only update state of the `expanded` prop was not passed\n      // If it was passed, the component will act as a controlled component\n      setExpanded((expanded) => !expanded);\n    }\n  };\n\n  const expandedInternal = expandedProp !== undefined ? expandedProp : expanded;\n\n  const groupContext = React.useContext(ListAccordionGroupContext);\n  if (groupContext !== null && !id) {\n    throw new Error(\n      'List.Accordion is used inside a List.AccordionGroup without specifying an id prop.'\n    );\n  }\n  const isExpanded = groupContext\n    ? groupContext.expandedId === id\n    : expandedInternal;\n\n  const { titleColor, descriptionColor, titleTextColor, rippleColor } =\n    getAccordionColors({\n      theme,\n      isExpanded,\n    });\n\n  const handlePress =\n    groupContext && id !== undefined\n      ? () => groupContext.onAccordionPress(id)\n      : handlePressAction;\n  return (\n    <View>\n      <View style={{ backgroundColor: theme?.colors?.background }}>\n        <TouchableRipple\n          style={[styles.container, style]}\n          onPress={handlePress}\n          onLongPress={onLongPress}\n          rippleColor={rippleColor}\n          accessibilityRole=\"button\"\n          accessibilityState={{ expanded: isExpanded }}\n          accessibilityLabel={accessibilityLabel}\n          testID={testID}\n          borderless\n        >\n          <View style={styles.row} pointerEvents=\"none\">\n            {left\n              ? left({\n                  color: isExpanded ? theme.colors?.primary : descriptionColor,\n                })\n              : null}\n            <View style={[styles.item, styles.content]}>\n              <Text\n                selectable={false}\n                numberOfLines={titleNumberOfLines}\n                style={[\n                  styles.title,\n                  {\n                    color: titleTextColor,\n                  },\n                  titleStyle,\n                ]}\n              >\n                {title}\n              </Text>\n              {description ? (\n                <Text\n                  selectable={false}\n                  numberOfLines={descriptionNumberOfLines}\n                  style={[\n                    styles.description,\n                    {\n                      color: descriptionColor,\n                    },\n                    descriptionStyle,\n                  ]}\n                >\n                  {description}\n                </Text>\n              ) : null}\n            </View>\n            <View\n              style={[styles.item, description ? styles.multiline : undefined]}\n            >\n              {right ? (\n                right({\n                  isExpanded: isExpanded,\n                })\n              ) : (\n                <MaterialCommunityIcon\n                  name={isExpanded ? 'chevron-up' : 'chevron-down'}\n                  color={theme.isV3 ? descriptionColor : titleColor}\n                  size={24}\n                  direction={I18nManager.getConstants().isRTL ? 'rtl' : 'ltr'}\n                />\n              )}\n            </View>\n          </View>\n        </TouchableRipple>\n      </View>\n\n      {isExpanded\n        ? React.Children.map(children, (child) => {\n            if (\n              left &&\n              React.isValidElement(child) &&\n              !child.props.left &&\n              !child.props.right\n            ) {\n              return React.cloneElement(child as React.ReactElement<any>, {\n                style: [styles.child, child.props.style],\n              });\n            }\n\n            return child;\n          })\n        : null}\n    </View>\n  );\n};\n\nListAccordion.displayName = 'List.Accordion';\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 8,\n  },\n  row: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  multiline: {\n    height: 40,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 16,\n  },\n  description: {\n    fontSize: 14,\n  },\n  item: {\n    margin: 8,\n  },\n  child: {\n    paddingLeft: 64,\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n});\n\nexport default withInternalTheme(ListAccordion);\n"]},"metadata":{},"sourceType":"module"}