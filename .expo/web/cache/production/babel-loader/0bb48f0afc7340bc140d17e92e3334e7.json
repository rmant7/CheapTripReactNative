{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";import _defineProperty2 from\"@babel/runtime/helpers/defineProperty\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _assertThisInitialized from\"@babel/runtime/helpers/assertThisInitialized\";import _get from\"@babel/runtime/helpers/get\";import _inherits from\"@babel/runtime/helpers/inherits\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";var _excluded=[\"shouldCancelWhenOutside\",\"maxDeltaX\",\"maxDeltaY\",\"numberOfTaps\",\"minDurationMs\",\"maxDelayMs\",\"maxDurationMs\",\"maxDist\",\"minPointers\",\"maxPointers\"];function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty2(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}import Hammer from'@egjs/hammerjs';import DiscreteGestureHandler from\"./DiscreteGestureHandler\";import{isnan}from\"./utils\";var TapGestureHandler=function(_DiscreteGestureHandl){_inherits(TapGestureHandler,_DiscreteGestureHandl);var _super=_createSuper(TapGestureHandler);function TapGestureHandler(){var _this;_classCallCheck(this,TapGestureHandler);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_defineProperty(_assertThisInitialized(_this),\"_shouldFireEndEvent\",null);_defineProperty(_assertThisInitialized(_this),\"_timer\",void 0);_defineProperty(_assertThisInitialized(_this),\"_multiTapTimer\",void 0);_defineProperty(_assertThisInitialized(_this),\"onSuccessfulTap\",function(ev){if(_this._getPendingGestures().length){_this._shouldFireEndEvent=ev;return;}if(ev.eventType===Hammer.INPUT_END){_this.sendEvent(_objectSpread(_objectSpread({},ev),{},{eventType:Hammer.INPUT_MOVE}));}_this.sendEvent(_objectSpread(_objectSpread({},ev),{},{isFinal:true}));_this.onGestureEnded(ev);});return _this;}_createClass(TapGestureHandler,[{key:\"name\",get:function get(){return'tap';}},{key:\"NativeGestureClass\",get:function get(){return Hammer.Tap;}},{key:\"maxDelayMs\",get:function get(){return isnan(this.config.maxDelayMs)?300:this.config.maxDelayMs;}},{key:\"simulateCancelEvent\",value:function simulateCancelEvent(inputData){if(this.isGestureRunning){this.cancelEvent(inputData);}}},{key:\"onGestureActivated\",value:function onGestureActivated(ev){if(this.isGestureRunning){this.onSuccessfulTap(ev);}}},{key:\"onRawEvent\",value:function onRawEvent(ev){var _this2=this;_get(_getPrototypeOf(TapGestureHandler.prototype),\"onRawEvent\",this).call(this,ev);if(!this.hasGestureFailed&&!this.isGestureRunning&&!ev.isFinal){var gesture=this.hammer.get(this.name);if(gesture.options.enable(gesture,ev)){clearTimeout(this._multiTapTimer);this.onStart(ev);this.sendEvent(ev);}}if(ev.isFinal&&ev.maxPointers>1){setTimeout(function(){if(_this2.isGestureRunning){_this2.cancelEvent(ev);}});}if(this.hasGestureFailed){return;}if(ev.isFinal){if(ev.maxPointers>1){setTimeout(function(){if(_this2.isGestureRunning){_this2.cancelEvent(ev);}});}clearTimeout(this._timer);this._timer=setTimeout(function(){_this2.hasGestureFailed=true;_this2.cancelEvent(ev);},this.maxDelayMs);}else if(!this.hasGestureFailed&&!this.isGestureRunning){var _gesture2=this.hammer.get(this.name);if(_gesture2.options.enable(_gesture2,ev)){clearTimeout(this._multiTapTimer);this.onStart(ev);this.sendEvent(ev);}}}},{key:\"getHammerConfig\",value:function getHammerConfig(){return _objectSpread(_objectSpread({},_get(_getPrototypeOf(TapGestureHandler.prototype),\"getHammerConfig\",this).call(this)),{},{event:this.name,taps:isnan(this.config.numberOfTaps)?1:this.config.numberOfTaps,interval:this.maxDelayMs,time:isnan(this.config.maxDurationMs)||this.config.maxDurationMs==null?250:this.config.maxDurationMs});}},{key:\"updateGestureConfig\",value:function updateGestureConfig(_ref){var _ref$shouldCancelWhen=_ref.shouldCancelWhenOutside,shouldCancelWhenOutside=_ref$shouldCancelWhen===void 0?true:_ref$shouldCancelWhen,_ref$maxDeltaX=_ref.maxDeltaX,maxDeltaX=_ref$maxDeltaX===void 0?Number.NaN:_ref$maxDeltaX,_ref$maxDeltaY=_ref.maxDeltaY,maxDeltaY=_ref$maxDeltaY===void 0?Number.NaN:_ref$maxDeltaY,_ref$numberOfTaps=_ref.numberOfTaps,numberOfTaps=_ref$numberOfTaps===void 0?1:_ref$numberOfTaps,_ref$minDurationMs=_ref.minDurationMs,minDurationMs=_ref$minDurationMs===void 0?525:_ref$minDurationMs,_ref$maxDelayMs=_ref.maxDelayMs,maxDelayMs=_ref$maxDelayMs===void 0?Number.NaN:_ref$maxDelayMs,_ref$maxDurationMs=_ref.maxDurationMs,maxDurationMs=_ref$maxDurationMs===void 0?Number.NaN:_ref$maxDurationMs,_ref$maxDist=_ref.maxDist,maxDist=_ref$maxDist===void 0?2:_ref$maxDist,_ref$minPointers=_ref.minPointers,minPointers=_ref$minPointers===void 0?1:_ref$minPointers,_ref$maxPointers=_ref.maxPointers,maxPointers=_ref$maxPointers===void 0?1:_ref$maxPointers,props=_objectWithoutProperties(_ref,_excluded);return _get(_getPrototypeOf(TapGestureHandler.prototype),\"updateGestureConfig\",this).call(this,_objectSpread({shouldCancelWhenOutside:shouldCancelWhenOutside,numberOfTaps:numberOfTaps,maxDeltaX:maxDeltaX,maxDeltaY:maxDeltaY,minDurationMs:minDurationMs,maxDelayMs:maxDelayMs,maxDist:maxDist,minPointers:minPointers,maxPointers:maxPointers},props));}},{key:\"onGestureEnded\",value:function onGestureEnded(){var _get2;clearTimeout(this._timer);for(var _len2=arguments.length,props=new Array(_len2),_key2=0;_key2<_len2;_key2++){props[_key2]=arguments[_key2];}(_get2=_get(_getPrototypeOf(TapGestureHandler.prototype),\"onGestureEnded\",this)).call.apply(_get2,[this].concat(props));}},{key:\"onWaitingEnded\",value:function onWaitingEnded(_gesture){if(this._shouldFireEndEvent){this.onSuccessfulTap(this._shouldFireEndEvent);this._shouldFireEndEvent=null;}}}]);return TapGestureHandler;}(DiscreteGestureHandler);export default TapGestureHandler;","map":{"version":3,"mappings":"43EAAA,MAAOA,OAAP,KAAmB,gBAAnB,CAEA,MAAOC,uBAAP,gCAEA,OAASC,KAAT,kBAEMC,kBAAN,+HAAuD,+SACA,IADA,wMA6BlCC,WAAD,CAAwB,CACxC,GAAI,MAAKC,mBAAL,GAA2BC,MAA/B,CAAuC,CACrC,MAAKC,mBAAL,CAA2BH,EAA3B,CACA,OACD,CACD,GAAIA,EAAE,CAACI,SAAH,GAAiBR,MAAM,CAACS,SAA5B,CAAuC,CACrC,MAAKC,SAAL,gCAAoBN,EAAL,MAASI,SAAS,CAAER,MAAM,CAACW,aAA1C,CACD,CAED,MAAKD,SAAL,gCAAoBN,EAAL,MAASQ,OAAO,CAAE,OAAjC,CACA,MAAKC,cAAL,CAAoBT,EAApB,EACD,CAxCoD,gEAI7C,cAAG,CACT,MAAO,KAAP,CACD,iCAEqB,cAAG,CACvB,MAAOJ,OAAM,CAACc,GAAd,CACD,yBAEa,cAAG,CAEf,MAAOZ,MAAK,CAAC,KAAKa,MAAL,CAAYC,UAAb,CAAL,CAAgC,GAAhC,CAAsC,KAAKD,MAAL,CAAYC,UAAzD,CACD,oCAEDC,6BAAoBC,SAAD,CAA4B,CAC7C,GAAI,KAAKC,gBAAT,CAA2B,CACzB,KAAKC,WAAL,CAAiBF,SAAjB,EACD,CACF,mCAEDG,4BAAmBjB,EAAD,CAAqB,CACrC,GAAI,KAAKe,gBAAT,CAA2B,CACzB,KAAKG,eAAL,CAAqBlB,EAArB,EACD,CACF,2BAeDmB,oBAAWnB,EAAD,CAAkB,iBAC1B,+EAAiBA,EAAjB,EAGA,GACE,CAAC,KAAKoB,gBAAN,EACA,CAAC,KAAKL,gBADN,EAGA,CAACf,EAAE,CAACQ,OAJN,CAKE,CAEA,GAAMa,QAAO,CAAG,KAAKC,MAAL,CAAaC,GAAb,CAAiB,KAAKC,IAAtB,CAAhB,CAEA,GAAIH,OAAO,CAACI,OAAR,CAAgBC,MAAhB,CAAuBL,OAAvB,CAAgCrB,EAAhC,CAAJ,CAAyC,CACvC2B,YAAY,CAAC,KAAKC,cAAN,CAAZ,CAEA,KAAKC,OAAL,CAAa7B,EAAb,EACA,KAAKM,SAAL,CAAeN,EAAf,EACD,CACF,CACD,GAAIA,EAAE,CAACQ,OAAH,EAAcR,EAAE,CAAC8B,WAAH,CAAiB,CAAnC,CAAsC,CACpCC,UAAU,CAAC,UAAM,CAGf,GAAI,OAAKhB,gBAAT,CAA2B,CACzB,OAAKC,WAAL,CAAiBhB,EAAjB,EACD,CACF,CANS,CAAV,CAOD,CAED,GAAI,KAAKoB,gBAAT,CAA2B,CACzB,OACD,CAGD,GAAIpB,EAAE,CAACQ,OAAP,CAAgB,CAGd,GAAIR,EAAE,CAAC8B,WAAH,CAAiB,CAArB,CAAwB,CACtBC,UAAU,CAAC,UAAM,CACf,GAAI,OAAKhB,gBAAT,CAA2B,CACzB,OAAKC,WAAL,CAAiBhB,EAAjB,EACD,CACF,CAJS,CAAV,CAKD,CAGD2B,YAAY,CAAC,KAAKK,MAAN,CAAZ,CAEA,KAAKA,MAAL,CAAcD,UAAU,CAAC,UAAM,CAC7B,OAAKX,gBAAL,CAAwB,IAAxB,CACA,OAAKJ,WAAL,CAAiBhB,EAAjB,EACD,CAHuB,CAGrB,KAAKY,UAHgB,CAAxB,CAID,CAlBD,IAkBO,IAAI,CAAC,KAAKQ,gBAAN,EAA0B,CAAC,KAAKL,gBAApC,CAAsD,CAE3D,GAAMM,UAAO,CAAG,KAAKC,MAAL,CAAaC,GAAb,CAAiB,KAAKC,IAAtB,CAAhB,CAEA,GAAIH,SAAO,CAACI,OAAR,CAAgBC,MAAhB,CAAuBL,SAAvB,CAAgCrB,EAAhC,CAAJ,CAAyC,CACvC2B,YAAY,CAAC,KAAKC,cAAN,CAAZ,CAEA,KAAKC,OAAL,CAAa7B,EAAb,EACA,KAAKM,SAAL,CAAeN,EAAf,EACD,CACF,CACF,gCAEDiC,0BAAkB,CAChB,gIAEEC,KAAK,CAAE,KAAKV,IAFP,CAILW,IAAI,CAAErC,KAAK,CAAC,KAAKa,MAAL,CAAYyB,YAAb,CAAL,CAAkC,CAAlC,CAAsC,KAAKzB,MAAL,CAAYyB,YAJnD,CAKLC,QAAQ,CAAE,KAAKzB,UALV,CAML0B,IAAI,CAEFxC,KAAK,CAAC,KAAKa,MAAL,CAAY4B,aAAb,CAAL,EAAoC,KAAK5B,MAAL,CAAY4B,aAAZ,EAA6B,IAAjE,CACI,GADJ,CAGI,KAAK5B,MAAL,CAAY4B,gBAErB,oCAEDC,kCAaG,gCAZDC,uBAAuB,CAAvBA,uBAAuB,gCAAG,IADR,2CAElBC,SAAS,CAATA,SAAS,yBAAGC,MAAM,CAACC,GAFD,oCAGlBC,SAAS,CAATA,SAAS,yBAAGF,MAAM,CAACC,GAHD,uCAIlBR,YAAY,CAAZA,YAAY,4BAAG,CAJG,2CAKlBU,aAAa,CAAbA,aAAa,6BAAG,GALE,yCAMlBlC,UAAU,CAAVA,UAAU,0BAAG+B,MAAM,CAACC,GANF,yCAQlBL,aAAa,CAAbA,aAAa,6BAAGI,MAAM,CAACC,GARL,sCASlBG,OAAO,CAAPA,OAAO,uBAAG,CATQ,oCAUlBC,WAAW,CAAXA,WAAW,2BAAG,CAVI,wCAWlBlB,WAAW,CAAXA,WAAW,2BAAG,CAXI,kBAYfmB,+CAEH,8GACER,uBAD+B,CAC/BA,uBAD+B,CAE/BL,YAF+B,CAE/BA,YAF+B,CAG/BM,SAH+B,CAG/BA,SAH+B,CAI/BG,SAJ+B,CAI/BA,SAJ+B,CAK/BC,aAL+B,CAK/BA,aAL+B,CAM/BlC,UAN+B,CAM/BA,UAN+B,CAO/BmC,OAP+B,CAO/BA,OAP+B,CAQ/BC,WAR+B,CAQ/BA,WAR+B,CAS/BlB,WAT+B,CAS/BA,WAT+B,EAU5BmB,QAEN,+BAEDxC,yBAA8B,WAC5BkB,YAAY,CAAC,KAAKK,MAAN,CAAZ,CAD4B,+BAAZiB,KAAJ,+CAAIA,KAAJ,0BAGZ,gHAAwBA,KAAxB,GACD,+BAEDC,wBAAeC,QAAD,CAAgB,CAC5B,GAAI,KAAKhD,mBAAT,CAA8B,CAC5B,KAAKe,eAAL,CAAqB,KAAKf,mBAA1B,EACA,KAAKA,mBAAL,CAA2B,IAA3B,CACD,CACF,gCAnK6BN,sBAAhC,EAqKA,cAAeE,kBAAf","names":["Hammer","DiscreteGestureHandler","isnan","TapGestureHandler","ev","_getPendingGestures","length","_shouldFireEndEvent","eventType","INPUT_END","sendEvent","INPUT_MOVE","isFinal","onGestureEnded","Tap","config","maxDelayMs","simulateCancelEvent","inputData","isGestureRunning","cancelEvent","onGestureActivated","onSuccessfulTap","onRawEvent","hasGestureFailed","gesture","hammer","get","name","options","enable","clearTimeout","_multiTapTimer","onStart","maxPointers","setTimeout","_timer","getHammerConfig","event","taps","numberOfTaps","interval","time","maxDurationMs","updateGestureConfig","shouldCancelWhenOutside","maxDeltaX","Number","NaN","maxDeltaY","minDurationMs","maxDist","minPointers","props","onWaitingEnded","_gesture"],"sources":["TapGestureHandler.ts"],"sourcesContent":["import Hammer from '@egjs/hammerjs';\n\nimport DiscreteGestureHandler from './DiscreteGestureHandler';\nimport { HammerInputExt } from './GestureHandler';\nimport { isnan } from './utils';\n\nclass TapGestureHandler extends DiscreteGestureHandler {\n  private _shouldFireEndEvent: HammerInputExt | null = null;\n  private _timer: any;\n  private _multiTapTimer: any; // TODO unused?\n  get name() {\n    return 'tap';\n  }\n\n  get NativeGestureClass() {\n    return Hammer.Tap;\n  }\n\n  get maxDelayMs() {\n    // @ts-ignore TODO(TS) trace down config\n    return isnan(this.config.maxDelayMs) ? 300 : this.config.maxDelayMs;\n  }\n\n  simulateCancelEvent(inputData: HammerInputExt) {\n    if (this.isGestureRunning) {\n      this.cancelEvent(inputData);\n    }\n  }\n\n  onGestureActivated(ev: HammerInputExt) {\n    if (this.isGestureRunning) {\n      this.onSuccessfulTap(ev);\n    }\n  }\n\n  onSuccessfulTap = (ev: HammerInputExt) => {\n    if (this._getPendingGestures().length) {\n      this._shouldFireEndEvent = ev;\n      return;\n    }\n    if (ev.eventType === Hammer.INPUT_END) {\n      this.sendEvent({ ...ev, eventType: Hammer.INPUT_MOVE });\n    }\n    // When handler gets activated it will turn into State.END immediately.\n    this.sendEvent({ ...ev, isFinal: true });\n    this.onGestureEnded(ev);\n  };\n\n  onRawEvent(ev: HammerInput) {\n    super.onRawEvent(ev);\n\n    // Attempt to create a touch-down event by checking if a valid tap hasn't started yet, then validating the input.\n    if (\n      !this.hasGestureFailed &&\n      !this.isGestureRunning &&\n      // Prevent multi-pointer events from misfiring.\n      !ev.isFinal\n    ) {\n      // Tap Gesture start event\n      const gesture = this.hammer!.get(this.name);\n      // @ts-ignore TODO(TS) trace down config\n      if (gesture.options.enable(gesture, ev)) {\n        clearTimeout(this._multiTapTimer);\n\n        this.onStart(ev);\n        this.sendEvent(ev);\n      }\n    }\n    if (ev.isFinal && ev.maxPointers > 1) {\n      setTimeout(() => {\n        // Handle case where one finger presses slightly\n        // after the first finger on a multi-tap event\n        if (this.isGestureRunning) {\n          this.cancelEvent(ev);\n        }\n      });\n    }\n\n    if (this.hasGestureFailed) {\n      return;\n    }\n    // Hammer doesn't send a `cancel` event for taps.\n    // Manually fail the event.\n    if (ev.isFinal) {\n      // Handle case where one finger presses slightly\n      // after the first finger on a multi-tap event\n      if (ev.maxPointers > 1) {\n        setTimeout(() => {\n          if (this.isGestureRunning) {\n            this.cancelEvent(ev);\n          }\n        });\n      }\n\n      // Clear last timer\n      clearTimeout(this._timer);\n      // Create time out for multi-taps.\n      this._timer = setTimeout(() => {\n        this.hasGestureFailed = true;\n        this.cancelEvent(ev);\n      }, this.maxDelayMs);\n    } else if (!this.hasGestureFailed && !this.isGestureRunning) {\n      // Tap Gesture start event\n      const gesture = this.hammer!.get(this.name);\n      // @ts-ignore TODO(TS) trace down config\n      if (gesture.options.enable(gesture, ev)) {\n        clearTimeout(this._multiTapTimer);\n\n        this.onStart(ev);\n        this.sendEvent(ev);\n      }\n    }\n  }\n\n  getHammerConfig() {\n    return {\n      ...super.getHammerConfig(),\n      event: this.name,\n      // @ts-ignore TODO(TS) trace down config\n      taps: isnan(this.config.numberOfTaps) ? 1 : this.config.numberOfTaps,\n      interval: this.maxDelayMs,\n      time:\n        // @ts-ignore TODO(TS) trace down config\n        isnan(this.config.maxDurationMs) || this.config.maxDurationMs == null\n          ? 250\n          : // @ts-ignore TODO(TS) trace down config\n            this.config.maxDurationMs,\n    };\n  }\n\n  updateGestureConfig({\n    shouldCancelWhenOutside = true,\n    maxDeltaX = Number.NaN,\n    maxDeltaY = Number.NaN,\n    numberOfTaps = 1,\n    minDurationMs = 525,\n    maxDelayMs = Number.NaN,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars -- TODO possibly forgotten to use in updateGestureConfig?\n    maxDurationMs = Number.NaN,\n    maxDist = 2,\n    minPointers = 1,\n    maxPointers = 1,\n    ...props\n  }) {\n    return super.updateGestureConfig({\n      shouldCancelWhenOutside,\n      numberOfTaps,\n      maxDeltaX,\n      maxDeltaY,\n      minDurationMs,\n      maxDelayMs,\n      maxDist,\n      minPointers,\n      maxPointers,\n      ...props,\n    });\n  }\n\n  onGestureEnded(...props: any) {\n    clearTimeout(this._timer);\n    // @ts-ignore TODO(TS) check how onGestureEnded works\n    super.onGestureEnded(...props);\n  }\n\n  onWaitingEnded(_gesture: any) {\n    if (this._shouldFireEndEvent) {\n      this.onSuccessfulTap(this._shouldFireEndEvent);\n      this._shouldFireEndEvent = null;\n    }\n  }\n}\nexport default TapGestureHandler;\n"]},"metadata":{},"sourceType":"module"}