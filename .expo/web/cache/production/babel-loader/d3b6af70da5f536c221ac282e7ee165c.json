{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _inherits from\"@babel/runtime/helpers/inherits\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}import GestureHandler from\"./GestureHandler\";import{TEST_MAX_IF_NOT_NAN}from\"./utils\";var DiscreteGestureHandler=function(_GestureHandler){_inherits(DiscreteGestureHandler,_GestureHandler);var _super=_createSuper(DiscreteGestureHandler);function DiscreteGestureHandler(){_classCallCheck(this,DiscreteGestureHandler);return _super.apply(this,arguments);}_createClass(DiscreteGestureHandler,[{key:\"isDiscrete\",get:function get(){return true;}},{key:\"shouldEnableGestureOnSetup\",get:function get(){return true;}},{key:\"shouldFailUnderCustomCriteria\",value:function shouldFailUnderCustomCriteria(_ref,_ref2){var x=_ref.x,y=_ref.y,deltaX=_ref.deltaX,deltaY=_ref.deltaY;var maxDeltaX=_ref2.maxDeltaX,maxDeltaY=_ref2.maxDeltaY,maxDistSq=_ref2.maxDistSq,shouldCancelWhenOutside=_ref2.shouldCancelWhenOutside;if(shouldCancelWhenOutside){if(!this.isPointInView({x:x,y:y})){return true;}}return TEST_MAX_IF_NOT_NAN(Math.abs(deltaX),maxDeltaX)||TEST_MAX_IF_NOT_NAN(Math.abs(deltaY),maxDeltaY)||TEST_MAX_IF_NOT_NAN(Math.abs(deltaY*deltaY+deltaX*deltaX),maxDistSq);}},{key:\"transformNativeEvent\",value:function transformNativeEvent(_ref3){var _ref3$center=_ref3.center,x=_ref3$center.x,y=_ref3$center.y;var rect=this.view.getBoundingClientRect();return{absoluteX:x,absoluteY:y,x:x-rect.left,y:y-rect.top};}},{key:\"isGestureEnabledForEvent\",value:function isGestureEnabledForEvent(_ref4,_recognizer,_ref5){var minPointers=_ref4.minPointers,maxPointers=_ref4.maxPointers,maxDeltaX=_ref4.maxDeltaX,maxDeltaY=_ref4.maxDeltaY,maxDistSq=_ref4.maxDistSq,shouldCancelWhenOutside=_ref4.shouldCancelWhenOutside;var pointerLength=_ref5.maxPointers,center=_ref5.center,deltaX=_ref5.deltaX,deltaY=_ref5.deltaY;var validPointerCount=pointerLength>=minPointers&&pointerLength<=maxPointers;if(this.shouldFailUnderCustomCriteria(_objectSpread(_objectSpread({},center),{},{deltaX:deltaX,deltaY:deltaY}),{maxDeltaX:maxDeltaX,maxDeltaY:maxDeltaY,maxDistSq:maxDistSq,shouldCancelWhenOutside:shouldCancelWhenOutside})||!validPointerCount&&this.isGestureRunning){return{failed:true};}return{success:validPointerCount};}}]);return DiscreteGestureHandler;}(GestureHandler);export default DiscreteGestureHandler;","map":{"version":3,"mappings":"60DAEA,MAAOA,eAAP,wBACA,OAASC,mBAAT,kBAEeC,uBAAf,4SACgB,cAAG,CACf,MAAO,KAAP,CACD,yCAE6B,cAAG,CAC/B,MAAO,KAAP,CACD,8CAEDC,kDAGE,IAFEC,EAAF,MAAEA,CAAF,CAAKC,CAAL,MAAKA,CAAL,CAAQC,MAAR,MAAQA,MAAR,CAAgBC,sBACdC,UAAF,OAAEA,SAAF,CAAaC,SAAb,OAAaA,SAAb,CAAwBC,SAAxB,OAAwBA,SAAxB,CAAmCC,sDAEnC,GAAIA,uBAAJ,CAA6B,CAC3B,GAAI,CAAC,KAAKC,aAAL,CAAmB,CAAER,CAAF,CAAEA,CAAF,CAAKC,GAAL,CAAnB,CAAL,CAAmC,CACjC,MAAO,KAAP,CACD,CACF,CACD,MACEJ,oBAAmB,CAACY,IAAI,CAACC,GAAL,CAASR,MAAT,CAAD,CAAmBE,SAAnB,CAAnB,EACAP,mBAAmB,CAACY,IAAI,CAACC,GAAL,CAASP,MAAT,CAAD,CAAmBE,SAAnB,CADnB,EAEAR,mBAAmB,CACjBY,IAAI,CAACC,GAAL,CAASP,MAAM,CAAGA,MAAT,CAAkBD,MAAM,CAAGA,MAApC,CADiB,CAEjBI,SAFiB,CAHrB,CAQD,qCAEDK,oCAAgD,wBAAzBC,MAAM,CAAIZ,CAAF,cAAEA,CAAF,CAAKC,iBAElC,GAAMY,KAAI,CAAG,KAAKC,IAAL,CAAWC,qBAAX,EAAb,CAEA,MAAO,CACLC,SAAS,CAAEhB,CADN,CAELiB,SAAS,CAAEhB,CAFN,CAGLD,CAAC,CAAEA,CAAC,CAAGa,IAAI,CAACK,IAHP,CAILjB,CAAC,CAAEA,CAAC,CAAGY,IAAI,CAACM,GAJP,CAAP,CAMD,yCAEDC,wCASEC,WATsB,OAWtB,IATEC,YADF,OACEA,WADF,CAEEC,WAFF,OAEEA,WAFF,CAGEnB,SAHF,OAGEA,SAHF,CAIEC,SAJF,OAIEA,SAJF,CAKEC,SALF,OAKEA,SALF,CAMEC,yDAGaiB,cAAf,OAAED,WAAW,CAAiBX,MAA9B,OAA8BA,MAA9B,CAAsCV,MAAtC,OAAsCA,MAAtC,CAA8CC,oBAE9C,GAAMsB,kBAAiB,CACrBD,aAAa,EAAIF,WAAjB,EAAgCE,aAAa,EAAID,WADnD,CAGA,GACE,KAAKxB,6BAAL,gCACOa,MAAL,MAAaV,MAAb,CAAaA,MAAb,CAAqBC,gBACrB,CACEC,SADF,CACEA,SADF,CAEEC,SAFF,CAEEA,SAFF,CAGEC,SAHF,CAGEA,SAHF,CAIEC,+CAJF,CAFF,GAWC,CAACkB,iBAAD,EAAsB,KAAKC,gBAZ9B,CAaE,CACA,MAAO,CAAEC,MAAM,CAAE,IAAV,CAAP,CACD,CAED,MAAO,CAAEC,OAAO,CAAEH,iBAAX,CAAP,CACD,qCAzE2C7B,cAA9C,EA4EA,cAAeE,uBAAf","names":["GestureHandler","TEST_MAX_IF_NOT_NAN","DiscreteGestureHandler","shouldFailUnderCustomCriteria","x","y","deltaX","deltaY","maxDeltaX","maxDeltaY","maxDistSq","shouldCancelWhenOutside","isPointInView","Math","abs","transformNativeEvent","center","rect","view","getBoundingClientRect","absoluteX","absoluteY","left","top","isGestureEnabledForEvent","_recognizer","minPointers","maxPointers","pointerLength","validPointerCount","isGestureRunning","failed","success"],"sources":["DiscreteGestureHandler.ts"],"sourcesContent":["/* eslint-disable eslint-comments/no-unlimited-disable */\n/* eslint-disable */\nimport GestureHandler from './GestureHandler';\nimport { TEST_MAX_IF_NOT_NAN } from './utils';\n\nabstract class DiscreteGestureHandler extends GestureHandler {\n  get isDiscrete() {\n    return true;\n  }\n\n  get shouldEnableGestureOnSetup() {\n    return true;\n  }\n\n  shouldFailUnderCustomCriteria(\n    { x, y, deltaX, deltaY }: any,\n    { maxDeltaX, maxDeltaY, maxDistSq, shouldCancelWhenOutside }: any\n  ) {\n    if (shouldCancelWhenOutside) {\n      if (!this.isPointInView({ x, y })) {\n        return true;\n      }\n    }\n    return (\n      TEST_MAX_IF_NOT_NAN(Math.abs(deltaX), maxDeltaX) ||\n      TEST_MAX_IF_NOT_NAN(Math.abs(deltaY), maxDeltaY) ||\n      TEST_MAX_IF_NOT_NAN(\n        Math.abs(deltaY * deltaY + deltaX * deltaX),\n        maxDistSq\n      )\n    );\n  }\n\n  transformNativeEvent({ center: { x, y } }: any) {\n    // @ts-ignore FIXME(TS)\n    const rect = this.view!.getBoundingClientRect();\n\n    return {\n      absoluteX: x,\n      absoluteY: y,\n      x: x - rect.left,\n      y: y - rect.top,\n    };\n  }\n\n  isGestureEnabledForEvent(\n    {\n      minPointers,\n      maxPointers,\n      maxDeltaX,\n      maxDeltaY,\n      maxDistSq,\n      shouldCancelWhenOutside,\n    }: any,\n    _recognizer: any,\n    { maxPointers: pointerLength, center, deltaX, deltaY }: any\n  ) {\n    const validPointerCount =\n      pointerLength >= minPointers && pointerLength <= maxPointers;\n\n    if (\n      this.shouldFailUnderCustomCriteria(\n        { ...center, deltaX, deltaY },\n        {\n          maxDeltaX,\n          maxDeltaY,\n          maxDistSq,\n          shouldCancelWhenOutside,\n        }\n      ) ||\n      // A user probably won't land a multi-pointer tap on the first tick (so we cannot just cancel each time)\n      // but if the gesture is running and the user adds or subtracts another pointer then it should fail.\n      (!validPointerCount && this.isGestureRunning)\n    ) {\n      return { failed: true };\n    }\n\n    return { success: validPointerCount };\n  }\n}\n\nexport default DiscreteGestureHandler;\n"]},"metadata":{},"sourceType":"module"}