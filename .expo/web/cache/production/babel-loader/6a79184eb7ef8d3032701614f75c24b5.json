{"ast":null,"code":"import*as React from'react';var MISSING_CONTEXT_ERROR=\"Couldn't find a schedule context.\";export var ScheduleUpdateContext=React.createContext({scheduleUpdate:function scheduleUpdate(){throw new Error(MISSING_CONTEXT_ERROR);},flushUpdates:function flushUpdates(){throw new Error(MISSING_CONTEXT_ERROR);}});export default function useScheduleUpdate(callback){var _React$useContext=React.useContext(ScheduleUpdateContext),scheduleUpdate=_React$useContext.scheduleUpdate,flushUpdates=_React$useContext.flushUpdates;scheduleUpdate(callback);React.useEffect(flushUpdates);}","map":{"version":3,"sources":["useScheduleUpdate.tsx"],"names":["React","MISSING_CONTEXT_ERROR","ScheduleUpdateContext","createContext","scheduleUpdate","Error","flushUpdates","useScheduleUpdate","callback","useContext","useEffect"],"mappings":"AAAA,MAAO,GAAKA,MAAK,KAAM,OAAO,CAE9B,GAAMC,sBAAqB,CAAG,mCAAmC,CAEjE,MAAO,IAAMC,sBAAqB,CAAGF,KAAK,CAACG,aAAa,CAGrD,CACDC,cAAc,0BAAG,CACf,KAAM,IAAIC,MAAK,CAACJ,qBAAqB,CAAC,CACxC,CAAC,CACDK,YAAY,wBAAG,CACb,KAAM,IAAID,MAAK,CAACJ,qBAAqB,CAAC,CACxC,CACF,CAAC,CAAC,CASF,cAAe,SAASM,kBAAiB,CAACC,QAAoB,CAAE,CAC9D,sBAAyCR,KAAK,CAACS,UAAU,CACvDP,qBAAqB,CACtB,CAFOE,cAAc,mBAAdA,cAAc,CAAEE,YAAAA,mBAAAA,YAAAA,CAIxBF,cAAc,CAACI,QAAQ,CAAC,CAExBR,KAAK,CAACU,SAAS,CAACJ,YAAY,CAAC,CAC/B","sourceRoot":"../../src","sourcesContent":["import * as React from 'react';\nconst MISSING_CONTEXT_ERROR = \"Couldn't find a schedule context.\";\nexport const ScheduleUpdateContext = /*#__PURE__*/React.createContext({\n  scheduleUpdate() {\n    throw new Error(MISSING_CONTEXT_ERROR);\n  },\n  flushUpdates() {\n    throw new Error(MISSING_CONTEXT_ERROR);\n  }\n});\n\n/**\n * When screen config changes, we want to update the navigator in the same update phase.\n * However, navigation state is in the root component and React won't let us update it from a child.\n * This is a workaround for that, the scheduled update is stored in the ref without actually calling setState.\n * It lets all subsequent updates access the latest state so it stays correct.\n * Then we call setState during after the component updates.\n */\nexport default function useScheduleUpdate(callback) {\n  const {\n    scheduleUpdate,\n    flushUpdates\n  } = React.useContext(ScheduleUpdateContext);\n  scheduleUpdate(callback);\n  React.useEffect(flushUpdates);\n}\n//# sourceMappingURL=useScheduleUpdate.js.map"]},"metadata":{},"sourceType":"module"}