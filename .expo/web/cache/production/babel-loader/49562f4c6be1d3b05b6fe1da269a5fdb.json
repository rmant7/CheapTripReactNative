{"ast":null,"code":"import DeviceEventEmitter from\"react-native-web/dist/exports/DeviceEventEmitter\";import{State}from\"../../State\";import{TouchEventType}from\"../../TouchEventType\";import{findHandler,findOldGestureHandler}from\"../handlersRegistry\";import{GestureStateManager}from\"./gestureStateManager\";var gestureHandlerEventSubscription=null;var gestureHandlerStateChangeEventSubscription=null;var gestureStateManagers=new Map();var lastUpdateEvent=[];function isStateChangeEvent(event){return event.oldState!=null;}function isTouchEvent(event){return event.eventType!=null;}export function onGestureHandlerEvent(event){var _handler$handlers7,_handler$handlers7$on,_handler$handlers8,_handler$handlers8$on,_handler$handlers9,_handler$handlers9$on,_handler$handlers10,_handler$handlers10$o;var handler=findHandler(event.handlerTag);if(handler){if(isStateChangeEvent(event)){if(event.oldState===State.UNDETERMINED&&event.state===State.BEGAN){var _handler$handlers$onB,_handler$handlers;(_handler$handlers$onB=(_handler$handlers=handler.handlers).onBegin)===null||_handler$handlers$onB===void 0?void 0:_handler$handlers$onB.call(_handler$handlers,event);}else if((event.oldState===State.BEGAN||event.oldState===State.UNDETERMINED)&&event.state===State.ACTIVE){var _handler$handlers$onS,_handler$handlers2;(_handler$handlers$onS=(_handler$handlers2=handler.handlers).onStart)===null||_handler$handlers$onS===void 0?void 0:_handler$handlers$onS.call(_handler$handlers2,event);lastUpdateEvent[handler.handlers.handlerTag]=event;}else if(event.oldState!==event.state&&event.state===State.END){var _handler$handlers$onF,_handler$handlers4;if(event.oldState===State.ACTIVE){var _handler$handlers$onE,_handler$handlers3;(_handler$handlers$onE=(_handler$handlers3=handler.handlers).onEnd)===null||_handler$handlers$onE===void 0?void 0:_handler$handlers$onE.call(_handler$handlers3,event,true);}(_handler$handlers$onF=(_handler$handlers4=handler.handlers).onFinalize)===null||_handler$handlers$onF===void 0?void 0:_handler$handlers$onF.call(_handler$handlers4,event,true);lastUpdateEvent[handler.handlers.handlerTag]=undefined;}else if((event.state===State.FAILED||event.state===State.CANCELLED)&&event.oldState!==event.state){var _handler$handlers$onF2,_handler$handlers6;if(event.oldState===State.ACTIVE){var _handler$handlers$onE2,_handler$handlers5;(_handler$handlers$onE2=(_handler$handlers5=handler.handlers).onEnd)===null||_handler$handlers$onE2===void 0?void 0:_handler$handlers$onE2.call(_handler$handlers5,event,false);}(_handler$handlers$onF2=(_handler$handlers6=handler.handlers).onFinalize)===null||_handler$handlers$onF2===void 0?void 0:_handler$handlers$onF2.call(_handler$handlers6,event,false);gestureStateManagers.delete(event.handlerTag);lastUpdateEvent[handler.handlers.handlerTag]=undefined;}}else if(isTouchEvent(event)){if(!gestureStateManagers.has(event.handlerTag)){gestureStateManagers.set(event.handlerTag,GestureStateManager.create(event.handlerTag));}var manager=gestureStateManagers.get(event.handlerTag);switch(event.eventType){case TouchEventType.TOUCHES_DOWN:(_handler$handlers7=handler.handlers)===null||_handler$handlers7===void 0?void 0:(_handler$handlers7$on=_handler$handlers7.onTouchesDown)===null||_handler$handlers7$on===void 0?void 0:_handler$handlers7$on.call(_handler$handlers7,event,manager);break;case TouchEventType.TOUCHES_MOVE:(_handler$handlers8=handler.handlers)===null||_handler$handlers8===void 0?void 0:(_handler$handlers8$on=_handler$handlers8.onTouchesMove)===null||_handler$handlers8$on===void 0?void 0:_handler$handlers8$on.call(_handler$handlers8,event,manager);break;case TouchEventType.TOUCHES_UP:(_handler$handlers9=handler.handlers)===null||_handler$handlers9===void 0?void 0:(_handler$handlers9$on=_handler$handlers9.onTouchesUp)===null||_handler$handlers9$on===void 0?void 0:_handler$handlers9$on.call(_handler$handlers9,event,manager);break;case TouchEventType.TOUCHES_CANCELLED:(_handler$handlers10=handler.handlers)===null||_handler$handlers10===void 0?void 0:(_handler$handlers10$o=_handler$handlers10.onTouchesCancelled)===null||_handler$handlers10$o===void 0?void 0:_handler$handlers10$o.call(_handler$handlers10,event,manager);break;}}else{var _handler$handlers$onU,_handler$handlers11;(_handler$handlers$onU=(_handler$handlers11=handler.handlers).onUpdate)===null||_handler$handlers$onU===void 0?void 0:_handler$handlers$onU.call(_handler$handlers11,event);if(handler.handlers.onChange&&handler.handlers.changeEventCalculator){var _handler$handlers$onC,_handler$handlers12,_handler$handlers$cha,_handler$handlers13;(_handler$handlers$onC=(_handler$handlers12=handler.handlers).onChange)===null||_handler$handlers$onC===void 0?void 0:_handler$handlers$onC.call(_handler$handlers12,(_handler$handlers$cha=(_handler$handlers13=handler.handlers).changeEventCalculator)===null||_handler$handlers$cha===void 0?void 0:_handler$handlers$cha.call(_handler$handlers13,event,lastUpdateEvent[handler.handlers.handlerTag]));lastUpdateEvent[handler.handlers.handlerTag]=event;}}}else{var oldHandler=findOldGestureHandler(event.handlerTag);if(oldHandler){var nativeEvent={nativeEvent:event};if(isStateChangeEvent(event)){oldHandler.onGestureStateChange(nativeEvent);}else{oldHandler.onGestureEvent(nativeEvent);}return;}}}export function startListening(){stopListening();gestureHandlerEventSubscription=DeviceEventEmitter.addListener('onGestureHandlerEvent',onGestureHandlerEvent);gestureHandlerStateChangeEventSubscription=DeviceEventEmitter.addListener('onGestureHandlerStateChange',onGestureHandlerEvent);}export function stopListening(){if(gestureHandlerEventSubscription){gestureHandlerEventSubscription.remove();gestureHandlerEventSubscription=null;}if(gestureHandlerStateChangeEventSubscription){gestureHandlerStateChangeEventSubscription.remove();gestureHandlerStateChangeEventSubscription=null;}}","map":{"version":3,"mappings":"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","names":["State","TouchEventType","findHandler","findOldGestureHandler","GestureStateManager","gestureHandlerEventSubscription","gestureHandlerStateChangeEventSubscription","gestureStateManagers","Map","lastUpdateEvent","isStateChangeEvent","event","oldState","isTouchEvent","eventType","onGestureHandlerEvent","handler","handlerTag","UNDETERMINED","state","BEGAN","handlers","onBegin","ACTIVE","onStart","END","onEnd","onFinalize","undefined","FAILED","CANCELLED","delete","has","set","create","manager","get","TOUCHES_DOWN","onTouchesDown","TOUCHES_MOVE","onTouchesMove","TOUCHES_UP","onTouchesUp","TOUCHES_CANCELLED","onTouchesCancelled","onUpdate","onChange","changeEventCalculator","_handler$handlers$cha","oldHandler","nativeEvent","onGestureStateChange","onGestureEvent","startListening","stopListening","DeviceEventEmitter","addListener","remove"],"sources":["eventReceiver.ts"],"sourcesContent":["import { DeviceEventEmitter, EmitterSubscription } from 'react-native';\nimport { State } from '../../State';\nimport { TouchEventType } from '../../TouchEventType';\nimport {\n  GestureTouchEvent,\n  GestureUpdateEvent,\n  GestureStateChangeEvent,\n} from '../gestureHandlerCommon';\nimport { findHandler, findOldGestureHandler } from '../handlersRegistry';\nimport { BaseGesture } from './gesture';\nimport {\n  GestureStateManager,\n  GestureStateManagerType,\n} from './gestureStateManager';\n\nlet gestureHandlerEventSubscription: EmitterSubscription | null = null;\nlet gestureHandlerStateChangeEventSubscription: EmitterSubscription | null =\n  null;\n\nconst gestureStateManagers: Map<number, GestureStateManagerType> = new Map<\n  number,\n  GestureStateManagerType\n>();\n\nconst lastUpdateEvent: (GestureUpdateEvent | undefined)[] = [];\n\nfunction isStateChangeEvent(\n  event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n): event is GestureStateChangeEvent {\n  // @ts-ignore oldState doesn't exist on GestureTouchEvent and that's the point\n  return event.oldState != null;\n}\n\nfunction isTouchEvent(\n  event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n): event is GestureTouchEvent {\n  return event.eventType != null;\n}\n\nexport function onGestureHandlerEvent(\n  event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n) {\n  const handler = findHandler(event.handlerTag) as BaseGesture<\n    Record<string, unknown>\n  >;\n\n  if (handler) {\n    if (isStateChangeEvent(event)) {\n      if (\n        event.oldState === State.UNDETERMINED &&\n        event.state === State.BEGAN\n      ) {\n        handler.handlers.onBegin?.(event);\n      } else if (\n        (event.oldState === State.BEGAN ||\n          event.oldState === State.UNDETERMINED) &&\n        event.state === State.ACTIVE\n      ) {\n        handler.handlers.onStart?.(event);\n        lastUpdateEvent[handler.handlers.handlerTag] = event;\n      } else if (event.oldState !== event.state && event.state === State.END) {\n        if (event.oldState === State.ACTIVE) {\n          handler.handlers.onEnd?.(event, true);\n        }\n        handler.handlers.onFinalize?.(event, true);\n        lastUpdateEvent[handler.handlers.handlerTag] = undefined;\n      } else if (\n        (event.state === State.FAILED || event.state === State.CANCELLED) &&\n        event.oldState !== event.state\n      ) {\n        if (event.oldState === State.ACTIVE) {\n          handler.handlers.onEnd?.(event, false);\n        }\n        handler.handlers.onFinalize?.(event, false);\n        gestureStateManagers.delete(event.handlerTag);\n        lastUpdateEvent[handler.handlers.handlerTag] = undefined;\n      }\n    } else if (isTouchEvent(event)) {\n      if (!gestureStateManagers.has(event.handlerTag)) {\n        gestureStateManagers.set(\n          event.handlerTag,\n          GestureStateManager.create(event.handlerTag)\n        );\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const manager = gestureStateManagers.get(event.handlerTag)!;\n\n      switch (event.eventType) {\n        case TouchEventType.TOUCHES_DOWN:\n          handler.handlers?.onTouchesDown?.(event, manager);\n          break;\n        case TouchEventType.TOUCHES_MOVE:\n          handler.handlers?.onTouchesMove?.(event, manager);\n          break;\n        case TouchEventType.TOUCHES_UP:\n          handler.handlers?.onTouchesUp?.(event, manager);\n          break;\n        case TouchEventType.TOUCHES_CANCELLED:\n          handler.handlers?.onTouchesCancelled?.(event, manager);\n          break;\n      }\n    } else {\n      handler.handlers.onUpdate?.(event);\n\n      if (handler.handlers.onChange && handler.handlers.changeEventCalculator) {\n        handler.handlers.onChange?.(\n          handler.handlers.changeEventCalculator?.(\n            event,\n            lastUpdateEvent[handler.handlers.handlerTag]\n          )\n        );\n\n        lastUpdateEvent[handler.handlers.handlerTag] = event;\n      }\n    }\n  } else {\n    const oldHandler = findOldGestureHandler(event.handlerTag);\n    if (oldHandler) {\n      const nativeEvent = { nativeEvent: event };\n      if (isStateChangeEvent(event)) {\n        oldHandler.onGestureStateChange(nativeEvent);\n      } else {\n        oldHandler.onGestureEvent(nativeEvent);\n      }\n      return;\n    }\n  }\n}\n\nexport function startListening() {\n  stopListening();\n\n  gestureHandlerEventSubscription = DeviceEventEmitter.addListener(\n    'onGestureHandlerEvent',\n    onGestureHandlerEvent\n  );\n\n  gestureHandlerStateChangeEventSubscription = DeviceEventEmitter.addListener(\n    'onGestureHandlerStateChange',\n    onGestureHandlerEvent\n  );\n}\n\nexport function stopListening() {\n  if (gestureHandlerEventSubscription) {\n    gestureHandlerEventSubscription.remove();\n    gestureHandlerEventSubscription = null;\n  }\n\n  if (gestureHandlerStateChangeEventSubscription) {\n    gestureHandlerStateChangeEventSubscription.remove();\n    gestureHandlerStateChangeEventSubscription = null;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}