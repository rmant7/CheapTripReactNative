{"ast":null,"code":"import color from'color';import{black,white}from\"../../styles/themes/v2/colors\";export var getCardCoverStyle=function getCardCoverStyle(_ref){var theme=_ref.theme,index=_ref.index,total=_ref.total;var isV3=theme.isV3,roundness=theme.roundness;if(isV3){return{borderRadius:3*roundness};}if(index===0){if(total===1){return{borderRadius:roundness};}return{borderTopLeftRadius:roundness,borderTopRightRadius:roundness};}if(typeof total==='number'&&index===total-1){return{borderBottomLeftRadius:roundness};}return undefined;};var getBorderColor=function getBorderColor(_ref2){var theme=_ref2.theme;if(theme.isV3){return theme.colors.outline;}if(theme.dark){return color(white).alpha(0.12).rgb().string();}return color(black).alpha(0.12).rgb().string();};var getBackgroundColor=function getBackgroundColor(_ref3){var theme=_ref3.theme,isMode=_ref3.isMode;if(theme.isV3){if(isMode('contained')){return theme.colors.surfaceVariant;}if(isMode('outlined')){return theme.colors.surface;}}return undefined;};export var getCardColors=function getCardColors(_ref4){var theme=_ref4.theme,mode=_ref4.mode;var isMode=function isMode(modeToCompare){return mode===modeToCompare;};return{backgroundColor:getBackgroundColor({theme:theme,isMode:isMode}),borderColor:getBorderColor({theme:theme})};};","map":{"version":3,"sources":["utils.tsx"],"names":["color","black","white","getCardCoverStyle","theme","index","total","isV3","roundness","borderRadius","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","undefined","getBorderColor","colors","outline","dark","alpha","rgb","string","getBackgroundColor","isMode","surfaceVariant","surface","getCardColors","mode","modeToCompare","backgroundColor","borderColor"],"mappings":"AAAA,MAAOA,MAAK,KAAM,OAAO,CAEzB,OAASC,KAAK,CAAEC,KAAK,qCAKrB,MAAO,IAAMC,kBAAiB,CAAG,QAApBA,kBAAiB,CAAG,IAAA,CAQ3B,CAR4B,GAChCC,MAAK,CAON,IAAA,CAPCA,KAAK,CACLC,KAAK,CAMN,IAAA,CANCA,KAAK,CACLC,KAAAA,CAKD,IAAA,CALCA,KAAAA,CAMA,GAAQC,KAAI,CAAgBH,KAAK,CAAzBG,IAAI,CAAEC,SAAAA,CAAcJ,KAAK,CAAnBI,SAAAA,CAEd,GAAID,IAAI,CAAE,CACR,MAAO,CACLE,YAAY,CAAE,CAAC,CAAGD,SACpB,CAAC,CACH,CAEA,GAAIH,KAAK,GAAK,CAAC,CAAE,CACf,GAAIC,KAAK,GAAK,CAAC,CAAE,CACf,MAAO,CACLG,YAAY,CAAED,SAChB,CAAC,CACH,CAEA,MAAO,CACLE,mBAAmB,CAAEF,SAAS,CAC9BG,oBAAoB,CAAEH,SACxB,CAAC,CACH,CAEA,GAAI,MAAOF,MAAK,GAAK,QAAQ,EAAID,KAAK,GAAKC,KAAK,CAAG,CAAC,CAAE,CACpD,MAAO,CACLM,sBAAsB,CAAEJ,SAC1B,CAAC,CACH,CAEA,MAAOK,UAAS,CAClB,CAAC,CAED,GAAMC,eAAc,CAAG,QAAjBA,eAAc,CAAG,KAAA,CAAyC,CAAxC,GAAEV,MAAAA,CAAiC,KAAA,CAAjCA,KAAAA,CACxB,GAAIA,KAAK,CAACG,IAAI,CAAE,CACd,MAAOH,MAAK,CAACW,MAAM,CAACC,OAAO,CAC7B,CAEA,GAAIZ,KAAK,CAACa,IAAI,CAAE,CACd,MAAOjB,MAAK,CAACE,KAAK,CAAC,CAACgB,KAAK,CAAC,IAAI,CAAC,CAACC,GAAG,EAAE,CAACC,MAAM,EAAE,CAChD,CACA,MAAOpB,MAAK,CAACC,KAAK,CAAC,CAACiB,KAAK,CAAC,IAAI,CAAC,CAACC,GAAG,EAAE,CAACC,MAAM,EAAE,CAChD,CAAC,CAED,GAAMC,mBAAkB,CAAG,QAArBA,mBAAkB,CAAG,KAAA,CAMrB,CANsB,GAC1BjB,MAAK,CAKN,KAAA,CALCA,KAAK,CACLkB,MAAAA,CAID,KAAA,CAJCA,MAAAA,CAKA,GAAIlB,KAAK,CAACG,IAAI,CAAE,CACd,GAAIe,MAAM,CAAC,WAAW,CAAC,CAAE,CACvB,MAAOlB,MAAK,CAACW,MAAM,CAACQ,cAAc,CACpC,CACA,GAAID,MAAM,CAAC,UAAU,CAAC,CAAE,CACtB,MAAOlB,MAAK,CAACW,MAAM,CAACS,OAAO,CAC7B,CACF,CACA,MAAOX,UAAS,CAClB,CAAC,CAED,MAAO,IAAMY,cAAa,CAAG,QAAhBA,cAAa,CAAG,KAAA,CAMvB,CANwB,GAC5BrB,MAAK,CAKN,KAAA,CALCA,KAAK,CACLsB,IAAAA,CAID,KAAA,CAJCA,IAAAA,CAKA,GAAMJ,OAAM,CAAIK,QAAVL,OAAM,CAAIK,aAAuB,CAAK,CAC1C,MAAOD,KAAI,GAAKC,aAAa,CAC/B,CAAC,CAED,MAAO,CACLC,eAAe,CAAEP,kBAAkB,CAAC,CAClCjB,KAAK,CAALA,KAAK,CACLkB,MAAAA,CAAAA,MACF,CAAC,CAAC,CACFO,WAAW,CAAEf,cAAc,CAAC,CAAEV,KAAAA,CAAAA,KAAM,CAAC,CACvC,CAAC,CACH,CAAC","sourcesContent":["import color from 'color';\n\nimport { black, white } from '../../styles/themes/v2/colors';\nimport type { InternalTheme } from '../../types';\n\ntype CardMode = 'elevated' | 'outlined' | 'contained';\n\nexport const getCardCoverStyle = ({\n  theme,\n  index,\n  total,\n}: {\n  theme: InternalTheme;\n  index?: number;\n  total?: number;\n}) => {\n  const { isV3, roundness } = theme;\n\n  if (isV3) {\n    return {\n      borderRadius: 3 * roundness,\n    };\n  }\n\n  if (index === 0) {\n    if (total === 1) {\n      return {\n        borderRadius: roundness,\n      };\n    }\n\n    return {\n      borderTopLeftRadius: roundness,\n      borderTopRightRadius: roundness,\n    };\n  }\n\n  if (typeof total === 'number' && index === total - 1) {\n    return {\n      borderBottomLeftRadius: roundness,\n    };\n  }\n\n  return undefined;\n};\n\nconst getBorderColor = ({ theme }: { theme: InternalTheme }) => {\n  if (theme.isV3) {\n    return theme.colors.outline;\n  }\n\n  if (theme.dark) {\n    return color(white).alpha(0.12).rgb().string();\n  }\n  return color(black).alpha(0.12).rgb().string();\n};\n\nconst getBackgroundColor = ({\n  theme,\n  isMode,\n}: {\n  theme: InternalTheme;\n  isMode: (mode: CardMode) => boolean;\n}) => {\n  if (theme.isV3) {\n    if (isMode('contained')) {\n      return theme.colors.surfaceVariant;\n    }\n    if (isMode('outlined')) {\n      return theme.colors.surface;\n    }\n  }\n  return undefined;\n};\n\nexport const getCardColors = ({\n  theme,\n  mode,\n}: {\n  theme: InternalTheme;\n  mode: CardMode;\n}) => {\n  const isMode = (modeToCompare: CardMode) => {\n    return mode === modeToCompare;\n  };\n\n  return {\n    backgroundColor: getBackgroundColor({\n      theme,\n      isMode,\n    }),\n    borderColor: getBorderColor({ theme }),\n  };\n};\n"]},"metadata":{},"sourceType":"module"}