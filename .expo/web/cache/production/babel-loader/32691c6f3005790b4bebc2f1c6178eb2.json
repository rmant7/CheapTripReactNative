{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"accessibilityLabel\"];function _extends(){_extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import*as React from'react';import AppbarAction from\"./AppbarAction\";import AppbarBackIcon from\"./AppbarBackIcon\";var AppbarBackAction=React.forwardRef(function(_ref,ref){var _ref$accessibilityLab=_ref.accessibilityLabel,accessibilityLabel=_ref$accessibilityLab===void 0?'Back':_ref$accessibilityLab,rest=_objectWithoutProperties(_ref,_excluded);return React.createElement(AppbarAction,_extends({accessibilityLabel:accessibilityLabel},rest,{icon:AppbarBackIcon,isLeading:true,ref:ref}));});AppbarBackAction.displayName='Appbar.BackAction';export default AppbarBackAction;export{AppbarBackAction};","map":{"version":3,"mappings":"qaAAA,MAAO,GAAKA,MAAK,KAAM,OAAO,CAS9B,MAAOC,aAAY,sBACnB,MAAOC,eAAc,wBAoDrB,GAAMC,iBAAgB,CAAGH,KAAK,CAACI,UAAU,CACvC,cAAkDC,GAAG,4BAALC,KAA7CC,kBAAkB,CAAlBA,kBAAkB,gCAAG,MAAM,uBAAKC,8BAAaF,sBAC9CN,qBAACC,YAAY,WACXM,kBAAkB,CAAEA,kBAAmB,EACnCC,IAAI,EACRC,IAAI,CAAEP,cAAe,CACrBQ,SAAS,MACTL,GAAG,CAAEA,GAAI,GACT,EACH,CACF,CAEDF,gBAAgB,CAACQ,WAAW,CAAG,mBAAmB,CAElD,cAAeR,iBAAgB,CAG/B,OAASA,gBAAgB","names":["React","AppbarAction","AppbarBackIcon","AppbarBackAction","forwardRef","ref","_ref","accessibilityLabel","rest","icon","isLeading","displayName"],"sources":["AppbarBackAction.tsx"],"sourcesContent":["import * as React from 'react';\nimport type {\n  GestureResponderEvent,\n  StyleProp,\n  ViewStyle,\n  View,\n} from 'react-native';\n\nimport type { $Omit } from './../../types';\nimport AppbarAction from './AppbarAction';\nimport AppbarBackIcon from './AppbarBackIcon';\n\nexport type Props = $Omit<\n  React.ComponentPropsWithoutRef<typeof AppbarAction>,\n  'icon'\n> & {\n  /**\n   *  Custom color for back icon.\n   */\n  color?: string;\n  /**\n   * Optional icon size.\n   */\n  size?: number;\n  /**\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  style?: StyleProp<ViewStyle>;\n  ref?: React.RefObject<View>;\n};\n\n/**\n * A component used to display a back button in the appbar.\n *\n * <div class=\"screenshots\">\n *   <img class=\"small\" src=\"screenshots/appbar-backaction-android.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Appbar } from 'react-native-paper';\n *\n *\n * const MyComponent = () => (\n *     <Appbar.Header>\n *       <Appbar.BackAction onPress={() => {}} />\n *     </Appbar.Header>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst AppbarBackAction = React.forwardRef<View, Props>(\n  ({ accessibilityLabel = 'Back', ...rest }: Props, ref) => (\n    <AppbarAction\n      accessibilityLabel={accessibilityLabel}\n      {...rest}\n      icon={AppbarBackIcon}\n      isLeading\n      ref={ref}\n    />\n  )\n);\n\nAppbarBackAction.displayName = 'Appbar.BackAction';\n\nexport default AppbarBackAction;\n\n// @component-docs ignore-next-line\nexport { AppbarBackAction };\n"]},"metadata":{},"sourceType":"module"}