{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"disabled\",\"onPress\",\"theme\",\"status\",\"value\",\"testID\"];function _extends(){_extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import*as React from'react';import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import View from\"react-native-web/dist/exports/View\";import{withInternalTheme}from\"../../core/theming\";import{getSelectionControlIOSColor}from\"../Checkbox/utils\";import MaterialCommunityIcon from\"../MaterialCommunityIcon\";import TouchableRipple from\"../TouchableRipple/TouchableRipple\";import{RadioButtonContext}from\"./RadioButtonGroup\";import{handlePress,isChecked}from\"./utils\";var RadioButtonIOS=function RadioButtonIOS(_ref){var disabled=_ref.disabled,onPress=_ref.onPress,theme=_ref.theme,status=_ref.status,value=_ref.value,testID=_ref.testID,rest=_objectWithoutProperties(_ref,_excluded);return React.createElement(RadioButtonContext.Consumer,null,function(context){var checked=isChecked({contextValue:context===null||context===void 0?void 0:context.value,status:status,value:value})==='checked';var _getSelectionControlI=getSelectionControlIOSColor({theme:theme,disabled:disabled,customColor:rest.color}),checkedColor=_getSelectionControlI.checkedColor,rippleColor=_getSelectionControlI.rippleColor;return React.createElement(TouchableRipple,_extends({},rest,{borderless:true,rippleColor:rippleColor,onPress:disabled?undefined:function(event){handlePress({onPress:onPress,value:value,onValueChange:context===null||context===void 0?void 0:context.onValueChange,event:event});},accessibilityRole:\"radio\",accessibilityState:{disabled:disabled,checked:checked},accessibilityLiveRegion:\"polite\",style:styles.container,testID:testID}),React.createElement(View,{style:{opacity:checked?1:0}},React.createElement(MaterialCommunityIcon,{allowFontScaling:false,name:\"check\",size:24,color:checkedColor,direction:\"ltr\"})));});};RadioButtonIOS.displayName='RadioButton.IOS';var styles=StyleSheet.create({container:{borderRadius:18,padding:6}});export default withInternalTheme(RadioButtonIOS);var RadioButtonIOSWithTheme=withInternalTheme(RadioButtonIOS);export{RadioButtonIOSWithTheme as RadioButtonIOS};","map":{"version":3,"sources":["RadioButtonIOS.tsx"],"names":["React","withInternalTheme","getSelectionControlIOSColor","MaterialCommunityIcon","TouchableRipple","RadioButtonContext","handlePress","isChecked","RadioButtonIOS","disabled","onPress","theme","status","value","testID","rest","context","checked","contextValue","checkedColor","rippleColor","customColor","color","undefined","event","onValueChange","styles","container","opacity","displayName","StyleSheet","create","borderRadius","padding","RadioButtonIOSWithTheme"],"mappings":"ucAAA,MAAO,GAAKA,MAAK,KAAM,OAAO,CAAA,sHAG9B,OAASC,iBAAiB,0BAE1B,OAASC,2BAA2B,yBACpC,MAAOC,sBAAqB,gCAC5B,MAAOC,gBAAe,0CACtB,OAASC,kBAAkB,0BAC3B,OAASC,WAAW,CAAEC,SAAS,eAiD/B,GAAMC,eAAc,CAAG,QAAjBA,eAAc,CAAG,IAAA,CAQV,CARW,GACtBC,SAAQ,CAOF,IAAA,CAPNA,QAAQ,CACRC,OAAO,CAMD,IAAA,CANNA,OAAO,CACPC,KAAK,CAKC,IAAA,CALNA,KAAK,CACLC,MAAM,CAIA,IAAA,CAJNA,MAAM,CACNC,KAAK,CAGC,IAAA,CAHNA,KAAK,CACLC,MAAM,CAEA,IAAA,CAFNA,MAAM,CACHC,IAAAA,0BACG,IAAA,YACN,MACE,MAAA,CAAA,aAAA,CAAC,kBAAkB,CAAC,QAAQ,CAAA,IAAA,CACxBC,SAAAA,OAAgC,CAAK,CACrC,GAAMC,QAAO,CACXV,SAAS,CAAC,CACRW,YAAY,CAAEF,OAAO,GAAA,IAAA,EAAPA,OAAO,GAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAPA,OAAO,CAAEH,KAAK,CAC5BD,MAAM,CAANA,MAAM,CACNC,KAAAA,CAAAA,KACF,CAAC,CAAC,GAAK,SAAS,CAElB,0BAAsCX,2BAA2B,CAAC,CAChES,KAAK,CAALA,KAAK,CACLF,QAAQ,CAARA,QAAQ,CACRY,WAAW,CAAEN,IAAI,CAACO,KACpB,CAAC,CAAC,CAJMH,YAAY,uBAAZA,YAAY,CAAEC,WAAAA,uBAAAA,WAAAA,CAMtB,MACE,MAAA,CAAA,aAAA,CAAC,eAAe,CAAA,QAAA,CAAA,CAAA,CAAA,CACVL,IAAI,CAAA,CACR,UAAU,CAAA,IAAA,CACV,WAAW,CAAEK,WAAY,CACzB,OAAO,CACLX,QAAQ,CACJc,SAAS,CACRC,SAAAA,KAAK,CAAK,CACTlB,WAAW,CAAC,CACVI,OAAO,CAAPA,OAAO,CACPG,KAAK,CAALA,KAAK,CACLY,aAAa,CAAET,OAAO,GAAA,IAAA,EAAPA,OAAO,GAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAPA,OAAO,CAAES,aAAa,CACrCD,KAAAA,CAAAA,KACF,CAAC,CAAC,CACJ,CACL,CACD,iBAAiB,CAAC,OAAO,CACzB,kBAAkB,CAAE,CAAEf,QAAQ,CAARA,QAAQ,CAAEQ,OAAAA,CAAAA,OAAQ,CAAE,CAC1C,uBAAuB,CAAC,QAAQ,CAChC,KAAK,CAAES,MAAM,CAACC,SAAU,CACxB,MAAM,CAAEb,MAAO,CAAA,CAAA,CAEf,KAAA,CAAA,aAAA,CAAC,IAAI,CAAA,CAAC,KAAK,CAAE,CAAEc,OAAO,CAAEX,OAAO,CAAG,CAAC,CAAG,CAAE,CAAE,CAAA,CACxC,KAAA,CAAA,aAAA,CAAC,qBAAqB,CAAA,CACpB,gBAAgB,CAAE,KAAM,CACxB,IAAI,CAAC,OAAO,CACZ,IAAI,CAAE,EAAG,CACT,KAAK,CAAEE,YAAa,CACpB,SAAS,CAAC,KAAK,CAAA,CACf,CACG,CACS,CAEtB,CAAC,CAC2B,CAElC,CAAC,CAEDX,cAAc,CAACqB,WAAW,CAAG,iBAAiB,CAE9C,GAAMH,OAAM,CAAGI,UAAU,CAACC,MAAM,CAAC,CAC/BJ,SAAS,CAAE,CACTK,YAAY,CAAE,EAAE,CAChBC,OAAO,CAAE,CACX,CACF,CAAC,CAAC,CAEF,cAAehC,kBAAiB,CAACO,cAAc,CAAC,CAGhD,GAAM0B,wBAAuB,CAAGjC,iBAAiB,CAACO,cAAc,CAAC,CAEjE,OAAS0B,uBAAuB,GAAI1B,eAAc","sourcesContent":["import * as React from 'react';\nimport { GestureResponderEvent, StyleSheet, View } from 'react-native';\n\nimport { withInternalTheme } from '../../core/theming';\nimport type { $RemoveChildren, InternalTheme } from '../../types';\nimport { getSelectionControlIOSColor } from '../Checkbox/utils';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\nimport { handlePress, isChecked } from './utils';\n\nexport type Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Value of the radio button\n   */\n  value: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: InternalTheme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n/**\n * Radio buttons allow the selection a single option from a set.\n * This component follows platform guidelines for iOS, but can be used\n * on any platform.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/radio-enabled.ios.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/radio-disabled.ios.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nconst RadioButtonIOS = ({\n  disabled,\n  onPress,\n  theme,\n  status,\n  value,\n  testID,\n  ...rest\n}: Props) => {\n  return (\n    <RadioButtonContext.Consumer>\n      {(context?: RadioButtonContextType) => {\n        const checked =\n          isChecked({\n            contextValue: context?.value,\n            status,\n            value,\n          }) === 'checked';\n\n        const { checkedColor, rippleColor } = getSelectionControlIOSColor({\n          theme,\n          disabled,\n          customColor: rest.color,\n        });\n\n        return (\n          <TouchableRipple\n            {...rest}\n            borderless\n            rippleColor={rippleColor}\n            onPress={\n              disabled\n                ? undefined\n                : (event) => {\n                    handlePress({\n                      onPress,\n                      value,\n                      onValueChange: context?.onValueChange,\n                      event,\n                    });\n                  }\n            }\n            accessibilityRole=\"radio\"\n            accessibilityState={{ disabled, checked }}\n            accessibilityLiveRegion=\"polite\"\n            style={styles.container}\n            testID={testID}\n          >\n            <View style={{ opacity: checked ? 1 : 0 }}>\n              <MaterialCommunityIcon\n                allowFontScaling={false}\n                name=\"check\"\n                size={24}\n                color={checkedColor}\n                direction=\"ltr\"\n              />\n            </View>\n          </TouchableRipple>\n        );\n      }}\n    </RadioButtonContext.Consumer>\n  );\n};\n\nRadioButtonIOS.displayName = 'RadioButton.IOS';\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6,\n  },\n});\n\nexport default withInternalTheme(RadioButtonIOS);\n\n// @component-docs ignore-next-line\nconst RadioButtonIOSWithTheme = withInternalTheme(RadioButtonIOS);\n// @component-docs ignore-next-line\nexport { RadioButtonIOSWithTheme as RadioButtonIOS };\n"]},"metadata":{},"sourceType":"module"}