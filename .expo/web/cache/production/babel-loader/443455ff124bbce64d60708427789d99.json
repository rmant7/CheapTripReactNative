{"ast":null,"code":"import*as React from'react';import useNavigation from\"./useNavigation\";export default function useFocusEffect(effect){var navigation=useNavigation();if(arguments[1]!==undefined){var message=\"You passed a second argument to 'useFocusEffect', but it only accepts one argument. \"+\"If you want to pass a dependency array, you can use 'React.useCallback':\\n\\n\"+'useFocusEffect(\\n'+'  React.useCallback(() => {\\n'+'    // Your code here\\n'+'  }, [depA, depB])\\n'+');\\n\\n'+'See usage guide: https://reactnavigation.org/docs/use-focus-effect';console.error(message);}React.useEffect(function(){var isFocused=false;var cleanup;var callback=function callback(){var destroy=effect();if(destroy===undefined||typeof destroy==='function'){return destroy;}if(process.env.NODE_ENV!=='production'){var _message='An effect function must not return anything besides a function, which is used for clean-up.';if(destroy===null){_message+=\" You returned 'null'. If your effect does not require clean-up, return 'undefined' (or nothing).\";}else if(typeof destroy.then==='function'){_message+=\"\\n\\nIt looks like you wrote 'useFocusEffect(async () => ...)' or returned a Promise. \"+'Instead, write the async function inside your effect '+'and call it immediately:\\n\\n'+'useFocusEffect(\\n'+'  React.useCallback(() => {\\n'+'    async function fetchData() {\\n'+'      // You can await here\\n'+'      const response = await MyAPI.getData(someId);\\n'+'      // ...\\n'+'    }\\n\\n'+'    fetchData();\\n'+'  }, [someId])\\n'+');\\n\\n'+'See usage guide: https://reactnavigation.org/docs/use-focus-effect';}else{_message+=\" You returned '\"+JSON.stringify(destroy)+\"'.\";}console.error(_message);}};if(navigation.isFocused()){cleanup=callback();isFocused=true;}var unsubscribeFocus=navigation.addListener('focus',function(){if(isFocused){return;}if(cleanup!==undefined){cleanup();}cleanup=callback();isFocused=true;});var unsubscribeBlur=navigation.addListener('blur',function(){if(cleanup!==undefined){cleanup();}cleanup=undefined;isFocused=false;});return function(){if(cleanup!==undefined){cleanup();}unsubscribeFocus();unsubscribeBlur();};},[effect,navigation]);}","map":{"version":3,"mappings":"AAAA,MAAO,GAAKA,MAAK,KAAM,OAAO,CAE9B,MAAOC,cAAa,uBAWpB,cAAe,SAASC,eAAc,CAACC,MAAsB,CAAE,CAC7D,GAAMC,WAAU,CAAGH,aAAa,EAAE,CAElC,GAAII,SAAS,CAAC,CAAC,CAAC,GAAKC,SAAS,CAAE,CAC9B,GAAMC,QAAO,CACX,sFAAsF,CACtF,8EAA8E,CAC9E,mBAAmB,CACnB,+BAA+B,CAC/B,yBAAyB,CACzB,sBAAsB,CACtB,QAAQ,CACR,oEAAoE,CAEtEC,OAAO,CAACC,KAAK,CAACF,OAAO,CAAC,CACxB,CAEAP,KAAK,CAACU,SAAS,CAAC,UAAM,CACpB,GAAIC,UAAS,CAAG,KAAK,CACrB,GAAIC,QAAwC,CAE5C,GAAMC,SAAQ,CAAG,QAAXA,SAAQ,EAAS,CACrB,GAAMC,QAAO,CAAGX,MAAM,EAAE,CAExB,GAAIW,OAAO,GAAKR,SAAS,EAAI,MAAOQ,QAAO,GAAK,UAAU,CAAE,CAC1D,MAAOA,QAAO,CAChB,CAEA,GAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,GAAK,YAAY,CAAE,CACzC,GAAIV,SAAO,CACT,6FAA6F,CAE/F,GAAIO,OAAO,GAAK,IAAI,CAAE,CACpBP,QAAO,EACL,kGAAkG,CACtG,CAAC,IAAM,IAAI,MAAQO,QAAO,CAASI,IAAI,GAAK,UAAU,CAAE,CACtDX,QAAO,EACL,uFAAuF,CACvF,uDAAuD,CACvD,8BAA8B,CAC9B,mBAAmB,CACnB,+BAA+B,CAC/B,oCAAoC,CACpC,+BAA+B,CAC/B,uDAAuD,CACvD,gBAAgB,CAChB,WAAW,CACX,oBAAoB,CACpB,kBAAkB,CAClB,QAAQ,CACR,oEAAoE,CACxE,CAAC,IAAM,CACLA,QAAO,oBAAsBY,IAAI,CAACC,SAAS,CAACN,OAAO,CAAE,KAAG,CAC1D,CAEAN,OAAO,CAACC,KAAK,CAACF,QAAO,CAAC,CACxB,CACF,CAAC,CAGD,GAAIH,UAAU,CAACO,SAAS,EAAE,CAAE,CAC1BC,OAAO,CAAGC,QAAQ,EAAE,CACpBF,SAAS,CAAG,IAAI,CAClB,CAEA,GAAMU,iBAAgB,CAAGjB,UAAU,CAACkB,WAAW,CAAC,OAAO,CAAE,UAAM,CAG7D,GAAIX,SAAS,CAAE,CACb,OACF,CAEA,GAAIC,OAAO,GAAKN,SAAS,CAAE,CACzBM,OAAO,EAAE,CACX,CAEAA,OAAO,CAAGC,QAAQ,EAAE,CACpBF,SAAS,CAAG,IAAI,CAClB,CAAC,CAAC,CAEF,GAAMY,gBAAe,CAAGnB,UAAU,CAACkB,WAAW,CAAC,MAAM,CAAE,UAAM,CAC3D,GAAIV,OAAO,GAAKN,SAAS,CAAE,CACzBM,OAAO,EAAE,CACX,CAEAA,OAAO,CAAGN,SAAS,CACnBK,SAAS,CAAG,KAAK,CACnB,CAAC,CAAC,CAEF,MAAO,WAAM,CACX,GAAIC,OAAO,GAAKN,SAAS,CAAE,CACzBM,OAAO,EAAE,CACX,CAEAS,gBAAgB,EAAE,CAClBE,eAAe,EAAE,CACnB,CAAC,CACH,CAAC,CAAE,CAACpB,MAAM,CAAEC,UAAU,CAAC,CAAC,CAC1B","names":["React","useNavigation","useFocusEffect","effect","navigation","arguments","undefined","message","console","error","useEffect","isFocused","cleanup","callback","destroy","process","env","NODE_ENV","then","JSON","stringify","unsubscribeFocus","addListener","unsubscribeBlur"],"sourceRoot":"../../src","sources":["useFocusEffect.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}