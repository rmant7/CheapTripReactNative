{"ast":null,"code":"import React from'react';import{isExperimentalWebImplementationEnabled}from\"./EnableExperimentalWebImplementation\";import InteractionManager from\"./web/tools/InteractionManager\";import NodeManager from\"./web/tools/NodeManager\";import PanGestureHandler from\"./web/handlers/PanGestureHandler\";import TapGestureHandler from\"./web/handlers/TapGestureHandler\";import LongPressGestureHandler from\"./web/handlers/LongPressGestureHandler\";import PinchGestureHandler from\"./web/handlers/PinchGestureHandler\";import RotationGestureHandler from\"./web/handlers/RotationGestureHandler\";import FlingGestureHandler from\"./web/handlers/FlingGestureHandler\";import NativeViewGestureHandler from\"./web/handlers/NativeViewGestureHandler\";import ManualGestureHandler from\"./web/handlers/ManualGestureHandler\";import*as HammerNodeManager from\"./web_hammer/NodeManager\";import HammerNativeViewGestureHandler from\"./web_hammer/NativeViewGestureHandler\";import HammerPanGestureHandler from\"./web_hammer/PanGestureHandler\";import HammerTapGestureHandler from\"./web_hammer/TapGestureHandler\";import HammerLongPressGestureHandler from\"./web_hammer/LongPressGestureHandler\";import HammerPinchGestureHandler from\"./web_hammer/PinchGestureHandler\";import HammerRotationGestureHandler from\"./web_hammer/RotationGestureHandler\";import HammerFlingGestureHandler from\"./web_hammer/FlingGestureHandler\";export var Gestures={NativeViewGestureHandler:NativeViewGestureHandler,PanGestureHandler:PanGestureHandler,TapGestureHandler:TapGestureHandler,LongPressGestureHandler:LongPressGestureHandler,PinchGestureHandler:PinchGestureHandler,RotationGestureHandler:RotationGestureHandler,FlingGestureHandler:FlingGestureHandler,ManualGestureHandler:ManualGestureHandler};export var HammerGestures={NativeViewGestureHandler:HammerNativeViewGestureHandler,PanGestureHandler:HammerPanGestureHandler,TapGestureHandler:HammerTapGestureHandler,LongPressGestureHandler:HammerLongPressGestureHandler,PinchGestureHandler:HammerPinchGestureHandler,RotationGestureHandler:HammerRotationGestureHandler,FlingGestureHandler:HammerFlingGestureHandler};export default{handleSetJSResponder:function handleSetJSResponder(tag,blockNativeResponder){console.warn('handleSetJSResponder: ',tag,blockNativeResponder);},handleClearJSResponder:function handleClearJSResponder(){console.warn('handleClearJSResponder: ');},createGestureHandler:function createGestureHandler(handlerName,handlerTag,config){if(isExperimentalWebImplementationEnabled()){if(!(handlerName in Gestures)){throw new Error(\"react-native-gesture-handler: \"+handlerName+\" is not supported on web.\");}var GestureClass=Gestures[handlerName];NodeManager.createGestureHandler(handlerTag,new GestureClass());InteractionManager.getInstance().configureInteractions(NodeManager.getHandler(handlerTag),config);}else{if(!(handlerName in HammerGestures)){throw new Error(\"react-native-gesture-handler: \"+handlerName+\" is not supported on web.\");}var _GestureClass=HammerGestures[handlerName];HammerNodeManager.createGestureHandler(handlerTag,new _GestureClass());}this.updateGestureHandler(handlerTag,config);},attachGestureHandler:function attachGestureHandler(handlerTag,newView,_actionType,propsRef){if(!(newView instanceof HTMLElement||newView instanceof React.Component)){return;}if(isExperimentalWebImplementationEnabled()){NodeManager.getHandler(handlerTag).init(newView,propsRef);}else{HammerNodeManager.getHandler(handlerTag).setView(newView,propsRef);}},updateGestureHandler:function updateGestureHandler(handlerTag,newConfig){if(isExperimentalWebImplementationEnabled()){NodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);InteractionManager.getInstance().configureInteractions(NodeManager.getHandler(handlerTag),newConfig);}else{HammerNodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);}},getGestureHandlerNode:function getGestureHandlerNode(handlerTag){if(isExperimentalWebImplementationEnabled()){return NodeManager.getHandler(handlerTag);}else{return HammerNodeManager.getHandler(handlerTag);}},dropGestureHandler:function dropGestureHandler(handlerTag){if(isExperimentalWebImplementationEnabled()){NodeManager.dropGestureHandler(handlerTag);}else{HammerNodeManager.dropGestureHandler(handlerTag);}},flushOperations:function flushOperations(){}};","map":{"version":3,"mappings":"AAAA,MAAOA,MAAP,KAAkB,OAAlB,CAGA,OAASC,sCAAT,6CAGA,MAAOC,mBAAP,sCACA,MAAOC,YAAP,+BACA,MAAOC,kBAAP,wCACA,MAAOC,kBAAP,wCACA,MAAOC,wBAAP,8CACA,MAAOC,oBAAP,0CACA,MAAOC,uBAAP,6CACA,MAAOC,oBAAP,0CACA,MAAOC,yBAAP,+CACA,MAAOC,qBAAP,2CAGA,MAAO,GAAKC,kBAAZ,gCACA,MAAOC,+BAAP,6CACA,MAAOC,wBAAP,sCACA,MAAOC,wBAAP,sCACA,MAAOC,8BAAP,4CACA,MAAOC,0BAAP,wCACA,MAAOC,6BAAP,2CACA,MAAOC,0BAAP,wCAGA,MAAO,IAAMC,SAAQ,CAAG,CACtBV,wBADsB,CACtBA,wBADsB,CAEtBN,iBAFsB,CAEtBA,iBAFsB,CAGtBC,iBAHsB,CAGtBA,iBAHsB,CAItBC,uBAJsB,CAItBA,uBAJsB,CAKtBC,mBALsB,CAKtBA,mBALsB,CAMtBC,sBANsB,CAMtBA,sBANsB,CAOtBC,mBAPsB,CAOtBA,mBAPsB,CAQtBE,yCARsB,CAAjB,CAWP,MAAO,IAAMU,eAAc,CAAG,CAC5BX,wBAAwB,CAAEG,8BADE,CAE5BT,iBAAiB,CAAEU,uBAFS,CAG5BT,iBAAiB,CAAEU,uBAHS,CAI5BT,uBAAuB,CAAEU,6BAJG,CAK5BT,mBAAmB,CAAEU,yBALO,CAM5BT,sBAAsB,CAAEU,4BANI,CAO5BT,mBAAmB,CAAEU,yBAPO,CAAvB,CAUP,cAAe,CACbG,oBAAoB,+BAACC,GAAD,CAAcC,oBAAd,CAA6C,CAC/DC,OAAO,CAACC,IAAR,CAAa,wBAAb,CAAuCH,GAAvC,CAA4CC,oBAA5C,EACD,CAHY,CAIbG,sBAAsB,kCAAG,CACvBF,OAAO,CAACC,IAAR,CAAa,0BAAb,EACD,CANY,CAObE,oBAAoB,+BAClBC,WADkB,CAElBC,UAFkB,CAGlBC,MAHkB,CAIlB,CACA,GAAI9B,sCAAsC,EAA1C,CAA8C,CAC5C,GAAI,EAAE4B,WAAW,GAAIT,SAAjB,CAAJ,CAAgC,CAC9B,KAAM,IAAIY,MAAJ,kCAC6BH,WAAY,6BAD/C,CAGD,CAED,GAAMI,aAAY,CAAGb,QAAQ,CAACS,WAAD,CAA7B,CACA1B,WAAW,CAACyB,oBAAZ,CAAiCE,UAAjC,CAA6C,GAAIG,aAAJ,EAA7C,EACA/B,kBAAkB,CAACgC,WAAnB,GAAiCC,qBAAjC,CACEhC,WAAW,CAACiC,UAAZ,CAAuBN,UAAvB,CADF,CAEEC,MAFF,EAID,CAbD,IAaO,CACL,GAAI,EAAEF,WAAW,GAAIR,eAAjB,CAAJ,CAAsC,CACpC,KAAM,IAAIW,MAAJ,kCAC6BH,WAAY,6BAD/C,CAGD,CAID,GAAMI,cAAY,CAAGZ,cAAc,CAACQ,WAAD,CAAnC,CAEAjB,iBAAiB,CAACgB,oBAAlB,CAAuCE,UAAvC,CAAmD,GAAIG,cAAJ,EAAnD,EACD,CAED,KAAKI,oBAAL,CAA0BP,UAA1B,CAAsCC,MAAtC,EACD,CAxCY,CAyCbO,oBAAoB,+BAClBR,UADkB,CAGlBS,OAHkB,CAIlBC,WAJkB,CAKlBC,QALkB,CAMlB,CACA,GACE,EAAEF,OAAO,WAAYG,YAAnB,EAAkCH,OAAO,WAAYvC,MAAK,CAAC2C,SAA7D,CADF,CAEE,CACA,OACD,CAED,GAAI1C,sCAAsC,EAA1C,CAA8C,CAE5CE,WAAW,CAACiC,UAAZ,CAAuBN,UAAvB,EAAmCc,IAAnC,CAAwCL,OAAxC,CAAiDE,QAAjD,EACD,CAHD,IAGO,CAEL7B,iBAAiB,CAACwB,UAAlB,CAA6BN,UAA7B,EAAyCe,OAAzC,CAAiDN,OAAjD,CAA0DE,QAA1D,EACD,CACF,CA7DY,CA8DbJ,oBAAoB,+BAACP,UAAD,CAAqBgB,SAArB,CAAwC,CAC1D,GAAI7C,sCAAsC,EAA1C,CAA8C,CAC5CE,WAAW,CAACiC,UAAZ,CAAuBN,UAAvB,EAAmCiB,mBAAnC,CAAuDD,SAAvD,EAEA5C,kBAAkB,CAACgC,WAAnB,GAAiCC,qBAAjC,CACEhC,WAAW,CAACiC,UAAZ,CAAuBN,UAAvB,CADF,CAEEgB,SAFF,EAID,CAPD,IAOO,CACLlC,iBAAiB,CAACwB,UAAlB,CAA6BN,UAA7B,EAAyCiB,mBAAzC,CAA6DD,SAA7D,EACD,CACF,CAzEY,CA0EbE,qBAAqB,gCAAClB,UAAD,CAAqB,CACxC,GAAI7B,sCAAsC,EAA1C,CAA8C,CAC5C,MAAOE,YAAW,CAACiC,UAAZ,CAAuBN,UAAvB,CAAP,CACD,CAFD,IAEO,CACL,MAAOlB,kBAAiB,CAACwB,UAAlB,CAA6BN,UAA7B,CAAP,CACD,CACF,CAhFY,CAiFbmB,kBAAkB,6BAACnB,UAAD,CAAqB,CACrC,GAAI7B,sCAAsC,EAA1C,CAA8C,CAC5CE,WAAW,CAAC8C,kBAAZ,CAA+BnB,UAA/B,EACD,CAFD,IAEO,CACLlB,iBAAiB,CAACqC,kBAAlB,CAAqCnB,UAArC,EACD,CACF,CAvFY,CAyFboB,eAAe,2BAAG,CAAE,CAzFP,CAAf","names":["React","isExperimentalWebImplementationEnabled","InteractionManager","NodeManager","PanGestureHandler","TapGestureHandler","LongPressGestureHandler","PinchGestureHandler","RotationGestureHandler","FlingGestureHandler","NativeViewGestureHandler","ManualGestureHandler","HammerNodeManager","HammerNativeViewGestureHandler","HammerPanGestureHandler","HammerTapGestureHandler","HammerLongPressGestureHandler","HammerPinchGestureHandler","HammerRotationGestureHandler","HammerFlingGestureHandler","Gestures","HammerGestures","handleSetJSResponder","tag","blockNativeResponder","console","warn","handleClearJSResponder","createGestureHandler","handlerName","handlerTag","config","Error","GestureClass","getInstance","configureInteractions","getHandler","updateGestureHandler","attachGestureHandler","newView","_actionType","propsRef","HTMLElement","Component","init","setView","newConfig","updateGestureConfig","getGestureHandlerNode","dropGestureHandler","flushOperations"],"sources":["RNGestureHandlerModule.web.ts"],"sourcesContent":["import React from 'react';\n\nimport { ActionType } from './ActionType';\nimport { isExperimentalWebImplementationEnabled } from './EnableExperimentalWebImplementation';\n\n//GestureHandlers\nimport InteractionManager from './web/tools/InteractionManager';\nimport NodeManager from './web/tools/NodeManager';\nimport PanGestureHandler from './web/handlers/PanGestureHandler';\nimport TapGestureHandler from './web/handlers/TapGestureHandler';\nimport LongPressGestureHandler from './web/handlers/LongPressGestureHandler';\nimport PinchGestureHandler from './web/handlers/PinchGestureHandler';\nimport RotationGestureHandler from './web/handlers/RotationGestureHandler';\nimport FlingGestureHandler from './web/handlers/FlingGestureHandler';\nimport NativeViewGestureHandler from './web/handlers/NativeViewGestureHandler';\nimport ManualGestureHandler from './web/handlers/ManualGestureHandler';\n\n//Hammer Handlers\nimport * as HammerNodeManager from './web_hammer/NodeManager';\nimport HammerNativeViewGestureHandler from './web_hammer/NativeViewGestureHandler';\nimport HammerPanGestureHandler from './web_hammer/PanGestureHandler';\nimport HammerTapGestureHandler from './web_hammer/TapGestureHandler';\nimport HammerLongPressGestureHandler from './web_hammer/LongPressGestureHandler';\nimport HammerPinchGestureHandler from './web_hammer/PinchGestureHandler';\nimport HammerRotationGestureHandler from './web_hammer/RotationGestureHandler';\nimport HammerFlingGestureHandler from './web_hammer/FlingGestureHandler';\nimport { Config } from './web/interfaces';\n\nexport const Gestures = {\n  NativeViewGestureHandler,\n  PanGestureHandler,\n  TapGestureHandler,\n  LongPressGestureHandler,\n  PinchGestureHandler,\n  RotationGestureHandler,\n  FlingGestureHandler,\n  ManualGestureHandler,\n};\n\nexport const HammerGestures = {\n  NativeViewGestureHandler: HammerNativeViewGestureHandler,\n  PanGestureHandler: HammerPanGestureHandler,\n  TapGestureHandler: HammerTapGestureHandler,\n  LongPressGestureHandler: HammerLongPressGestureHandler,\n  PinchGestureHandler: HammerPinchGestureHandler,\n  RotationGestureHandler: HammerRotationGestureHandler,\n  FlingGestureHandler: HammerFlingGestureHandler,\n};\n\nexport default {\n  handleSetJSResponder(tag: number, blockNativeResponder: boolean) {\n    console.warn('handleSetJSResponder: ', tag, blockNativeResponder);\n  },\n  handleClearJSResponder() {\n    console.warn('handleClearJSResponder: ');\n  },\n  createGestureHandler<T>(\n    handlerName: keyof typeof Gestures,\n    handlerTag: number,\n    config: T\n  ) {\n    if (isExperimentalWebImplementationEnabled()) {\n      if (!(handlerName in Gestures)) {\n        throw new Error(\n          `react-native-gesture-handler: ${handlerName} is not supported on web.`\n        );\n      }\n\n      const GestureClass = Gestures[handlerName];\n      NodeManager.createGestureHandler(handlerTag, new GestureClass());\n      InteractionManager.getInstance().configureInteractions(\n        NodeManager.getHandler(handlerTag),\n        config as unknown as Config\n      );\n    } else {\n      if (!(handlerName in HammerGestures)) {\n        throw new Error(\n          `react-native-gesture-handler: ${handlerName} is not supported on web.`\n        );\n      }\n\n      // @ts-ignore If it doesn't exist, the error is thrown\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      const GestureClass = HammerGestures[handlerName];\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      HammerNodeManager.createGestureHandler(handlerTag, new GestureClass());\n    }\n\n    this.updateGestureHandler(handlerTag, config as unknown as Config);\n  },\n  attachGestureHandler(\n    handlerTag: number,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    newView: any,\n    _actionType: ActionType,\n    propsRef: React.RefObject<unknown>\n  ) {\n    if (\n      !(newView instanceof HTMLElement || newView instanceof React.Component)\n    ) {\n      return;\n    }\n\n    if (isExperimentalWebImplementationEnabled()) {\n      //@ts-ignore Types should be HTMLElement or React.Component\n      NodeManager.getHandler(handlerTag).init(newView, propsRef);\n    } else {\n      //@ts-ignore Types should be HTMLElement or React.Component\n      HammerNodeManager.getHandler(handlerTag).setView(newView, propsRef);\n    }\n  },\n  updateGestureHandler(handlerTag: number, newConfig: Config) {\n    if (isExperimentalWebImplementationEnabled()) {\n      NodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n\n      InteractionManager.getInstance().configureInteractions(\n        NodeManager.getHandler(handlerTag),\n        newConfig\n      );\n    } else {\n      HammerNodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n    }\n  },\n  getGestureHandlerNode(handlerTag: number) {\n    if (isExperimentalWebImplementationEnabled()) {\n      return NodeManager.getHandler(handlerTag);\n    } else {\n      return HammerNodeManager.getHandler(handlerTag);\n    }\n  },\n  dropGestureHandler(handlerTag: number) {\n    if (isExperimentalWebImplementationEnabled()) {\n      NodeManager.dropGestureHandler(handlerTag);\n    } else {\n      HammerNodeManager.dropGestureHandler(handlerTag);\n    }\n  },\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  flushOperations() {},\n};\n"]},"metadata":{},"sourceType":"module"}