{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"icon\",\"iconColor\",\"containerColor\",\"size\",\"accessibilityLabel\",\"disabled\",\"onPress\",\"selected\",\"animated\",\"mode\",\"style\"];function _extends(){_extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import*as React from'react';import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import{useInternalTheme}from\"../../core/theming\";import CrossFadeIcon from\"../CrossFadeIcon\";import Icon from\"../Icon\";import Surface from\"../Surface\";import TouchableRipple from\"../TouchableRipple/TouchableRipple\";import{getIconButtonColor}from\"./utils\";var PADDING=8;var IconButton=React.forwardRef(function(_ref,ref){var icon=_ref.icon,customIconColor=_ref.iconColor,customContainerColor=_ref.containerColor,_ref$size=_ref.size,size=_ref$size===void 0?24:_ref$size,accessibilityLabel=_ref.accessibilityLabel,disabled=_ref.disabled,onPress=_ref.onPress,_ref$selected=_ref.selected,selected=_ref$selected===void 0?false:_ref$selected,_ref$animated=_ref.animated,animated=_ref$animated===void 0?false:_ref$animated,mode=_ref.mode,style=_ref.style,rest=_objectWithoutProperties(_ref,_excluded);var theme=useInternalTheme();var isV3=theme.isV3;var IconComponent=animated?CrossFadeIcon:Icon;var _getIconButtonColor=getIconButtonColor({theme:theme,disabled:disabled,selected:selected,mode:mode,customIconColor:customIconColor,customContainerColor:customContainerColor}),iconColor=_getIconButtonColor.iconColor,rippleColor=_getIconButtonColor.rippleColor,backgroundColor=_getIconButtonColor.backgroundColor,borderColor=_getIconButtonColor.borderColor;var buttonSize=isV3?size+2*PADDING:size*1.5;var _ref2=StyleSheet.flatten(style)||{},_ref2$borderWidth=_ref2.borderWidth,borderWidth=_ref2$borderWidth===void 0?isV3&&mode==='outlined'&&!selected?1:0:_ref2$borderWidth,_ref2$borderRadius=_ref2.borderRadius,borderRadius=_ref2$borderRadius===void 0?buttonSize/2:_ref2$borderRadius;var borderStyles={borderWidth:borderWidth,borderRadius:borderRadius,borderColor:borderColor};return React.createElement(Surface,_extends({ref:ref,style:[{backgroundColor:backgroundColor,width:buttonSize,height:buttonSize},styles.container,borderStyles,!isV3&&disabled&&styles.disabled,style]},isV3&&{elevation:0}),React.createElement(TouchableRipple,_extends({borderless:true,centered:true,onPress:onPress,rippleColor:rippleColor,accessibilityLabel:accessibilityLabel,style:[styles.touchable,{borderRadius:borderRadius}],accessibilityTraits:disabled?['button','disabled']:'button',accessibilityComponentType:\"button\",accessibilityRole:\"button\",accessibilityState:{disabled:disabled},disabled:disabled,hitSlop:TouchableRipple.supported?{top:10,left:10,bottom:10,right:10}:{top:6,left:6,bottom:6,right:6}},rest),React.createElement(IconComponent,{color:iconColor,source:icon,size:size})));});var styles=StyleSheet.create({container:{overflow:'hidden',margin:6,elevation:0},touchable:{flexGrow:1,justifyContent:'center',alignItems:'center'},disabled:{opacity:0.32}});export default IconButton;","map":{"version":3,"sources":["IconButton.tsx"],"names":["React","useInternalTheme","CrossFadeIcon","Icon","Surface","TouchableRipple","getIconButtonColor","PADDING","IconButton","forwardRef","icon","iconColor","customIconColor","containerColor","customContainerColor","size","accessibilityLabel","disabled","onPress","selected","animated","mode","style","rest","ref","theme","isV3","IconComponent","rippleColor","backgroundColor","borderColor","buttonSize","borderWidth","borderRadius","StyleSheet","flatten","borderStyles","width","height","styles","container","elevation","touchable","supported","top","left","bottom","right","create","overflow","margin","flexGrow","justifyContent","alignItems","opacity"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  GestureResponderEvent,\n  StyleProp,\n  StyleSheet,\n  ViewStyle,\n  View,\n} from 'react-native';\n\nimport { useInternalTheme } from '../../core/theming';\nimport type { $RemoveChildren, ThemeProp } from '../../types';\nimport CrossFadeIcon from '../CrossFadeIcon';\nimport Icon, { IconSource } from '../Icon';\nimport Surface from '../Surface';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { getIconButtonColor } from './utils';\n\nconst PADDING = 8;\n\ntype IconButtonMode = 'outlined' | 'contained' | 'contained-tonal';\n\nexport type Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Icon to display.\n   */\n  icon: IconSource;\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Mode of the icon button. By default there is no specified mode - only pressable icon will be rendered.\n   */\n  mode?: IconButtonMode;\n  /**\n   * @renamed Renamed from 'color' to 'iconColor' in v5.x\n   * Color of the icon.\n   */\n  iconColor?: string;\n  /**\n   * Background color of the icon container.\n   */\n  containerColor?: string;\n  /**\n   * @supported Available in v5.x with theme version 3\n   * Whether icon button is selected. A selected button receives alternative combination of icon and container colors.\n   */\n  selected?: boolean;\n  /**\n   * Size of the icon.\n   */\n  size?: number;\n  /**\n   * Whether the button is disabled. A disabled button is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Whether an icon change is animated.\n   */\n  animated?: boolean;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  style?: StyleProp<ViewStyle>;\n  ref?: React.RefObject<View>;\n  /**\n   * @optional\n   */\n  theme?: ThemeProp;\n};\n\n/**\n * An icon button is a button which displays only an icon without a label.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/icon-button-1.png\" />\n *     <figcaption>Default icon button</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/icon-button-2.png\" />\n *     <figcaption>Contained icon button</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/icon-button-3.png\" />\n *     <figcaption>Contained-tonal icon button</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/icon-button-4.png\" />\n *     <figcaption>Outlined icon button</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { IconButton, MD3Colors } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <IconButton\n *     icon=\"camera\"\n *     iconColor={MD3Colors.error50}\n *     size={20}\n *     onPress={() => console.log('Pressed')}\n *   />\n * );\n *\n * export default MyComponent;\n * ```\n *\n * @extends TouchableRipple props https://callstack.github.io/react-native-paper/touchable-ripple.html\n */\nconst IconButton = React.forwardRef<View, Props>(\n  (\n    {\n      icon,\n      iconColor: customIconColor,\n      containerColor: customContainerColor,\n      size = 24,\n      accessibilityLabel,\n      disabled,\n      onPress,\n      selected = false,\n      animated = false,\n      mode,\n      style,\n      ...rest\n    }: Props,\n    ref\n  ) => {\n    const theme = useInternalTheme();\n    const { isV3 } = theme;\n\n    const IconComponent = animated ? CrossFadeIcon : Icon;\n\n    const { iconColor, rippleColor, backgroundColor, borderColor } =\n      getIconButtonColor({\n        theme,\n        disabled,\n        selected,\n        mode,\n        customIconColor,\n        customContainerColor,\n      });\n\n    const buttonSize = isV3 ? size + 2 * PADDING : size * 1.5;\n\n    const {\n      borderWidth = isV3 && mode === 'outlined' && !selected ? 1 : 0,\n      borderRadius = buttonSize / 2,\n    } = (StyleSheet.flatten(style) || {}) as ViewStyle;\n\n    const borderStyles = {\n      borderWidth,\n      borderRadius,\n      borderColor,\n    };\n\n    return (\n      <Surface\n        ref={ref}\n        style={\n          [\n            {\n              backgroundColor,\n              width: buttonSize,\n              height: buttonSize,\n            },\n            styles.container,\n            borderStyles,\n            !isV3 && disabled && styles.disabled,\n            style,\n          ] as StyleProp<ViewStyle>\n        }\n        {...(isV3 && { elevation: 0 })}\n      >\n        <TouchableRipple\n          borderless\n          centered\n          onPress={onPress}\n          rippleColor={rippleColor}\n          accessibilityLabel={accessibilityLabel}\n          style={[styles.touchable, { borderRadius }]}\n          // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n          accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n          accessibilityComponentType=\"button\"\n          accessibilityRole=\"button\"\n          accessibilityState={{ disabled }}\n          disabled={disabled}\n          hitSlop={\n            TouchableRipple.supported\n              ? { top: 10, left: 10, bottom: 10, right: 10 }\n              : { top: 6, left: 6, bottom: 6, right: 6 }\n          }\n          {...rest}\n        >\n          <IconComponent color={iconColor} source={icon} size={size} />\n        </TouchableRipple>\n      </Surface>\n    );\n  }\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    overflow: 'hidden',\n    margin: 6,\n    elevation: 0,\n  },\n  touchable: {\n    flexGrow: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  disabled: {\n    opacity: 0.32,\n  },\n});\n\nexport default IconButton;\n"]},"metadata":{},"sourceType":"module"}