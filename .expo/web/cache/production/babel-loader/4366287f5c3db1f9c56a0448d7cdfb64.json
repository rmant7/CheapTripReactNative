{"ast":null,"code":"import _defineProperty2 from\"@babel/runtime/helpers/defineProperty\";import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _assertThisInitialized from\"@babel/runtime/helpers/assertThisInitialized\";import _inherits from\"@babel/runtime/helpers/inherits\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty2(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}import*as React from'react';import{Component}from'react';import invariant from'invariant';import Animated from\"react-native-web/dist/exports/Animated\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import View from\"react-native-web/dist/exports/View\";import Keyboard from\"react-native-web/dist/exports/Keyboard\";import StatusBar from\"react-native-web/dist/exports/StatusBar\";import I18nManager from\"react-native-web/dist/exports/I18nManager\";import{PanGestureHandler}from\"../handlers/PanGestureHandler\";import{TapGestureHandler}from\"../handlers/TapGestureHandler\";import{State}from\"../State\";var DRAG_TOSS=0.05;var IDLE='Idle';var DRAGGING='Dragging';var SETTLING='Settling';var DrawerLayout=function(_Component){_inherits(DrawerLayout,_Component);var _super=_createSuper(DrawerLayout);function DrawerLayout(_props){var _this;_classCallCheck(this,DrawerLayout);_this=_super.call(this,_props);_defineProperty(_assertThisInitialized(_this),\"openValue\",void 0);_defineProperty(_assertThisInitialized(_this),\"onGestureEvent\",void 0);_defineProperty(_assertThisInitialized(_this),\"accessibilityIsModalView\",React.createRef());_defineProperty(_assertThisInitialized(_this),\"pointerEventsView\",React.createRef());_defineProperty(_assertThisInitialized(_this),\"panGestureHandler\",React.createRef());_defineProperty(_assertThisInitialized(_this),\"drawerShown\",false);_defineProperty(_assertThisInitialized(_this),\"updateAnimatedEvent\",function(props,state){var drawerPosition=props.drawerPosition,drawerWidth=props.drawerWidth,drawerType=props.drawerType;var dragXValue=state.dragX,touchXValue=state.touchX,drawerTranslation=state.drawerTranslation,containerWidth=state.containerWidth;var dragX=dragXValue;var touchX=touchXValue;if(drawerPosition!=='left'){dragX=Animated.multiply(new Animated.Value(-1),dragXValue);touchX=Animated.add(new Animated.Value(containerWidth),Animated.multiply(new Animated.Value(-1),touchXValue));touchXValue.setValue(containerWidth);}else{touchXValue.setValue(0);}var translationX=dragX;if(drawerType==='front'){var startPositionX=Animated.add(touchX,Animated.multiply(new Animated.Value(-1),dragX));var dragOffsetFromOnStartPosition=startPositionX.interpolate({inputRange:[drawerWidth-1,drawerWidth,drawerWidth+1],outputRange:[0,0,1]});translationX=Animated.add(dragX,dragOffsetFromOnStartPosition);}_this.openValue=Animated.add(translationX,drawerTranslation).interpolate({inputRange:[0,drawerWidth],outputRange:[0,1],extrapolate:'clamp'});var gestureOptions={useNativeDriver:props.useNativeAnimations};if(_this.props.onDrawerSlide){gestureOptions.listener=function(ev){var _this$props$onDrawerS,_this$props;var translationX=Math.floor(Math.abs(ev.nativeEvent.translationX));var position=translationX/_this.state.containerWidth;(_this$props$onDrawerS=(_this$props=_this.props).onDrawerSlide)===null||_this$props$onDrawerS===void 0?void 0:_this$props$onDrawerS.call(_this$props,position);};}_this.onGestureEvent=Animated.event([{nativeEvent:{translationX:dragXValue,x:touchXValue}}],gestureOptions);});_defineProperty(_assertThisInitialized(_this),\"handleContainerLayout\",function(_ref){var nativeEvent=_ref.nativeEvent;_this.setState({containerWidth:nativeEvent.layout.width});});_defineProperty(_assertThisInitialized(_this),\"emitStateChanged\",function(newState,drawerWillShow){var _this$props$onDrawerS2,_this$props2;(_this$props$onDrawerS2=(_this$props2=_this.props).onDrawerStateChanged)===null||_this$props$onDrawerS2===void 0?void 0:_this$props$onDrawerS2.call(_this$props2,newState,drawerWillShow);});_defineProperty(_assertThisInitialized(_this),\"openingHandlerStateChange\",function(_ref2){var nativeEvent=_ref2.nativeEvent;if(nativeEvent.oldState===State.ACTIVE){_this.handleRelease({nativeEvent:nativeEvent});}else if(nativeEvent.state===State.ACTIVE){_this.emitStateChanged(DRAGGING,false);_this.setState({drawerState:DRAGGING});if(_this.props.keyboardDismissMode==='on-drag'){Keyboard.dismiss();}if(_this.props.hideStatusBar){StatusBar.setHidden(true,_this.props.statusBarAnimation||'slide');}}});_defineProperty(_assertThisInitialized(_this),\"onTapHandlerStateChange\",function(_ref3){var nativeEvent=_ref3.nativeEvent;if(_this.drawerShown&&nativeEvent.oldState===State.ACTIVE&&_this.props.drawerLockMode!=='locked-open'){_this.closeDrawer();}});_defineProperty(_assertThisInitialized(_this),\"handleRelease\",function(_ref4){var nativeEvent=_ref4.nativeEvent;var _this$props6=_this.props,drawerWidth=_this$props6.drawerWidth,drawerPosition=_this$props6.drawerPosition,drawerType=_this$props6.drawerType;var containerWidth=_this.state.containerWidth;var dragX=nativeEvent.translationX,velocityX=nativeEvent.velocityX,touchX=nativeEvent.x;if(drawerPosition!=='left'){dragX=-dragX;touchX=containerWidth-touchX;velocityX=-velocityX;}var gestureStartX=touchX-dragX;var dragOffsetBasedOnStart=0;if(drawerType==='front'){dragOffsetBasedOnStart=gestureStartX>drawerWidth?gestureStartX-drawerWidth:0;}var startOffsetX=dragX+dragOffsetBasedOnStart+(_this.drawerShown?drawerWidth:0);var projOffsetX=startOffsetX+DRAG_TOSS*velocityX;var shouldOpen=projOffsetX>drawerWidth/2;if(shouldOpen){_this.animateDrawer(startOffsetX,drawerWidth,velocityX);}else{_this.animateDrawer(startOffsetX,0,velocityX);}});_defineProperty(_assertThisInitialized(_this),\"updateShowing\",function(showing){var _this$accessibilityIs,_this$pointerEventsVi,_this$panGestureHandl;_this.drawerShown=showing;(_this$accessibilityIs=_this.accessibilityIsModalView.current)===null||_this$accessibilityIs===void 0?void 0:_this$accessibilityIs.setNativeProps({accessibilityViewIsModal:showing});(_this$pointerEventsVi=_this.pointerEventsView.current)===null||_this$pointerEventsVi===void 0?void 0:_this$pointerEventsVi.setNativeProps({pointerEvents:showing?'auto':'none'});var _this$props7=_this.props,drawerPosition=_this$props7.drawerPosition,minSwipeDistance=_this$props7.minSwipeDistance,edgeWidth=_this$props7.edgeWidth;var fromLeft=drawerPosition==='left';var gestureOrientation=(fromLeft?1:-1)*(_this.drawerShown?-1:1);var hitSlop=fromLeft?{left:0,width:showing?undefined:edgeWidth}:{right:0,width:showing?undefined:edgeWidth};(_this$panGestureHandl=_this.panGestureHandler.current)===null||_this$panGestureHandl===void 0?void 0:_this$panGestureHandl.setNativeProps({hitSlop:hitSlop,activeOffsetX:gestureOrientation*minSwipeDistance});});_defineProperty(_assertThisInitialized(_this),\"animateDrawer\",function(fromValue,toValue,velocity,speed){_this.state.dragX.setValue(0);_this.state.touchX.setValue(_this.props.drawerPosition==='left'?0:_this.state.containerWidth);if(fromValue!=null){var nextFramePosition=fromValue;if(_this.props.useNativeAnimations){if(fromValue<toValue&&velocity>0){nextFramePosition=Math.min(fromValue+velocity/60.0,toValue);}else if(fromValue>toValue&&velocity<0){nextFramePosition=Math.max(fromValue+velocity/60.0,toValue);}}_this.state.drawerTranslation.setValue(nextFramePosition);}var willShow=toValue!==0;_this.updateShowing(willShow);_this.emitStateChanged(SETTLING,willShow);_this.setState({drawerState:SETTLING});if(_this.props.hideStatusBar){StatusBar.setHidden(willShow,_this.props.statusBarAnimation||'slide');}Animated.spring(_this.state.drawerTranslation,{velocity:velocity,bounciness:0,toValue:toValue,useNativeDriver:_this.props.useNativeAnimations,speed:speed!==null&&speed!==void 0?speed:undefined}).start(function(_ref5){var finished=_ref5.finished;if(finished){_this.emitStateChanged(IDLE,willShow);_this.setState({drawerOpened:willShow});if(_this.state.drawerState!==DRAGGING){_this.setState({drawerState:IDLE});}if(willShow){var _this$props$onDrawerO,_this$props3;(_this$props$onDrawerO=(_this$props3=_this.props).onDrawerOpen)===null||_this$props$onDrawerO===void 0?void 0:_this$props$onDrawerO.call(_this$props3);}else{var _this$props$onDrawerC,_this$props4;(_this$props$onDrawerC=(_this$props4=_this.props).onDrawerClose)===null||_this$props$onDrawerC===void 0?void 0:_this$props$onDrawerC.call(_this$props4);}}});});_defineProperty(_assertThisInitialized(_this),\"openDrawer\",function(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};_this.animateDrawer(undefined,_this.props.drawerWidth,options.velocity?options.velocity:0,options.speed);_this.forceUpdate();});_defineProperty(_assertThisInitialized(_this),\"closeDrawer\",function(){var options=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};_this.animateDrawer(undefined,0,options.velocity?options.velocity:0,options.speed);_this.forceUpdate();});_defineProperty(_assertThisInitialized(_this),\"renderOverlay\",function(){invariant(_this.openValue,'should be set');var overlayOpacity;if(_this.state.drawerState!==IDLE){overlayOpacity=_this.openValue;}else{overlayOpacity=_this.state.drawerOpened?1:0;}var dynamicOverlayStyles={opacity:overlayOpacity,backgroundColor:_this.props.overlayColor};return React.createElement(TapGestureHandler,{onHandlerStateChange:_this.onTapHandlerStateChange},React.createElement(Animated.View,{pointerEvents:_this.drawerShown?'auto':'none',ref:_this.pointerEventsView,style:[styles.overlay,dynamicOverlayStyles]}));});_defineProperty(_assertThisInitialized(_this),\"renderDrawer\",function(){var _this$props8=_this.props,drawerBackgroundColor=_this$props8.drawerBackgroundColor,drawerWidth=_this$props8.drawerWidth,drawerPosition=_this$props8.drawerPosition,drawerType=_this$props8.drawerType,drawerContainerStyle=_this$props8.drawerContainerStyle,contentContainerStyle=_this$props8.contentContainerStyle;var fromLeft=drawerPosition==='left';var drawerSlide=drawerType!=='back';var containerSlide=drawerType!=='front';var reverseContentDirection=I18nManager.isRTL?fromLeft:!fromLeft;var dynamicDrawerStyles={backgroundColor:drawerBackgroundColor,width:drawerWidth};var openValue=_this.openValue;invariant(openValue,'should be set');var containerStyles;if(containerSlide){var containerTranslateX=openValue.interpolate({inputRange:[0,1],outputRange:fromLeft?[0,drawerWidth]:[0,-drawerWidth],extrapolate:'clamp'});containerStyles={transform:[{translateX:containerTranslateX}]};}var drawerTranslateX=0;if(drawerSlide){var closedDrawerOffset=fromLeft?-drawerWidth:drawerWidth;if(_this.state.drawerState!==IDLE){drawerTranslateX=openValue.interpolate({inputRange:[0,1],outputRange:[closedDrawerOffset,0],extrapolate:'clamp'});}else{drawerTranslateX=_this.state.drawerOpened?0:closedDrawerOffset;}}var drawerStyles={transform:[{translateX:drawerTranslateX}],flexDirection:reverseContentDirection?'row-reverse':'row'};return React.createElement(Animated.View,{style:styles.main,onLayout:_this.handleContainerLayout},React.createElement(Animated.View,{style:[drawerType==='front'?styles.containerOnBack:styles.containerInFront,containerStyles,contentContainerStyle],importantForAccessibility:_this.drawerShown?'no-hide-descendants':'yes'},typeof _this.props.children==='function'?_this.props.children(_this.openValue):_this.props.children,_this.renderOverlay()),React.createElement(Animated.View,{pointerEvents:\"box-none\",ref:_this.accessibilityIsModalView,accessibilityViewIsModal:_this.drawerShown,style:[styles.drawerContainer,drawerStyles,drawerContainerStyle]},React.createElement(View,{style:dynamicDrawerStyles},_this.props.renderNavigationView(_this.openValue))));});_defineProperty(_assertThisInitialized(_this),\"setPanGestureRef\",function(ref){var _this$props$onGesture,_this$props5;_this.panGestureHandler.current=ref;(_this$props$onGesture=(_this$props5=_this.props).onGestureRef)===null||_this$props$onGesture===void 0?void 0:_this$props$onGesture.call(_this$props5,ref);});var _dragX=new Animated.Value(0);var _touchX=new Animated.Value(0);var _drawerTranslation=new Animated.Value(0);_this.state={dragX:_dragX,touchX:_touchX,drawerTranslation:_drawerTranslation,containerWidth:0,drawerState:IDLE,drawerOpened:false};_this.updateAnimatedEvent(_props,_this.state);return _this;}_createClass(DrawerLayout,[{key:\"shouldComponentUpdate\",value:function shouldComponentUpdate(props,state){if(this.props.drawerPosition!==props.drawerPosition||this.props.drawerWidth!==props.drawerWidth||this.props.drawerType!==props.drawerType||this.state.containerWidth!==state.containerWidth){this.updateAnimatedEvent(props,state);}return true;}},{key:\"render\",value:function render(){var _this$props9=this.props,drawerPosition=_this$props9.drawerPosition,drawerLockMode=_this$props9.drawerLockMode,edgeWidth=_this$props9.edgeWidth,minSwipeDistance=_this$props9.minSwipeDistance;var fromLeft=drawerPosition==='left';var gestureOrientation=(fromLeft?1:-1)*(this.drawerShown?-1:1);var hitSlop=fromLeft?{left:0,width:this.drawerShown?undefined:edgeWidth}:{right:0,width:this.drawerShown?undefined:edgeWidth};return React.createElement(PanGestureHandler,{userSelect:this.props.userSelect,ref:this.setPanGestureRef,hitSlop:hitSlop,activeOffsetX:gestureOrientation*minSwipeDistance,failOffsetY:[-15,15],onGestureEvent:this.onGestureEvent,onHandlerStateChange:this.openingHandlerStateChange,enableTrackpadTwoFingerGesture:this.props.enableTrackpadTwoFingerGesture,enabled:drawerLockMode!=='locked-closed'&&drawerLockMode!=='locked-open'},this.renderDrawer());}}]);return DrawerLayout;}(Component);export{DrawerLayout as default};_defineProperty(DrawerLayout,\"defaultProps\",{drawerWidth:200,drawerPosition:'left',useNativeAnimations:true,drawerType:'front',edgeWidth:20,minSwipeDistance:3,overlayColor:'rgba(0, 0, 0, 0.7)',drawerLockMode:'unlocked',enableTrackpadTwoFingerGesture:false});_defineProperty(DrawerLayout,\"positions\",{Left:'left',Right:'right'});var styles=StyleSheet.create({drawerContainer:_objectSpread(_objectSpread({},StyleSheet.absoluteFillObject),{},{zIndex:1001,flexDirection:'row'}),containerInFront:_objectSpread(_objectSpread({},StyleSheet.absoluteFillObject),{},{zIndex:1002}),containerOnBack:_objectSpread({},StyleSheet.absoluteFillObject),main:{flex:1,zIndex:0,overflow:'hidden'},overlay:_objectSpread(_objectSpread({},StyleSheet.absoluteFillObject),{},{zIndex:1000})});","map":{"version":3,"mappings":"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","names":["React","Component","invariant","PanGestureHandler","TapGestureHandler","State","DRAG_TOSS","IDLE","DRAGGING","SETTLING","DrawerLayout","constructor","props","_defineProperty","createRef","state","drawerPosition","drawerWidth","drawerType","dragXValue","dragX","touchXValue","touchX","drawerTranslation","containerWidth","Animated","multiply","Value","add","setValue","translationX","startPositionX","dragOffsetFromOnStartPosition","interpolate","inputRange","outputRange","openValue","extrapolate","gestureOptions","useNativeDriver","useNativeAnimations","onDrawerSlide","listener","ev","Math","floor","abs","nativeEvent","position","onGestureEvent","event","x","setState","layout","width","newState","drawerWillShow","onDrawerStateChanged","oldState","ACTIVE","handleRelease","emitStateChanged","drawerState","keyboardDismissMode","Keyboard","dismiss","hideStatusBar","StatusBar","setHidden","statusBarAnimation","drawerShown","drawerLockMode","closeDrawer","velocityX","gestureStartX","dragOffsetBasedOnStart","startOffsetX","projOffsetX","shouldOpen","animateDrawer","showing","accessibilityIsModalView","current","setNativeProps","accessibilityViewIsModal","pointerEventsView","pointerEvents","minSwipeDistance","edgeWidth","fromLeft","gestureOrientation","hitSlop","left","undefined","right","panGestureHandler","activeOffsetX","fromValue","toValue","velocity","speed","nextFramePosition","min","max","willShow","updateShowing","spring","bounciness","start","finished","drawerOpened","onDrawerOpen","onDrawerClose","options","forceUpdate","overlayOpacity","dynamicOverlayStyles","opacity","backgroundColor","overlayColor","onHandlerStateChange","onTapHandlerStateChange","View","ref","style","styles","overlay","drawerBackgroundColor","drawerContainerStyle","contentContainerStyle","drawerSlide","containerSlide","reverseContentDirection","I18nManager","isRTL","dynamicDrawerStyles","containerStyles","containerTranslateX","transform","translateX","drawerTranslateX","closedDrawerOffset","drawerStyles","flexDirection","main","onLayout","handleContainerLayout","containerOnBack","containerInFront","importantForAccessibility","children","renderOverlay","drawerContainer","renderNavigationView","onGestureRef","updateAnimatedEvent","shouldComponentUpdate","render","userSelect","setPanGestureRef","failOffsetY","openingHandlerStateChange","enableTrackpadTwoFingerGesture","enabled","renderDrawer","Left","Right","StyleSheet","create","absoluteFillObject","zIndex","flex","overflow"],"sources":["DrawerLayout.tsx"],"sourcesContent":["// This component is based on RN's DrawerLayoutAndroid API\n//\n// It perhaps deserves to be put in a separate repo, but since it relies on\n// react-native-gesture-handler library which isn't very popular at the moment I\n// decided to keep it here for the time being. It will allow us to move faster\n// and fix issues that may arise in gesture handler library that could be found\n// when using the drawer component\n\nimport * as React from 'react';\nimport { Component } from 'react';\nimport invariant from 'invariant';\nimport {\n  Animated,\n  StyleSheet,\n  View,\n  Keyboard,\n  StatusBar,\n  I18nManager,\n  StatusBarAnimation,\n  StyleProp,\n  ViewStyle,\n  LayoutChangeEvent,\n  NativeSyntheticEvent,\n} from 'react-native';\n\nimport {\n  GestureEvent,\n  HandlerStateChangeEvent,\n  UserSelect,\n} from '../handlers/gestureHandlerCommon';\nimport {\n  PanGestureHandler,\n  PanGestureHandlerEventPayload,\n} from '../handlers/PanGestureHandler';\nimport {\n  TapGestureHandler,\n  TapGestureHandlerEventPayload,\n} from '../handlers/TapGestureHandler';\nimport { State } from '../State';\n\nconst DRAG_TOSS = 0.05;\n\nconst IDLE: DrawerState = 'Idle';\nconst DRAGGING: DrawerState = 'Dragging';\nconst SETTLING: DrawerState = 'Settling';\n\nexport type DrawerPosition = 'left' | 'right';\n\nexport type DrawerState = 'Idle' | 'Dragging' | 'Settling';\n\nexport type DrawerType = 'front' | 'back' | 'slide';\n\nexport type DrawerLockMode = 'unlocked' | 'locked-closed' | 'locked-open';\n\nexport type DrawerKeyboardDismissMode = 'none' | 'on-drag';\n\nexport interface DrawerLayoutProps {\n  /**\n   * This attribute is present in the standard implementation already and is one\n   * of the required params. Gesture handler version of DrawerLayout make it\n   * possible for the function passed as `renderNavigationView` to take an\n   * Animated value as a parameter that indicates the progress of drawer\n   * opening/closing animation (progress value is 0 when closed and 1 when\n   * opened). This can be used by the drawer component to animated its children\n   * while the drawer is opening or closing.\n   */\n  renderNavigationView: (\n    progressAnimatedValue: Animated.Value\n  ) => React.ReactNode;\n\n  drawerPosition?: DrawerPosition;\n\n  drawerWidth?: number;\n\n  drawerBackgroundColor?: string;\n\n  drawerLockMode?: DrawerLockMode;\n\n  keyboardDismissMode?: DrawerKeyboardDismissMode;\n\n  /**\n   * Called when the drawer is closed.\n   */\n  onDrawerClose?: () => void;\n\n  /**\n   * Called when the drawer is opened.\n   */\n  onDrawerOpen?: () => void;\n\n  /**\n   * Called when the status of the drawer changes.\n   */\n  onDrawerStateChanged?: (\n    newState: DrawerState,\n    drawerWillShow: boolean\n  ) => void;\n  useNativeAnimations?: boolean;\n\n  drawerType?: DrawerType;\n\n  /**\n   * Defines how far from the edge of the content view the gesture should\n   * activate.\n   */\n  edgeWidth?: number;\n\n  minSwipeDistance?: number;\n\n  /**\n   * When set to true Drawer component will use\n   * {@link https://reactnative.dev/docs/statusbar StatusBar} API to hide the OS\n   * status bar whenever the drawer is pulled or when its in an \"open\" state.\n   */\n  hideStatusBar?: boolean;\n\n  /**\n   * @default 'slide'\n   *\n   * Can be used when hideStatusBar is set to true and will select the animation\n   * used for hiding/showing the status bar. See\n   * {@link https://reactnative.dev/docs/statusbar StatusBar} documentation for\n   * more details\n   */\n  statusBarAnimation?: StatusBarAnimation;\n\n  /**\n   * @default black\n   *\n   * Color of a semi-transparent overlay to be displayed on top of the content\n   * view when drawer gets open. A solid color should be used as the opacity is\n   * added by the Drawer itself and the opacity of the overlay is animated (from\n   * 0% to 70%).\n   */\n  overlayColor?: string;\n\n  contentContainerStyle?: StyleProp<ViewStyle>;\n\n  drawerContainerStyle?: StyleProp<ViewStyle>;\n\n  /**\n   * Enables two-finger gestures on supported devices, for example iPads with\n   * trackpads. If not enabled the gesture will require click + drag, with\n   * `enableTrackpadTwoFingerGesture` swiping with two fingers will also trigger\n   * the gesture.\n   */\n  enableTrackpadTwoFingerGesture?: boolean;\n\n  onDrawerSlide?: (position: number) => void;\n\n  onGestureRef?: (ref: PanGestureHandler) => void;\n\n  // implicit `children` prop has been removed in @types/react^18.0.0\n  children?:\n    | React.ReactNode\n    | ((openValue?: Animated.AnimatedInterpolation) => React.ReactNode);\n\n  /**\n   * @default 'none'\n   * Defines which userSelect property should be used.\n   * Values: 'none'|'text'|'auto'\n   */\n  userSelect?: UserSelect;\n}\n\nexport type DrawerLayoutState = {\n  dragX: Animated.Value;\n  touchX: Animated.Value;\n  drawerTranslation: Animated.Value;\n  containerWidth: number;\n  drawerState: DrawerState;\n  drawerOpened: boolean;\n};\n\nexport type DrawerMovementOption = {\n  velocity?: number;\n  speed?: number;\n};\nexport default class DrawerLayout extends Component<\n  DrawerLayoutProps,\n  DrawerLayoutState\n> {\n  static defaultProps = {\n    drawerWidth: 200,\n    drawerPosition: 'left',\n    useNativeAnimations: true,\n    drawerType: 'front',\n    edgeWidth: 20,\n    minSwipeDistance: 3,\n    overlayColor: 'rgba(0, 0, 0, 0.7)',\n    drawerLockMode: 'unlocked',\n    enableTrackpadTwoFingerGesture: false,\n  };\n\n  constructor(props: DrawerLayoutProps) {\n    super(props);\n\n    const dragX = new Animated.Value(0);\n    const touchX = new Animated.Value(0);\n    const drawerTranslation = new Animated.Value(0);\n\n    this.state = {\n      dragX,\n      touchX,\n      drawerTranslation,\n      containerWidth: 0,\n      drawerState: IDLE,\n      drawerOpened: false,\n    };\n\n    this.updateAnimatedEvent(props, this.state);\n  }\n\n  shouldComponentUpdate(props: DrawerLayoutProps, state: DrawerLayoutState) {\n    if (\n      this.props.drawerPosition !== props.drawerPosition ||\n      this.props.drawerWidth !== props.drawerWidth ||\n      this.props.drawerType !== props.drawerType ||\n      this.state.containerWidth !== state.containerWidth\n    ) {\n      this.updateAnimatedEvent(props, state);\n    }\n\n    return true;\n  }\n\n  private openValue?: Animated.AnimatedInterpolation;\n  private onGestureEvent?: (\n    event: GestureEvent<PanGestureHandlerEventPayload>\n  ) => void;\n  private accessibilityIsModalView = React.createRef<View>();\n  private pointerEventsView = React.createRef<View>();\n  private panGestureHandler = React.createRef<PanGestureHandler | null>();\n  private drawerShown = false;\n\n  static positions = {\n    Left: 'left',\n    Right: 'right',\n  };\n\n  private updateAnimatedEvent = (\n    props: DrawerLayoutProps,\n    state: DrawerLayoutState\n  ) => {\n    // Event definition is based on\n    const { drawerPosition, drawerWidth, drawerType } = props;\n    const {\n      dragX: dragXValue,\n      touchX: touchXValue,\n      drawerTranslation,\n      containerWidth,\n    } = state;\n\n    let dragX = dragXValue;\n    let touchX = touchXValue;\n\n    if (drawerPosition !== 'left') {\n      // Most of the code is written in a way to handle left-side drawer. In\n      // order to handle right-side drawer the only thing we need to do is to\n      // reverse events coming from gesture handler in a way they emulate\n      // left-side drawer gestures. E.g. dragX is simply -dragX, and touchX is\n      // calulcated by subtracing real touchX from the width of the container\n      // (such that when touch happens at the right edge the value is simply 0)\n      dragX = Animated.multiply(\n        new Animated.Value(-1),\n        dragXValue\n      ) as Animated.Value; // TODO(TS): (for all \"as\" in this file) make sure we can map this\n      touchX = Animated.add(\n        new Animated.Value(containerWidth),\n        Animated.multiply(new Animated.Value(-1), touchXValue)\n      ) as Animated.Value; // TODO(TS): make sure we can map this;\n      touchXValue.setValue(containerWidth);\n    } else {\n      touchXValue.setValue(0);\n    }\n\n    // While closing the drawer when user starts gesture outside of its area (in greyed\n    // out part of the window), we want the drawer to follow only once finger reaches the\n    // edge of the drawer.\n    // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n    // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n    // an arrow pointing left\n    // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    +---------------+    +---------------+    +---------------+    +---------------+\n    //\n    // For the above to work properly we define animated value that will keep\n    // start position of the gesture. Then we use that value to calculate how\n    // much we need to subtract from the dragX. If the gesture started on the\n    // greyed out area we take the distance from the edge of the drawer to the\n    // start position. Otherwise we don't subtract at all and the drawer be\n    // pulled back as soon as you start the pan.\n    //\n    // This is used only when drawerType is \"front\"\n    //\n    let translationX = dragX;\n    if (drawerType === 'front') {\n      const startPositionX = Animated.add(\n        touchX,\n        Animated.multiply(new Animated.Value(-1), dragX)\n      );\n\n      const dragOffsetFromOnStartPosition = startPositionX.interpolate({\n        inputRange: [drawerWidth! - 1, drawerWidth!, drawerWidth! + 1],\n        outputRange: [0, 0, 1],\n      });\n      translationX = Animated.add(\n        dragX,\n        dragOffsetFromOnStartPosition\n      ) as Animated.Value; // TODO: as above\n    }\n\n    this.openValue = Animated.add(translationX, drawerTranslation).interpolate({\n      inputRange: [0, drawerWidth!],\n      outputRange: [0, 1],\n      extrapolate: 'clamp',\n    });\n\n    const gestureOptions: {\n      useNativeDriver: boolean;\n      // TODO: make sure it is correct\n      listener?: (\n        ev: NativeSyntheticEvent<PanGestureHandlerEventPayload>\n      ) => void;\n    } = {\n      useNativeDriver: props.useNativeAnimations!,\n    };\n\n    if (this.props.onDrawerSlide) {\n      gestureOptions.listener = (ev) => {\n        const translationX = Math.floor(Math.abs(ev.nativeEvent.translationX));\n        const position = translationX / this.state.containerWidth;\n\n        this.props.onDrawerSlide?.(position);\n      };\n    }\n\n    this.onGestureEvent = Animated.event(\n      [{ nativeEvent: { translationX: dragXValue, x: touchXValue } }],\n      gestureOptions\n    );\n  };\n\n  private handleContainerLayout = ({ nativeEvent }: LayoutChangeEvent) => {\n    this.setState({ containerWidth: nativeEvent.layout.width });\n  };\n\n  private emitStateChanged = (\n    newState: DrawerState,\n    drawerWillShow: boolean\n  ) => {\n    this.props.onDrawerStateChanged?.(newState, drawerWillShow);\n  };\n\n  private openingHandlerStateChange = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<PanGestureHandlerEventPayload>) => {\n    if (nativeEvent.oldState === State.ACTIVE) {\n      this.handleRelease({ nativeEvent });\n    } else if (nativeEvent.state === State.ACTIVE) {\n      this.emitStateChanged(DRAGGING, false);\n      this.setState({ drawerState: DRAGGING });\n      if (this.props.keyboardDismissMode === 'on-drag') {\n        Keyboard.dismiss();\n      }\n      if (this.props.hideStatusBar) {\n        StatusBar.setHidden(true, this.props.statusBarAnimation || 'slide');\n      }\n    }\n  };\n\n  private onTapHandlerStateChange = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<TapGestureHandlerEventPayload>) => {\n    if (\n      this.drawerShown &&\n      nativeEvent.oldState === State.ACTIVE &&\n      this.props.drawerLockMode !== 'locked-open'\n    ) {\n      this.closeDrawer();\n    }\n  };\n\n  private handleRelease = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<PanGestureHandlerEventPayload>) => {\n    const { drawerWidth, drawerPosition, drawerType } = this.props;\n    const { containerWidth } = this.state;\n    let { translationX: dragX, velocityX, x: touchX } = nativeEvent;\n\n    if (drawerPosition !== 'left') {\n      // See description in _updateAnimatedEvent about why events are flipped\n      // for right-side drawer\n      dragX = -dragX;\n      touchX = containerWidth - touchX;\n      velocityX = -velocityX;\n    }\n\n    const gestureStartX = touchX - dragX;\n    let dragOffsetBasedOnStart = 0;\n\n    if (drawerType === 'front') {\n      dragOffsetBasedOnStart =\n        gestureStartX > drawerWidth! ? gestureStartX - drawerWidth! : 0;\n    }\n\n    const startOffsetX =\n      dragX + dragOffsetBasedOnStart + (this.drawerShown ? drawerWidth! : 0);\n    const projOffsetX = startOffsetX + DRAG_TOSS * velocityX;\n\n    const shouldOpen = projOffsetX > drawerWidth! / 2;\n\n    if (shouldOpen) {\n      this.animateDrawer(startOffsetX, drawerWidth!, velocityX);\n    } else {\n      this.animateDrawer(startOffsetX, 0, velocityX);\n    }\n  };\n\n  private updateShowing = (showing: boolean) => {\n    this.drawerShown = showing;\n    this.accessibilityIsModalView.current?.setNativeProps({\n      accessibilityViewIsModal: showing,\n    });\n    this.pointerEventsView.current?.setNativeProps({\n      pointerEvents: showing ? 'auto' : 'none',\n    });\n    const { drawerPosition, minSwipeDistance, edgeWidth } = this.props;\n    const fromLeft = drawerPosition === 'left';\n    // gestureOrientation is 1 if the expected gesture is from left to right and\n    // -1 otherwise e.g. when drawer is on the left and is closed we expect left\n    // to right gesture, thus orientation will be 1.\n    const gestureOrientation =\n      (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1);\n    // When drawer is closed we want the hitSlop to be horizontally shorter than\n    // the container size by the value of SLOP. This will make it only activate\n    // when gesture happens not further than SLOP away from the edge\n    const hitSlop = fromLeft\n      ? { left: 0, width: showing ? undefined : edgeWidth }\n      : { right: 0, width: showing ? undefined : edgeWidth };\n    // @ts-ignore internal API, maybe could be fixed in handler types\n    this.panGestureHandler.current?.setNativeProps({\n      hitSlop,\n      activeOffsetX: gestureOrientation * minSwipeDistance!,\n    });\n  };\n\n  private animateDrawer = (\n    fromValue: number | null | undefined,\n    toValue: number,\n    velocity: number,\n    speed?: number\n  ) => {\n    this.state.dragX.setValue(0);\n    this.state.touchX.setValue(\n      this.props.drawerPosition === 'left' ? 0 : this.state.containerWidth\n    );\n\n    if (fromValue != null) {\n      let nextFramePosition = fromValue;\n      if (this.props.useNativeAnimations) {\n        // When using native driver, we predict the next position of the\n        // animation because it takes one frame of a roundtrip to pass RELEASE\n        // event from native driver to JS before we can start animating. Without\n        // it, it is more noticable that the frame is dropped.\n        if (fromValue < toValue && velocity > 0) {\n          nextFramePosition = Math.min(fromValue + velocity / 60.0, toValue);\n        } else if (fromValue > toValue && velocity < 0) {\n          nextFramePosition = Math.max(fromValue + velocity / 60.0, toValue);\n        }\n      }\n      this.state.drawerTranslation.setValue(nextFramePosition);\n    }\n\n    const willShow = toValue !== 0;\n    this.updateShowing(willShow);\n    this.emitStateChanged(SETTLING, willShow);\n    this.setState({ drawerState: SETTLING });\n    if (this.props.hideStatusBar) {\n      StatusBar.setHidden(willShow, this.props.statusBarAnimation || 'slide');\n    }\n    Animated.spring(this.state.drawerTranslation, {\n      velocity,\n      bounciness: 0,\n      toValue,\n      useNativeDriver: this.props.useNativeAnimations!,\n      speed: speed ?? undefined,\n    }).start(({ finished }) => {\n      if (finished) {\n        this.emitStateChanged(IDLE, willShow);\n        this.setState({ drawerOpened: willShow });\n        if (this.state.drawerState !== DRAGGING) {\n          // it's possilbe that user started drag while the drawer\n          // was settling, don't override state in this case\n          this.setState({ drawerState: IDLE });\n        }\n        if (willShow) {\n          this.props.onDrawerOpen?.();\n        } else {\n          this.props.onDrawerClose?.();\n        }\n      }\n    });\n  };\n\n  openDrawer = (options: DrawerMovementOption = {}) => {\n    this.animateDrawer(\n      // TODO: decide if it should be null or undefined is the proper value\n      undefined,\n      this.props.drawerWidth!,\n      options.velocity ? options.velocity : 0,\n      options.speed\n    );\n\n    // We need to force the update, otherwise the overlay is not rerendered and\n    // it would not be clickable\n    this.forceUpdate();\n  };\n\n  closeDrawer = (options: DrawerMovementOption = {}) => {\n    // TODO: decide if it should be null or undefined is the proper value\n    this.animateDrawer(\n      undefined,\n      0,\n      options.velocity ? options.velocity : 0,\n      options.speed\n    );\n\n    // We need to force the update, otherwise the overlay is not rerendered and\n    // it would be still clickable\n    this.forceUpdate();\n  };\n\n  private renderOverlay = () => {\n    /* Overlay styles */\n    invariant(this.openValue, 'should be set');\n    let overlayOpacity;\n\n    if (this.state.drawerState !== IDLE) {\n      overlayOpacity = this.openValue;\n    } else {\n      overlayOpacity = this.state.drawerOpened ? 1 : 0;\n    }\n\n    const dynamicOverlayStyles = {\n      opacity: overlayOpacity,\n      backgroundColor: this.props.overlayColor,\n    };\n\n    return (\n      <TapGestureHandler onHandlerStateChange={this.onTapHandlerStateChange}>\n        <Animated.View\n          pointerEvents={this.drawerShown ? 'auto' : 'none'}\n          ref={this.pointerEventsView}\n          style={[styles.overlay, dynamicOverlayStyles]}\n        />\n      </TapGestureHandler>\n    );\n  };\n\n  private renderDrawer = () => {\n    const {\n      drawerBackgroundColor,\n      drawerWidth,\n      drawerPosition,\n      drawerType,\n      drawerContainerStyle,\n      contentContainerStyle,\n    } = this.props;\n\n    const fromLeft = drawerPosition === 'left';\n    const drawerSlide = drawerType !== 'back';\n    const containerSlide = drawerType !== 'front';\n\n    // we rely on row and row-reverse flex directions to position the drawer\n    // properly. Apparently for RTL these are flipped which requires us to use\n    // the opposite setting for the drawer to appear from left or right\n    // according to the drawerPosition prop\n    const reverseContentDirection = I18nManager.isRTL ? fromLeft : !fromLeft;\n\n    const dynamicDrawerStyles = {\n      backgroundColor: drawerBackgroundColor,\n      width: drawerWidth,\n    };\n    const openValue = this.openValue;\n    invariant(openValue, 'should be set');\n\n    let containerStyles;\n    if (containerSlide) {\n      const containerTranslateX = openValue.interpolate({\n        inputRange: [0, 1],\n        outputRange: fromLeft ? [0, drawerWidth!] : [0, -drawerWidth!],\n        extrapolate: 'clamp',\n      });\n      containerStyles = {\n        transform: [{ translateX: containerTranslateX }],\n      };\n    }\n\n    let drawerTranslateX: number | Animated.AnimatedInterpolation = 0;\n    if (drawerSlide) {\n      const closedDrawerOffset = fromLeft ? -drawerWidth! : drawerWidth!;\n      if (this.state.drawerState !== IDLE) {\n        drawerTranslateX = openValue.interpolate({\n          inputRange: [0, 1],\n          outputRange: [closedDrawerOffset, 0],\n          extrapolate: 'clamp',\n        });\n      } else {\n        drawerTranslateX = this.state.drawerOpened ? 0 : closedDrawerOffset;\n      }\n    }\n    const drawerStyles: {\n      transform: { translateX: number | Animated.AnimatedInterpolation }[];\n      flexDirection: 'row-reverse' | 'row';\n    } = {\n      transform: [{ translateX: drawerTranslateX }],\n      flexDirection: reverseContentDirection ? 'row-reverse' : 'row',\n    };\n\n    return (\n      <Animated.View style={styles.main} onLayout={this.handleContainerLayout}>\n        <Animated.View\n          style={[\n            drawerType === 'front'\n              ? styles.containerOnBack\n              : styles.containerInFront,\n            containerStyles,\n            contentContainerStyle,\n          ]}\n          importantForAccessibility={\n            this.drawerShown ? 'no-hide-descendants' : 'yes'\n          }>\n          {typeof this.props.children === 'function'\n            ? this.props.children(this.openValue)\n            : this.props.children}\n          {this.renderOverlay()}\n        </Animated.View>\n        <Animated.View\n          pointerEvents=\"box-none\"\n          ref={this.accessibilityIsModalView}\n          accessibilityViewIsModal={this.drawerShown}\n          style={[styles.drawerContainer, drawerStyles, drawerContainerStyle]}>\n          <View style={dynamicDrawerStyles}>\n            {this.props.renderNavigationView(this.openValue as Animated.Value)}\n          </View>\n        </Animated.View>\n      </Animated.View>\n    );\n  };\n\n  private setPanGestureRef = (ref: PanGestureHandler) => {\n    // TODO(TS): make sure it is OK taken from\n    // https://github.com/DefinitelyTyped/DefinitelyTyped/issues/31065#issuecomment-596081842\n    (\n      this.panGestureHandler as React.MutableRefObject<PanGestureHandler>\n    ).current = ref;\n    this.props.onGestureRef?.(ref);\n  };\n\n  render() {\n    const { drawerPosition, drawerLockMode, edgeWidth, minSwipeDistance } =\n      this.props;\n\n    const fromLeft = drawerPosition === 'left';\n\n    // gestureOrientation is 1 if the expected gesture is from left to right and\n    // -1 otherwise e.g. when drawer is on the left and is closed we expect left\n    // to right gesture, thus orientation will be 1.\n    const gestureOrientation =\n      (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1);\n\n    // When drawer is closed we want the hitSlop to be horizontally shorter than\n    // the container size by the value of SLOP. This will make it only activate\n    // when gesture happens not further than SLOP away from the edge\n    const hitSlop = fromLeft\n      ? { left: 0, width: this.drawerShown ? undefined : edgeWidth }\n      : { right: 0, width: this.drawerShown ? undefined : edgeWidth };\n\n    return (\n      <PanGestureHandler\n        // @ts-ignore could be fixed in handler types\n        userSelect={this.props.userSelect}\n        ref={this.setPanGestureRef}\n        hitSlop={hitSlop}\n        activeOffsetX={gestureOrientation * minSwipeDistance!}\n        failOffsetY={[-15, 15]}\n        onGestureEvent={this.onGestureEvent}\n        onHandlerStateChange={this.openingHandlerStateChange}\n        enableTrackpadTwoFingerGesture={\n          this.props.enableTrackpadTwoFingerGesture\n        }\n        enabled={\n          drawerLockMode !== 'locked-closed' && drawerLockMode !== 'locked-open'\n        }>\n        {this.renderDrawer()}\n      </PanGestureHandler>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  drawerContainer: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1001,\n    flexDirection: 'row',\n  },\n  containerInFront: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1002,\n  },\n  containerOnBack: {\n    ...StyleSheet.absoluteFillObject,\n  },\n  main: {\n    flex: 1,\n    zIndex: 0,\n    overflow: 'hidden',\n  },\n  overlay: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1000,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}