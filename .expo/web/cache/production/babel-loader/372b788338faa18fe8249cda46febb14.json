{"ast":null,"code":"import color from'color';import{black,white}from\"../../styles/themes/v2/colors\";export var getCardCoverStyle=function getCardCoverStyle(_ref){var theme=_ref.theme,index=_ref.index,total=_ref.total;var isV3=theme.isV3,roundness=theme.roundness;if(isV3){return{borderRadius:3*roundness};}if(index===0){if(total===1){return{borderRadius:roundness};}return{borderTopLeftRadius:roundness,borderTopRightRadius:roundness};}if(typeof total==='number'&&index===total-1){return{borderBottomLeftRadius:roundness};}return undefined;};var getBorderColor=function getBorderColor(_ref2){var theme=_ref2.theme;if(theme.isV3){return theme.colors.outline;}if(theme.dark){return color(white).alpha(0.12).rgb().string();}return color(black).alpha(0.12).rgb().string();};var getBackgroundColor=function getBackgroundColor(_ref3){var theme=_ref3.theme,isMode=_ref3.isMode;if(theme.isV3){if(isMode('contained')){return theme.colors.surfaceVariant;}if(isMode('outlined')){return theme.colors.surface;}}return undefined;};export var getCardColors=function getCardColors(_ref4){var theme=_ref4.theme,mode=_ref4.mode;var isMode=function isMode(modeToCompare){return mode===modeToCompare;};return{backgroundColor:getBackgroundColor({theme:theme,isMode:isMode}),borderColor:getBorderColor({theme:theme})};};","map":{"version":3,"mappings":"AAAA,MAAOA,MAAK,KAAM,OAAO,CAEzB,OAASC,KAAK,CAAEC,KAAK,qCAKrB,MAAO,IAAMC,kBAAiB,CAAG,QAApBA,kBAAiB,CAAGC,KAQ3B,IAPJC,MAAK,CAOND,KAPCC,KAAK,CACLC,KAAK,CAMNF,KANCE,KAAK,CACLC,MAKDH,KALCG,MAMA,GAAQC,KAAI,CAAgBH,KAAK,CAAzBG,IAAI,CAAEC,UAAcJ,KAAK,CAAnBI,UAEd,GAAID,IAAI,CAAE,CACR,MAAO,CACLE,YAAY,CAAE,CAAC,CAAGD,SACpB,CAAC,CACH,CAEA,GAAIH,KAAK,GAAK,CAAC,CAAE,CACf,GAAIC,KAAK,GAAK,CAAC,CAAE,CACf,MAAO,CACLG,YAAY,CAAED,SAChB,CAAC,CACH,CAEA,MAAO,CACLE,mBAAmB,CAAEF,SAAS,CAC9BG,oBAAoB,CAAEH,SACxB,CAAC,CACH,CAEA,GAAI,MAAOF,MAAK,GAAK,QAAQ,EAAID,KAAK,GAAKC,KAAK,CAAG,CAAC,CAAE,CACpD,MAAO,CACLM,sBAAsB,CAAEJ,SAC1B,CAAC,CACH,CAEA,MAAOK,UAAS,CAClB,CAAC,CAED,GAAMC,eAAc,CAAG,QAAjBA,eAAc,CAAGC,MAAyC,IAAtCX,OAAiCW,MAAjCX,MACxB,GAAIA,KAAK,CAACG,IAAI,CAAE,CACd,MAAOH,MAAK,CAACY,MAAM,CAACC,OAAO,CAC7B,CAEA,GAAIb,KAAK,CAACc,IAAI,CAAE,CACd,MAAOnB,MAAK,CAACE,KAAK,CAAC,CAACkB,KAAK,CAAC,IAAI,CAAC,CAACC,GAAG,EAAE,CAACC,MAAM,EAAE,CAChD,CACA,MAAOtB,MAAK,CAACC,KAAK,CAAC,CAACmB,KAAK,CAAC,IAAI,CAAC,CAACC,GAAG,EAAE,CAACC,MAAM,EAAE,CAChD,CAAC,CAED,GAAMC,mBAAkB,CAAG,QAArBA,mBAAkB,CAAGC,MAMrB,IALJnB,MAAK,CAKNmB,MALCnB,KAAK,CACLoB,OAIDD,MAJCC,OAKA,GAAIpB,KAAK,CAACG,IAAI,CAAE,CACd,GAAIiB,MAAM,CAAC,WAAW,CAAC,CAAE,CACvB,MAAOpB,MAAK,CAACY,MAAM,CAACS,cAAc,CACpC,CACA,GAAID,MAAM,CAAC,UAAU,CAAC,CAAE,CACtB,MAAOpB,MAAK,CAACY,MAAM,CAACU,OAAO,CAC7B,CACF,CACA,MAAOb,UAAS,CAClB,CAAC,CAED,MAAO,IAAMc,cAAa,CAAG,QAAhBA,cAAa,CAAGC,MAMvB,IALJxB,MAAK,CAKNwB,MALCxB,KAAK,CACLyB,KAIDD,MAJCC,KAKA,GAAML,OAAM,CAAIM,QAAVN,OAAM,CAAIM,aAAuB,CAAK,CAC1C,MAAOD,KAAI,GAAKC,aAAa,CAC/B,CAAC,CAED,MAAO,CACLC,eAAe,CAAET,kBAAkB,CAAC,CAClClB,KAAK,CAALA,KAAK,CACLoB,aACF,CAAC,CAAC,CACFQ,WAAW,CAAElB,cAAc,CAAC,CAAEV,WAAM,CAAC,CACvC,CAAC,CACH,CAAC","names":["color","black","white","getCardCoverStyle","_ref","theme","index","total","isV3","roundness","borderRadius","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","undefined","getBorderColor","_ref2","colors","outline","dark","alpha","rgb","string","getBackgroundColor","_ref3","isMode","surfaceVariant","surface","getCardColors","_ref4","mode","modeToCompare","backgroundColor","borderColor"],"sources":["utils.tsx"],"sourcesContent":["import color from 'color';\n\nimport { black, white } from '../../styles/themes/v2/colors';\nimport type { InternalTheme } from '../../types';\n\ntype CardMode = 'elevated' | 'outlined' | 'contained';\n\nexport const getCardCoverStyle = ({\n  theme,\n  index,\n  total,\n}: {\n  theme: InternalTheme;\n  index?: number;\n  total?: number;\n}) => {\n  const { isV3, roundness } = theme;\n\n  if (isV3) {\n    return {\n      borderRadius: 3 * roundness,\n    };\n  }\n\n  if (index === 0) {\n    if (total === 1) {\n      return {\n        borderRadius: roundness,\n      };\n    }\n\n    return {\n      borderTopLeftRadius: roundness,\n      borderTopRightRadius: roundness,\n    };\n  }\n\n  if (typeof total === 'number' && index === total - 1) {\n    return {\n      borderBottomLeftRadius: roundness,\n    };\n  }\n\n  return undefined;\n};\n\nconst getBorderColor = ({ theme }: { theme: InternalTheme }) => {\n  if (theme.isV3) {\n    return theme.colors.outline;\n  }\n\n  if (theme.dark) {\n    return color(white).alpha(0.12).rgb().string();\n  }\n  return color(black).alpha(0.12).rgb().string();\n};\n\nconst getBackgroundColor = ({\n  theme,\n  isMode,\n}: {\n  theme: InternalTheme;\n  isMode: (mode: CardMode) => boolean;\n}) => {\n  if (theme.isV3) {\n    if (isMode('contained')) {\n      return theme.colors.surfaceVariant;\n    }\n    if (isMode('outlined')) {\n      return theme.colors.surface;\n    }\n  }\n  return undefined;\n};\n\nexport const getCardColors = ({\n  theme,\n  mode,\n}: {\n  theme: InternalTheme;\n  mode: CardMode;\n}) => {\n  const isMode = (modeToCompare: CardMode) => {\n    return mode === modeToCompare;\n  };\n\n  return {\n    backgroundColor: getBackgroundColor({\n      theme,\n      isMode,\n    }),\n    borderColor: getBorderColor({ theme }),\n  };\n};\n"]},"metadata":{},"sourceType":"module"}