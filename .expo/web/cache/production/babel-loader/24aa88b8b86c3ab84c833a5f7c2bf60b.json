{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}function _extends(){_extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import React from'react';import{getConstants}from\"../helpers\";import{AdornmentSide,AdornmentType,InputMode}from\"./enums\";import TextInputAffix,{AffixAdornment}from\"./TextInputAffix\";import TextInputIcon,{IconAdornment}from\"./TextInputIcon\";export function getAdornmentConfig(_ref){var left=_ref.left,right=_ref.right;var adornmentConfig=[];if(left||right){[{side:AdornmentSide.Left,adornment:left},{side:AdornmentSide.Right,adornment:right}].forEach(function(_ref2){var side=_ref2.side,adornment=_ref2.adornment;if(adornment&&React.isValidElement(adornment)){var type;if(adornment.type===TextInputAffix){type=AdornmentType.Affix;}else if(adornment.type===TextInputIcon){type=AdornmentType.Icon;}adornmentConfig.push({side:side,type:type});}});}return adornmentConfig;}export function getAdornmentStyleAdjustmentForNativeInput(_ref3){var adornmentConfig=_ref3.adornmentConfig,leftAffixWidth=_ref3.leftAffixWidth,rightAffixWidth=_ref3.rightAffixWidth,paddingHorizontal=_ref3.paddingHorizontal,_ref3$inputOffset=_ref3.inputOffset,inputOffset=_ref3$inputOffset===void 0?0:_ref3$inputOffset,mode=_ref3.mode,isV3=_ref3.isV3;var _getConstants=getConstants(isV3),OUTLINED_INPUT_OFFSET=_getConstants.OUTLINED_INPUT_OFFSET,ADORNMENT_OFFSET=_getConstants.ADORNMENT_OFFSET;if(adornmentConfig.length){var adornmentStyleAdjustmentForNativeInput=adornmentConfig.map(function(_ref4){var _ref7;var type=_ref4.type,side=_ref4.side;var isLeftSide=side===AdornmentSide.Left;var inputModeAdornemntOffset=mode===InputMode.Outlined?ADORNMENT_OFFSET+OUTLINED_INPUT_OFFSET:ADORNMENT_OFFSET;var paddingKey=\"padding\"+captalize(side);var affixWidth=isLeftSide?leftAffixWidth:rightAffixWidth;var padding=typeof paddingHorizontal==='number'?paddingHorizontal:inputModeAdornemntOffset;var offset=affixWidth+padding;var isAffix=type===AdornmentType.Affix;var marginKey=\"margin\"+captalize(side);return _ref7={},_defineProperty(_ref7,marginKey,isAffix?0:offset),_defineProperty(_ref7,paddingKey,isAffix?offset:inputOffset),_ref7;});var allStyleAdjustmentsMerged=adornmentStyleAdjustmentForNativeInput.reduce(function(mergedStyles,currentStyle){return _objectSpread(_objectSpread({},mergedStyles),currentStyle);},{});return allStyleAdjustmentsMerged;}else{return[{}];}}var captalize=function captalize(text){return text.charAt(0).toUpperCase()+text.slice(1);};var TextInputAdornment=function TextInputAdornment(_ref5){var adornmentConfig=_ref5.adornmentConfig,left=_ref5.left,right=_ref5.right,onAffixChange=_ref5.onAffixChange,textStyle=_ref5.textStyle,visible=_ref5.visible,topPosition=_ref5.topPosition,isTextInputFocused=_ref5.isTextInputFocused,forceFocus=_ref5.forceFocus,paddingHorizontal=_ref5.paddingHorizontal,maxFontSizeMultiplier=_ref5.maxFontSizeMultiplier;if(adornmentConfig.length){return React.createElement(React.Fragment,null,adornmentConfig.map(function(_ref6){var type=_ref6.type,side=_ref6.side;var inputAdornmentComponent;if(side===AdornmentSide.Left){inputAdornmentComponent=left;}else if(side===AdornmentSide.Right){inputAdornmentComponent=right;}var commonProps={side:side,testID:side+\"-\"+type+\"-adornment\",isTextInputFocused:isTextInputFocused,paddingHorizontal:paddingHorizontal};if(type===AdornmentType.Icon){return React.createElement(IconAdornment,_extends({},commonProps,{key:side,icon:inputAdornmentComponent,topPosition:topPosition[AdornmentType.Icon],forceFocus:forceFocus}));}else if(type===AdornmentType.Affix){return React.createElement(AffixAdornment,_extends({},commonProps,{key:side,topPosition:topPosition[AdornmentType.Affix][side],affix:inputAdornmentComponent,textStyle:textStyle,onLayout:onAffixChange[side],visible:visible,maxFontSizeMultiplier:maxFontSizeMultiplier}));}else{return null;}}));}else{return null;}};export default TextInputAdornment;","map":{"version":3,"sources":["TextInputAdornment.tsx"],"names":["React","getConstants","AdornmentSide","AdornmentType","InputMode","TextInputAffix","AffixAdornment","TextInputIcon","IconAdornment","getAdornmentConfig","left","right","adornmentConfig","side","Left","adornment","Right","forEach","isValidElement","type","Affix","Icon","push","getAdornmentStyleAdjustmentForNativeInput","leftAffixWidth","rightAffixWidth","paddingHorizontal","inputOffset","mode","isV3","OUTLINED_INPUT_OFFSET","ADORNMENT_OFFSET","length","adornmentStyleAdjustmentForNativeInput","map","isLeftSide","inputModeAdornemntOffset","Outlined","paddingKey","captalize","affixWidth","padding","offset","isAffix","marginKey","allStyleAdjustmentsMerged","reduce","mergedStyles","currentStyle","text","charAt","toUpperCase","slice","TextInputAdornment","onAffixChange","textStyle","visible","topPosition","isTextInputFocused","forceFocus","maxFontSizeMultiplier","inputAdornmentComponent","commonProps","testID"],"mappings":"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","sourcesContent":["import React from 'react';\nimport type {\n  LayoutChangeEvent,\n  TextStyle,\n  StyleProp,\n  Animated,\n} from 'react-native';\n\nimport { getConstants } from '../helpers';\nimport { AdornmentSide, AdornmentType, InputMode } from './enums';\nimport TextInputAffix, { AffixAdornment } from './TextInputAffix';\nimport TextInputIcon, { IconAdornment } from './TextInputIcon';\nimport type {\n  AdornmentConfig,\n  AdornmentStyleAdjustmentForNativeInput,\n} from './types';\n\nexport function getAdornmentConfig({\n  left,\n  right,\n}: {\n  left?: React.ReactNode;\n  right?: React.ReactNode;\n}): Array<AdornmentConfig> {\n  let adornmentConfig: any[] = [];\n  if (left || right) {\n    [\n      { side: AdornmentSide.Left, adornment: left },\n      { side: AdornmentSide.Right, adornment: right },\n    ].forEach(({ side, adornment }) => {\n      if (adornment && React.isValidElement(adornment)) {\n        let type;\n        if (adornment.type === TextInputAffix) {\n          type = AdornmentType.Affix;\n        } else if (adornment.type === TextInputIcon) {\n          type = AdornmentType.Icon;\n        }\n        adornmentConfig.push({\n          side,\n          type,\n        });\n      }\n    });\n  }\n\n  return adornmentConfig;\n}\n\nexport function getAdornmentStyleAdjustmentForNativeInput({\n  adornmentConfig,\n  leftAffixWidth,\n  rightAffixWidth,\n  paddingHorizontal,\n  inputOffset = 0,\n  mode,\n  isV3,\n}: {\n  inputOffset?: number;\n  adornmentConfig: AdornmentConfig[];\n  leftAffixWidth: number;\n  rightAffixWidth: number;\n  mode?: 'outlined' | 'flat';\n  paddingHorizontal?: number | string;\n  isV3?: boolean;\n}): AdornmentStyleAdjustmentForNativeInput | {} {\n  const { OUTLINED_INPUT_OFFSET, ADORNMENT_OFFSET } = getConstants(isV3);\n\n  if (adornmentConfig.length) {\n    const adornmentStyleAdjustmentForNativeInput = adornmentConfig.map(\n      ({ type, side }: AdornmentConfig) => {\n        const isLeftSide = side === AdornmentSide.Left;\n        const inputModeAdornemntOffset =\n          mode === InputMode.Outlined\n            ? ADORNMENT_OFFSET + OUTLINED_INPUT_OFFSET\n            : ADORNMENT_OFFSET;\n        const paddingKey = `padding${captalize(side)}`;\n        const affixWidth = isLeftSide ? leftAffixWidth : rightAffixWidth;\n        const padding =\n          typeof paddingHorizontal === 'number'\n            ? paddingHorizontal\n            : inputModeAdornemntOffset;\n        const offset = affixWidth + padding;\n\n        const isAffix = type === AdornmentType.Affix;\n        const marginKey = `margin${captalize(side)}`;\n\n        return {\n          [marginKey]: isAffix ? 0 : offset,\n          [paddingKey]: isAffix ? offset : inputOffset,\n        };\n      }\n    );\n    const allStyleAdjustmentsMerged =\n      adornmentStyleAdjustmentForNativeInput.reduce(\n        (mergedStyles, currentStyle) => {\n          return {\n            ...mergedStyles,\n            ...currentStyle,\n          };\n        },\n        {}\n      );\n    return allStyleAdjustmentsMerged;\n  } else {\n    return [{}];\n  }\n}\n\nconst captalize = (text: string) =>\n  text.charAt(0).toUpperCase() + text.slice(1);\n\nexport interface TextInputAdornmentProps {\n  forceFocus: () => void;\n  adornmentConfig: AdornmentConfig[];\n  topPosition: {\n    [AdornmentType.Affix]: {\n      [AdornmentSide.Left]: number | null;\n      [AdornmentSide.Right]: number | null;\n    };\n    [AdornmentType.Icon]: number;\n  };\n  onAffixChange: {\n    [AdornmentSide.Left]: (event: LayoutChangeEvent) => void;\n    [AdornmentSide.Right]: (event: LayoutChangeEvent) => void;\n  };\n  left?: React.ReactNode;\n  right?: React.ReactNode;\n  textStyle?: StyleProp<TextStyle>;\n  visible?: Animated.Value;\n  isTextInputFocused: boolean;\n  paddingHorizontal?: number | string;\n  maxFontSizeMultiplier?: number | undefined | null;\n}\n\nconst TextInputAdornment: React.FunctionComponent<TextInputAdornmentProps> = ({\n  adornmentConfig,\n  left,\n  right,\n  onAffixChange,\n  textStyle,\n  visible,\n  topPosition,\n  isTextInputFocused,\n  forceFocus,\n  paddingHorizontal,\n  maxFontSizeMultiplier,\n}) => {\n  if (adornmentConfig.length) {\n    return (\n      <>\n        {adornmentConfig.map(({ type, side }: AdornmentConfig) => {\n          let inputAdornmentComponent;\n          if (side === AdornmentSide.Left) {\n            inputAdornmentComponent = left;\n          } else if (side === AdornmentSide.Right) {\n            inputAdornmentComponent = right;\n          }\n\n          const commonProps = {\n            side: side,\n            testID: `${side}-${type}-adornment`,\n            isTextInputFocused,\n            paddingHorizontal,\n          };\n          if (type === AdornmentType.Icon) {\n            return (\n              <IconAdornment\n                {...commonProps}\n                key={side}\n                icon={inputAdornmentComponent}\n                topPosition={topPosition[AdornmentType.Icon]}\n                forceFocus={forceFocus}\n              />\n            );\n          } else if (type === AdornmentType.Affix) {\n            return (\n              <AffixAdornment\n                {...commonProps}\n                key={side}\n                topPosition={topPosition[AdornmentType.Affix][side]}\n                affix={inputAdornmentComponent}\n                textStyle={textStyle}\n                onLayout={onAffixChange[side]}\n                visible={visible}\n                maxFontSizeMultiplier={maxFontSizeMultiplier}\n              />\n            );\n          } else {\n            return null;\n          }\n        })}\n      </>\n    );\n  } else {\n    return null;\n  }\n};\n\nexport default TextInputAdornment;\n"]},"metadata":{},"sourceType":"module"}