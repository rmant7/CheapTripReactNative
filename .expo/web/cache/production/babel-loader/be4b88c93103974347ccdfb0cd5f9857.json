{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"status\",\"disabled\",\"onPress\",\"theme\",\"testID\"];function _extends(){_extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import*as React from'react';import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import View from\"react-native-web/dist/exports/View\";import{withInternalTheme}from\"../../core/theming\";import MaterialCommunityIcon from\"../MaterialCommunityIcon\";import TouchableRipple from\"../TouchableRipple/TouchableRipple\";import{getSelectionControlIOSColor}from\"./utils\";var CheckboxIOS=function CheckboxIOS(_ref){var status=_ref.status,disabled=_ref.disabled,onPress=_ref.onPress,theme=_ref.theme,testID=_ref.testID,rest=_objectWithoutProperties(_ref,_excluded);var checked=status==='checked';var indeterminate=status==='indeterminate';var _getSelectionControlI=getSelectionControlIOSColor({theme:theme,disabled:disabled,customColor:rest.color}),checkedColor=_getSelectionControlI.checkedColor,rippleColor=_getSelectionControlI.rippleColor;var icon=indeterminate?'minus':'check';return React.createElement(TouchableRipple,_extends({},rest,{borderless:true,rippleColor:rippleColor,onPress:onPress,disabled:disabled,accessibilityRole:\"checkbox\",accessibilityState:{disabled:disabled,checked:checked},accessibilityLiveRegion:\"polite\",style:styles.container,testID:testID}),React.createElement(View,{style:{opacity:indeterminate||checked?1:0}},React.createElement(MaterialCommunityIcon,{allowFontScaling:false,name:icon,size:24,color:checkedColor,direction:\"ltr\"})));};CheckboxIOS.displayName='Checkbox.IOS';var styles=StyleSheet.create({container:{borderRadius:18,padding:6}});export default withInternalTheme(CheckboxIOS);var CheckboxIOSWithTheme=withInternalTheme(CheckboxIOS);export{CheckboxIOSWithTheme as CheckboxIOS};","map":{"version":3,"sources":["CheckboxIOS.tsx"],"names":["React","withInternalTheme","MaterialCommunityIcon","TouchableRipple","getSelectionControlIOSColor","CheckboxIOS","status","disabled","onPress","theme","testID","rest","checked","indeterminate","checkedColor","rippleColor","customColor","color","icon","styles","container","opacity","displayName","StyleSheet","create","borderRadius","padding","CheckboxIOSWithTheme"],"mappings":"+bAAA,MAAO,GAAKA,MAAK,KAAM,OAAO,CAAA,sHAG9B,OAASC,iBAAiB,0BAE1B,MAAOC,sBAAqB,gCAC5B,MAAOC,gBAAe,0CACtB,OAASC,2BAA2B,eA6CpC,GAAMC,YAAW,CAAG,QAAdA,YAAW,CAAG,IAAA,CAOP,CAPQ,GACnBC,OAAM,CAMA,IAAA,CANNA,MAAM,CACNC,QAAQ,CAKF,IAAA,CALNA,QAAQ,CACRC,OAAO,CAID,IAAA,CAJNA,OAAO,CACPC,KAAK,CAGC,IAAA,CAHNA,KAAK,CACLC,MAAM,CAEA,IAAA,CAFNA,MAAM,CACHC,IAAAA,0BACG,IAAA,YACN,GAAMC,QAAO,CAAGN,MAAM,GAAK,SAAS,CACpC,GAAMO,cAAa,CAAGP,MAAM,GAAK,eAAe,CAEhD,0BAAsCF,2BAA2B,CAAC,CAChEK,KAAK,CAALA,KAAK,CACLF,QAAQ,CAARA,QAAQ,CACRS,WAAW,CAAEL,IAAI,CAACM,KACpB,CAAC,CAAC,CAJMH,YAAY,uBAAZA,YAAY,CAAEC,WAAAA,uBAAAA,WAAAA,CAMtB,GAAMG,KAAI,CAAGL,aAAa,CAAG,OAAO,CAAG,OAAO,CAE9C,MACE,MAAA,CAAA,aAAA,CAAC,eAAe,CAAA,QAAA,CAAA,CAAA,CAAA,CACVF,IAAI,CAAA,CACR,UAAU,CAAA,IAAA,CACV,WAAW,CAAEI,WAAY,CACzB,OAAO,CAAEP,OAAQ,CACjB,QAAQ,CAAED,QAAS,CACnB,iBAAiB,CAAC,UAAU,CAC5B,kBAAkB,CAAE,CAAEA,QAAQ,CAARA,QAAQ,CAAEK,OAAAA,CAAAA,OAAQ,CAAE,CAC1C,uBAAuB,CAAC,QAAQ,CAChC,KAAK,CAAEO,MAAM,CAACC,SAAU,CACxB,MAAM,CAAEV,MAAO,CAAA,CAAA,CAEf,KAAA,CAAA,aAAA,CAAC,IAAI,CAAA,CAAC,KAAK,CAAE,CAAEW,OAAO,CAAER,aAAa,EAAID,OAAO,CAAG,CAAC,CAAG,CAAE,CAAE,CAAA,CACzD,KAAA,CAAA,aAAA,CAAC,qBAAqB,CAAA,CACpB,gBAAgB,CAAE,KAAM,CACxB,IAAI,CAAEM,IAAK,CACX,IAAI,CAAE,EAAG,CACT,KAAK,CAAEJ,YAAa,CACpB,SAAS,CAAC,KAAK,CAAA,CACf,CACG,CACS,CAEtB,CAAC,CAEDT,WAAW,CAACiB,WAAW,CAAG,cAAc,CAExC,GAAMH,OAAM,CAAGI,UAAU,CAACC,MAAM,CAAC,CAC/BJ,SAAS,CAAE,CACTK,YAAY,CAAE,EAAE,CAChBC,OAAO,CAAE,CACX,CACF,CAAC,CAAC,CAEF,cAAezB,kBAAiB,CAACI,WAAW,CAAC,CAG7C,GAAMsB,qBAAoB,CAAG1B,iBAAiB,CAACI,WAAW,CAAC,CAE3D,OAASsB,oBAAoB,GAAItB,YAAW","sourcesContent":["import * as React from 'react';\nimport { GestureResponderEvent, StyleSheet, View } from 'react-native';\n\nimport { withInternalTheme } from '../../core/theming';\nimport type { $RemoveChildren, InternalTheme } from '../../types';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { getSelectionControlIOSColor } from './utils';\n\nexport type Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: InternalTheme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n/**\n * Checkboxes allow the selection of multiple options from a set.\n * This component follows platform guidelines for iOS, but can be used\n * on any platform.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/checkbox-enabled.ios.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/checkbox-disabled.ios.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nconst CheckboxIOS = ({\n  status,\n  disabled,\n  onPress,\n  theme,\n  testID,\n  ...rest\n}: Props) => {\n  const checked = status === 'checked';\n  const indeterminate = status === 'indeterminate';\n\n  const { checkedColor, rippleColor } = getSelectionControlIOSColor({\n    theme,\n    disabled,\n    customColor: rest.color,\n  });\n\n  const icon = indeterminate ? 'minus' : 'check';\n\n  return (\n    <TouchableRipple\n      {...rest}\n      borderless\n      rippleColor={rippleColor}\n      onPress={onPress}\n      disabled={disabled}\n      accessibilityRole=\"checkbox\"\n      accessibilityState={{ disabled, checked }}\n      accessibilityLiveRegion=\"polite\"\n      style={styles.container}\n      testID={testID}\n    >\n      <View style={{ opacity: indeterminate || checked ? 1 : 0 }}>\n        <MaterialCommunityIcon\n          allowFontScaling={false}\n          name={icon}\n          size={24}\n          color={checkedColor}\n          direction=\"ltr\"\n        />\n      </View>\n    </TouchableRipple>\n  );\n};\n\nCheckboxIOS.displayName = 'Checkbox.IOS';\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6,\n  },\n});\n\nexport default withInternalTheme(CheckboxIOS);\n\n// @component-docs ignore-next-line\nconst CheckboxIOSWithTheme = withInternalTheme(CheckboxIOS);\n// @component-docs ignore-next-line\nexport { CheckboxIOSWithTheme as CheckboxIOS };\n"]},"metadata":{},"sourceType":"module"}