{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"leftInset\",\"horizontalInset\",\"style\",\"theme\",\"bold\"];function _extends(){_extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import*as React from'react';import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import View from\"react-native-web/dist/exports/View\";import color from'color';import{withInternalTheme}from\"../core/theming\";import{black,white}from\"../styles/themes/v2/colors\";var Divider=function Divider(_ref){var leftInset=_ref.leftInset,_ref$horizontalInset=_ref.horizontalInset,horizontalInset=_ref$horizontalInset===void 0?false:_ref$horizontalInset,style=_ref.style,theme=_ref.theme,_ref$bold=_ref.bold,bold=_ref$bold===void 0?false:_ref$bold,rest=_objectWithoutProperties(_ref,_excluded);var isDarkTheme=theme.dark,isV3=theme.isV3;var dividerColor=isV3?theme.colors.outlineVariant:color(isDarkTheme?white:black).alpha(0.12).rgb().string();return React.createElement(View,_extends({},rest,{style:[{height:StyleSheet.hairlineWidth,backgroundColor:dividerColor},leftInset&&(isV3?styles.v3LeftInset:styles.leftInset),isV3&&horizontalInset&&styles.horizontalInset,isV3&&bold&&styles.bold,style]}));};var styles=StyleSheet.create({leftInset:{marginLeft:72},v3LeftInset:{marginLeft:16},horizontalInset:{marginLeft:16,marginRight:16},bold:{height:1}});export default withInternalTheme(Divider);","map":{"version":3,"mappings":"qcAAA,MAAO,GAAKA,MAAK,KAAM,OAAO,uHAG9B,MAAOC,MAAK,KAAM,OAAO,CAEzB,OAASC,iBAAiB,uBAC1B,OAASC,KAAK,CAAEC,KAAK,kCAqDrB,GAAMC,QAAO,CAAG,QAAVA,QAAO,CAAGC,KAOH,IANXC,UAAS,CAMHD,KANNC,SAAS,sBAMHD,KALNE,eAAe,CAAfA,eAAe,+BAAG,KAAK,sBACvBC,KAAK,CAICH,KAJNG,KAAK,CACLC,KAAK,CAGCJ,KAHNI,KAAK,WAGCJ,KAFNK,IAAI,CAAJA,IAAI,oBAAG,KAAK,WACTC,8BACGN,gBACN,GAAcO,YAAW,CAAWH,KAAK,CAAjCI,IAAI,CAAeC,KAASL,KAAK,CAAdK,KAE3B,GAAMC,aAAY,CAAGD,IAAI,CACrBL,KAAK,CAACO,MAAM,CAACC,cAAc,CAC3BjB,KAAK,CAACY,WAAW,CAAGT,KAAK,CAAGD,KAAK,CAAC,CAC/BgB,KAAK,CAAC,IAAI,CAAC,CACXC,GAAG,EAAE,CACLC,MAAM,EAAE,CAEf,MACErB,qBAACsB,IAAI,aACCV,IAAI,EACRH,KAAK,CAAE,CACL,CAAEc,MAAM,CAAEC,UAAU,CAACC,aAAa,CAAEC,eAAe,CAAEV,YAAa,CAAC,CACnET,SAAS,GAAKQ,IAAI,CAAGY,MAAM,CAACC,WAAW,CAAGD,MAAM,CAACpB,SAAS,CAAC,CAC3DQ,IAAI,EAAIP,eAAe,EAAImB,MAAM,CAACnB,eAAe,CACjDO,IAAI,EAAIJ,IAAI,EAAIgB,MAAM,CAAChB,IAAI,CAC3BF,KAAK,CACL,GACF,CAEN,CAAC,CAED,GAAMkB,OAAM,CAAGH,UAAU,CAACK,MAAM,CAAC,CAC/BtB,SAAS,CAAE,CACTuB,UAAU,CAAE,EACd,CAAC,CACDF,WAAW,CAAE,CACXE,UAAU,CAAE,EACd,CAAC,CACDtB,eAAe,CAAE,CACfsB,UAAU,CAAE,EAAE,CACdC,WAAW,CAAE,EACf,CAAC,CACDpB,IAAI,CAAE,CACJY,MAAM,CAAE,CACV,CACF,CAAC,CAAC,CAEF,cAAerB,kBAAiB,CAACG,OAAO,CAAC","names":["React","color","withInternalTheme","black","white","Divider","_ref","leftInset","horizontalInset","style","theme","bold","rest","isDarkTheme","dark","isV3","dividerColor","colors","outlineVariant","alpha","rgb","string","View","height","StyleSheet","hairlineWidth","backgroundColor","styles","v3LeftInset","create","marginLeft","marginRight"],"sources":["Divider.tsx"],"sourcesContent":["import * as React from 'react';\nimport { StyleProp, StyleSheet, View, ViewStyle } from 'react-native';\n\nimport color from 'color';\n\nimport { withInternalTheme } from '../core/theming';\nimport { black, white } from '../styles/themes/v2/colors';\nimport type { $RemoveChildren, InternalTheme } from '../types';\n\nexport type Props = $RemoveChildren<typeof View> & {\n  /**\n   * @renamed Renamed from 'inset' to 'leftInset` in v5.x\n   * Whether divider has a left inset.\n   */\n  leftInset?: boolean;\n  /**\n   * @supported Available in v5.x with theme version 3\n   *  Whether divider has a horizontal inset on both sides.\n   */\n  horizontalInset?: boolean;\n  /**\n   * @supported Available in v5.x with theme version 3\n   *  Whether divider should be bolded.\n   */\n  bold?: boolean;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: InternalTheme;\n};\n\n/**\n * A divider is a thin, lightweight separator that groups content in lists and page layouts.\n *\n * <div class=\"screenshots\">\n *  <figure>\n *    <img class=\"medium\" src=\"screenshots/divider.png\" />\n *  </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Divider, Text } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <View>\n *     <Text>Lemon</Text>\n *     <Divider />\n *     <Text>Mango</Text>\n *     <Divider />\n *   </View>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Divider = ({\n  leftInset,\n  horizontalInset = false,\n  style,\n  theme,\n  bold = false,\n  ...rest\n}: Props) => {\n  const { dark: isDarkTheme, isV3 } = theme;\n\n  const dividerColor = isV3\n    ? theme.colors.outlineVariant\n    : color(isDarkTheme ? white : black)\n        .alpha(0.12)\n        .rgb()\n        .string();\n\n  return (\n    <View\n      {...rest}\n      style={[\n        { height: StyleSheet.hairlineWidth, backgroundColor: dividerColor },\n        leftInset && (isV3 ? styles.v3LeftInset : styles.leftInset),\n        isV3 && horizontalInset && styles.horizontalInset,\n        isV3 && bold && styles.bold,\n        style,\n      ]}\n    />\n  );\n};\n\nconst styles = StyleSheet.create({\n  leftInset: {\n    marginLeft: 72,\n  },\n  v3LeftInset: {\n    marginLeft: 16,\n  },\n  horizontalInset: {\n    marginLeft: 16,\n    marginRight: 16,\n  },\n  bold: {\n    height: 1,\n  },\n});\n\nexport default withInternalTheme(Divider);\n"]},"metadata":{},"sourceType":"module"}