{"ast":null,"code":"import*as React from'react';import NavigationBuilderContext from\"./NavigationBuilderContext\";export default function useOnRouteFocus(_ref){var router=_ref.router,getState=_ref.getState,sourceRouteKey=_ref.key,setState=_ref.setState;var _React$useContext=React.useContext(NavigationBuilderContext),onRouteFocusParent=_React$useContext.onRouteFocus;return React.useCallback(function(key){var state=getState();var result=router.getStateForRouteFocus(state,key);if(result!==state){setState(result);}if(onRouteFocusParent!==undefined&&sourceRouteKey!==undefined){onRouteFocusParent(sourceRouteKey);}},[getState,onRouteFocusParent,router,setState,sourceRouteKey]);}","map":{"version":3,"sources":["useOnRouteFocus.tsx"],"names":["React","NavigationBuilderContext","useOnRouteFocus","router","getState","key","sourceRouteKey","setState","onRouteFocus","onRouteFocusParent","useContext","useCallback","state","result","getStateForRouteFocus","undefined"],"mappings":"AAKA,MAAO,GAAKA,MAAK,KAAM,OAAO,CAE9B,MAAOC,yBAAwB,kCAc/B,cAAe,SAASC,gBAAe,CAAA,IAAA,CAKnB,CALqD,GACvEC,OAAM,CAIU,IAAA,CAJhBA,MAAM,CACNC,QAAQ,CAGQ,IAAA,CAHhBA,QAAQ,CACHE,cAAc,CAEH,IAAA,CAFhBD,GAAG,CACHE,QAAAA,CACgB,IAAA,CADhBA,QAAAA,CAEA,sBAA6CP,KAAK,CAACU,UAAU,CAC3DT,wBAAwB,CACzB,CAFqBQ,kBAAAA,mBAAdD,YAAY,CAIpB,MAAOR,MAAK,CAACW,WAAW,CACrBN,SAAAA,GAAW,CAAK,CACf,GAAMO,MAAK,CAAGR,QAAQ,EAAE,CACxB,GAAMS,OAAM,CAAGV,MAAM,CAACW,qBAAqB,CAACF,KAAK,CAAEP,GAAG,CAAC,CAEvD,GAAIQ,MAAM,GAAKD,KAAK,CAAE,CACpBL,QAAQ,CAACM,MAAM,CAAC,CAClB,CAEA,GAAIJ,kBAAkB,GAAKM,SAAS,EAAIT,cAAc,GAAKS,SAAS,CAAE,CACpEN,kBAAkB,CAACH,cAAc,CAAC,CACpC,CACF,CAAC,CACD,CAACF,QAAQ,CAAEK,kBAAkB,CAAEN,MAAM,CAAEI,QAAQ,CAAED,cAAc,CAAC,CACjE,CACH","sourceRoot":"../../src","sourcesContent":["import * as React from 'react';\nimport NavigationBuilderContext from './NavigationBuilderContext';\n/**\n * Hook to handle focus actions for a route.\n * Focus action needs to be treated specially, coz when a nested route is focused,\n * the parent navigators also needs to be focused.\n */\nexport default function useOnRouteFocus(_ref) {\n  let {\n    router,\n    getState,\n    key: sourceRouteKey,\n    setState\n  } = _ref;\n  const {\n    onRouteFocus: onRouteFocusParent\n  } = React.useContext(NavigationBuilderContext);\n  return React.useCallback(key => {\n    const state = getState();\n    const result = router.getStateForRouteFocus(state, key);\n    if (result !== state) {\n      setState(result);\n    }\n    if (onRouteFocusParent !== undefined && sourceRouteKey !== undefined) {\n      onRouteFocusParent(sourceRouteKey);\n    }\n  }, [getState, onRouteFocusParent, router, setState, sourceRouteKey]);\n}\n//# sourceMappingURL=useOnRouteFocus.js.map"]},"metadata":{},"sourceType":"module"}