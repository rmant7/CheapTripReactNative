{"ast":null,"code":"import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";function _extends(){_extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import*as React from'react';import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import View from\"react-native-web/dist/exports/View\";import{useTheme}from\"../../core/theming\";import SegmentedButtonItem from\"./SegmentedButtonItem\";import{getDisabledSegmentedButtonStyle}from\"./utils\";var SegmentedButtons=function SegmentedButtons(_ref){var value=_ref.value,onValueChange=_ref.onValueChange,buttons=_ref.buttons,multiSelect=_ref.multiSelect,density=_ref.density,style=_ref.style;var theme=useTheme();return React.createElement(View,{style:[styles.row,style]},buttons.map(function(item,i){var disabledChildStyle=getDisabledSegmentedButtonStyle({theme:theme,buttons:buttons,index:i});var segment=i===0?'first':i===buttons.length-1?'last':undefined;var checked=multiSelect&&Array.isArray(value)?value.includes(item.value):value===item.value;var onPress=function onPress(e){var _item$onPress;(_item$onPress=item.onPress)===null||_item$onPress===void 0?void 0:_item$onPress.call(item,e);var nextValue=multiSelect&&Array.isArray(value)?checked?value.filter(function(val){return item.value!==val;}):[].concat(_toConsumableArray(value),[item.value]):item.value;onValueChange(nextValue);};return React.createElement(SegmentedButtonItem,_extends({},item,{key:i,checked:checked,segment:segment,density:density,onPress:onPress,style:[item.style,disabledChildStyle]}));}));};var styles=StyleSheet.create({row:{flexDirection:'row'}});export default SegmentedButtons;export{SegmentedButtons};","map":{"version":3,"sources":["SegmentedButtons.tsx"],"names":["React","useTheme","SegmentedButtonItem","getDisabledSegmentedButtonStyle","SegmentedButtons","value","onValueChange","buttons","multiSelect","density","style","theme","styles","row","map","item","i","disabledChildStyle","index","segment","length","undefined","checked","Array","isArray","includes","onPress","e","nextValue","filter","val","StyleSheet","create","flexDirection"],"mappings":"oXAAA,MAAO,GAAKA,MAAK,KAAM,OAAO,CAAA,sHAS9B,OAASC,QAAQ,0BAEjB,MAAOC,oBAAmB,6BAC1B,OAASC,+BAA+B,eA+GxC,GAAMC,iBAAgB,CAAG,QAAnBA,iBAAgB,CAAG,IAAA,CAOZ,CAPa,GACxBC,MAAK,CAMC,IAAA,CANNA,KAAK,CACLC,aAAa,CAKP,IAAA,CALNA,aAAa,CACbC,OAAO,CAID,IAAA,CAJNA,OAAO,CACPC,WAAW,CAGL,IAAA,CAHNA,WAAW,CACXC,OAAO,CAED,IAAA,CAFNA,OAAO,CACPC,KAAAA,CACM,IAAA,CADNA,KAAAA,CAEA,GAAMC,MAAK,CAAGV,QAAQ,EAAE,CACxB,MACE,MAAA,CAAA,aAAA,CAAC,IAAI,CAAA,CAAC,KAAK,CAAE,CAACW,MAAM,CAACC,GAAG,CAAEH,KAAK,CAAE,CAAA,CAC9BH,OAAO,CAACO,GAAG,CAAC,SAACC,IAAI,CAAEC,CAAC,CAAK,CACxB,GAAMC,mBAAkB,CAAGd,+BAA+B,CAAC,CACzDQ,KAAK,CAALA,KAAK,CACLJ,OAAO,CAAPA,OAAO,CACPW,KAAK,CAAEF,CACT,CAAC,CAAC,CACF,GAAMG,QAAO,CACXH,CAAC,GAAK,CAAC,CAAG,OAAO,CAAGA,CAAC,GAAKT,OAAO,CAACa,MAAM,CAAG,CAAC,CAAG,MAAM,CAAGC,SAAS,CAEnE,GAAMC,QAAO,CACXd,WAAW,EAAIe,KAAK,CAACC,OAAO,CAACnB,KAAK,CAAC,CAC/BA,KAAK,CAACoB,QAAQ,CAACV,IAAI,CAACV,KAAK,CAAC,CAC1BA,KAAK,GAAKU,IAAI,CAACV,KAAK,CAE1B,GAAMqB,QAAO,CAAIC,QAAXD,QAAO,CAAIC,CAAwB,CAAK,CAAA,GAAA,cAAA,CAC5C,CAAA,aAAA,CAAA,IAAI,CAACD,OAAO,IAAA,IAAA,EAAA,aAAA,GAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAAZ,aAAA,CAAA,IAAA,CAAA,IAAI,CAAWC,CAAC,CAAC,CAEjB,GAAMC,UAAS,CACbpB,WAAW,EAAIe,KAAK,CAACC,OAAO,CAACnB,KAAK,CAAC,CAC/BiB,OAAO,CACLjB,KAAK,CAACwB,MAAM,CAAEC,SAAAA,GAAG,QAAKf,KAAI,CAACV,KAAK,GAAKyB,GAAG,GAAC,8BACrCzB,KAAK,GAAEU,IAAI,CAACV,KAAK,EAAC,CACxBU,IAAI,CAACV,KAAK,CAGhBC,aAAa,CAACsB,SAAS,CAAC,CAC1B,CAAC,CAED,MACE,MAAA,CAAA,aAAA,CAAC,mBAAmB,CAAA,QAAA,CAAA,CAAA,CAAA,CACdb,IAAI,CAAA,CACR,GAAG,CAAEC,CAAE,CACP,OAAO,CAAEM,OAAQ,CACjB,OAAO,CAAEH,OAAQ,CACjB,OAAO,CAAEV,OAAQ,CACjB,OAAO,CAAEiB,OAAQ,CACjB,KAAK,CAAE,CAACX,IAAI,CAACL,KAAK,CAAEO,kBAAkB,CAAE,CAAA,CAAA,CACxC,CAEN,CAAC,CAAC,CACG,CAEX,CAAC,CAED,GAAML,OAAM,CAAGmB,UAAU,CAACC,MAAM,CAAC,CAC/BnB,GAAG,CAAE,CACHoB,aAAa,CAAE,KACjB,CACF,CAAC,CAAC,CAEF,cAAe7B,iBAAgB,CAG/B,OAASA,gBAAoC","sourcesContent":["import * as React from 'react';\nimport {\n  GestureResponderEvent,\n  StyleProp,\n  StyleSheet,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport { useTheme } from '../../core/theming';\nimport type { IconSource } from '../Icon';\nimport SegmentedButtonItem from './SegmentedButtonItem';\nimport { getDisabledSegmentedButtonStyle } from './utils';\n\ntype ConditionalValue =\n  | {\n      /**\n       * Array of the currently selected segmented button values.\n       */\n      value: string[];\n      /**\n       * Support multiple selected options.\n       */\n      multiSelect: true;\n      /**\n       * Function to execute on selection change\n       */\n      onValueChange: (value: string[]) => void;\n    }\n  | {\n      /**\n       * Value of the currently selected segmented button.\n       */\n      value: string;\n      /**\n       * Support multiple selected options.\n       */\n      multiSelect?: false;\n      /**\n       * Function to execute on selection change\n       */\n      onValueChange: (value: string) => void;\n    };\n\nexport type Props = {\n  /**\n   * Buttons to display as options in toggle button.\n   * Button should contain the following properties:\n   * - `value`: value of button (required)\n   * - `icon`: icon to display for the item\n   * - `disabled`: whether the button is disabled\n   * - `accessibilityLabel`: acccessibility label for the button. This is read by the screen reader when the user taps the button.\n   * - `onPress`: callback that is called when button is pressed\n   * - `label`: label text of the button\n   * - `showSelectedCheck`: show optional check icon to indicate selected state\n   * - `style`: pass additional styles for the button\n   * - `testID`: testID to be used on tests\n   */\n  buttons: {\n    value: string;\n    icon?: IconSource;\n    disabled?: boolean;\n    accessibilityLabel?: string;\n    onPress?: (event: GestureResponderEvent) => void;\n    label?: string;\n    showSelectedCheck?: boolean;\n    style?: StyleProp<ViewStyle>;\n    testID?: string;\n  }[];\n  /**\n   * Density is applied to the height, to allow usage in denser UIs\n   */\n  density?: 'regular' | 'small' | 'medium' | 'high';\n  style?: StyleProp<ViewStyle>;\n} & ConditionalValue;\n\n/**\n * Segmented buttons can be used to select options, switch views or sort elements.</br>\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/segmented-button.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { SafeAreaView, StyleSheet } from 'react-native';\n * import { SegmentedButtons } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [value, setValue] = React.useState('');\n *\n *   return (\n *     <SafeAreaView style={styles.container}>\n *       <SegmentedButtons\n *         value={value}\n *         onValueChange={setValue}\n *         buttons={[\n *           {\n *             value: 'walk',\n *             label: 'Walking',\n *           },\n *           {\n *             value: 'train',\n *             label: 'Transit',\n *           },\n *           { value: 'drive', label: 'Driving' },\n *         ]}\n *       />\n *     </SafeAreaView>\n *   );\n * };\n *\n * const styles = StyleSheet.create({\n *   container: {\n *     flex: 1,\n *     alignItems: 'center',\n *   },\n * });\n *\n * export default MyComponent;\n *```\n */\nconst SegmentedButtons = ({\n  value,\n  onValueChange,\n  buttons,\n  multiSelect,\n  density,\n  style,\n}: Props) => {\n  const theme = useTheme();\n  return (\n    <View style={[styles.row, style]}>\n      {buttons.map((item, i) => {\n        const disabledChildStyle = getDisabledSegmentedButtonStyle({\n          theme,\n          buttons,\n          index: i,\n        });\n        const segment =\n          i === 0 ? 'first' : i === buttons.length - 1 ? 'last' : undefined;\n\n        const checked =\n          multiSelect && Array.isArray(value)\n            ? value.includes(item.value)\n            : value === item.value;\n\n        const onPress = (e: GestureResponderEvent) => {\n          item.onPress?.(e);\n\n          const nextValue =\n            multiSelect && Array.isArray(value)\n              ? checked\n                ? value.filter((val) => item.value !== val)\n                : [...value, item.value]\n              : item.value;\n\n          // @ts-expect-error: TS doesn't preserve types after destructuring, so the type isn't inferred correctly\n          onValueChange(nextValue);\n        };\n\n        return (\n          <SegmentedButtonItem\n            {...item}\n            key={i}\n            checked={checked}\n            segment={segment}\n            density={density}\n            onPress={onPress}\n            style={[item.style, disabledChildStyle]}\n          />\n        );\n      })}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  row: {\n    flexDirection: 'row',\n  },\n});\n\nexport default SegmentedButtons;\n\n// @component-docs ignore-next-line\nexport { SegmentedButtons as SegmentedButtons };\n"]},"metadata":{},"sourceType":"module"}