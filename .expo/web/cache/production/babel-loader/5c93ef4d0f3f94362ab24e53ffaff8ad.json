{"ast":null,"code":"import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";import{Asset}from'expo-asset';import{CodedError}from'expo-modules-core';import ExpoFontLoader from\"./ExpoFontLoader\";import{FontDisplay}from\"./Font\";function uriFromFontSource(asset){if(typeof asset==='string'){return asset||null;}else if(typeof asset==='object'){return asset.uri||asset.localUri||asset.default||null;}else if(typeof asset==='number'){return uriFromFontSource(Asset.fromModule(asset));}return null;}function displayFromFontSource(asset){return asset.display||FontDisplay.AUTO;}export function fontFamilyNeedsScoping(name){return false;}export function getAssetForSource(source){var uri=uriFromFontSource(source);var display=displayFromFontSource(source);if(!uri||typeof uri!=='string'){throwInvalidSourceError(uri);}return{uri:uri,display:display};}function throwInvalidSourceError(source){var type=typeof source;if(type==='object')type=JSON.stringify(source,null,2);throw new CodedError(\"ERR_FONT_SOURCE\",\"Expected font asset of type `string | FontResource | Asset` instead got: \"+type);}export function loadSingleFontAsync(_x,_x2){return _loadSingleFontAsync.apply(this,arguments);}function _loadSingleFontAsync(){_loadSingleFontAsync=_asyncToGenerator(function*(name,input){if(typeof input!=='object'||typeof input.uri!=='string'||input.downloadAsync){throwInvalidSourceError(input);}yield ExpoFontLoader.loadAsync(name,input);});return _loadSingleFontAsync.apply(this,arguments);}export function getNativeFontName(name){return name;}","map":{"version":3,"sources":["../src/FontLoader.web.ts"],"names":[],"mappings":"uEAAA,OAAS,KAAK,KAAQ,YAAY,CAClC,OAAS,UAAU,KAAQ,mBAAmB,CAE9C,MAAO,eAAc,wBACrB,OAAS,WAAW,cAGpB,QAAS,kBAAiB,CAAC,KAAU,CAAA,CACnC,GAAI,MAAO,MAAK,GAAK,QAAQ,CAAE,CAC7B,MAAO,MAAK,EAAI,IAAI,C,CACrB,IAAM,IAAI,MAAO,MAAK,GAAK,QAAQ,CAAE,CACpC,MAAO,MAAK,CAAC,GAAG,EAAI,KAAK,CAAC,QAAQ,EAAI,KAAK,CAAC,OAAO,EAAI,IAAI,C,CAC5D,IAAM,IAAI,MAAO,MAAK,GAAK,QAAQ,CAAE,CACpC,MAAO,kBAAiB,CAAC,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAClD,CACD,MAAO,KAAI,CACb,CAEA,QAAS,sBAAqB,CAAC,KAAU,CAAA,CACvC,MAAO,MAAK,CAAC,OAAO,EAAI,WAAW,CAAC,IAAI,CAC1C,CAEA,MAAM,SAAU,uBAAsB,CAAC,IAAY,CAAA,CACjD,MAAO,MAAK,CACd,CAEA,MAAM,SAAU,kBAAiB,CAAC,MAAkB,CAAA,CAClD,GAAM,IAAG,CAAG,iBAAiB,CAAC,MAAM,CAAC,CACrC,GAAM,QAAO,CAAG,qBAAqB,CAAC,MAAM,CAAC,CAE7C,GAAI,CAAC,GAAG,EAAI,MAAO,IAAG,GAAK,QAAQ,CAAE,CACnC,uBAAuB,CAAC,GAAG,CAAC,CAC7B,CAED,MAAO,CACL,GAAG,CAAE,GAAI,CACT,OAAO,CAAP,O,CACD,CACH,CAEA,QAAS,wBAAuB,CAAC,MAAW,CAAA,CAC1C,GAAI,KAAI,CAAW,MAAO,OAAM,CAChC,GAAI,IAAI,GAAK,QAAQ,CAAE,IAAI,CAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAE,IAAI,CAAE,CAAC,CAAC,CAC7D,KAAM,IAAI,WAAU,+FAE4D,IAAI,CACnF,CACH,CAEA,eAAsB,oBAAmB,4DASxC,uEATM,UACL,IAAY,CACZ,KAA2B,CAAA,CAE3B,GAAI,MAAO,MAAK,GAAK,QAAQ,EAAI,MAAO,MAAK,CAAC,GAAG,GAAK,QAAQ,EAAK,KAAa,CAAC,aAAa,CAAE,CAC9F,uBAAuB,CAAC,KAAK,CAAC,CAC/B,CAED,KAAM,eAAc,CAAC,SAAS,CAAC,IAAI,CAAE,KAAK,CAAC,CAC7C,CAAC,qDAED,MAAM,SAAU,kBAAiB,CAAC,IAAY,CAAA,CAC5C,MAAO,KAAI,CACb","sourcesContent":["import { Asset } from 'expo-asset';\nimport { CodedError } from 'expo-modules-core';\n\nimport ExpoFontLoader from './ExpoFontLoader';\nimport { FontDisplay } from './Font';\nimport { FontResource, FontSource } from './Font.types';\n\nfunction uriFromFontSource(asset: any): string | null {\n  if (typeof asset === 'string') {\n    return asset || null;\n  } else if (typeof asset === 'object') {\n    return asset.uri || asset.localUri || asset.default || null;\n  } else if (typeof asset === 'number') {\n    return uriFromFontSource(Asset.fromModule(asset));\n  }\n  return null;\n}\n\nfunction displayFromFontSource(asset: any): FontDisplay | undefined {\n  return asset.display || FontDisplay.AUTO;\n}\n\nexport function fontFamilyNeedsScoping(name: string): boolean {\n  return false;\n}\n\nexport function getAssetForSource(source: FontSource): Asset | FontResource {\n  const uri = uriFromFontSource(source);\n  const display = displayFromFontSource(source);\n\n  if (!uri || typeof uri !== 'string') {\n    throwInvalidSourceError(uri);\n  }\n\n  return {\n    uri: uri!,\n    display,\n  };\n}\n\nfunction throwInvalidSourceError(source: any): never {\n  let type: string = typeof source;\n  if (type === 'object') type = JSON.stringify(source, null, 2);\n  throw new CodedError(\n    `ERR_FONT_SOURCE`,\n    `Expected font asset of type \\`string | FontResource | Asset\\` instead got: ${type}`\n  );\n}\n\nexport async function loadSingleFontAsync(\n  name: string,\n  input: Asset | FontResource\n): Promise<void> {\n  if (typeof input !== 'object' || typeof input.uri !== 'string' || (input as any).downloadAsync) {\n    throwInvalidSourceError(input);\n  }\n\n  await ExpoFontLoader.loadAsync(name, input);\n}\n\nexport function getNativeFontName(name: string): string {\n  return name;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}