{"ast":null,"code":"function _extends(){_extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import*as React from'react';import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import View from\"react-native-web/dist/exports/View\";import{useInternalTheme}from\"../../core/theming\";var DialogScrollArea=function DialogScrollArea(props){var theme=useInternalTheme();var borderStyles={borderColor:theme.isV3?theme.colors.surfaceVariant:'rgba(0, 0, 0, .12)',borderTopWidth:theme.isV3?1:StyleSheet.hairlineWidth,borderBottomWidth:theme.isV3?1:StyleSheet.hairlineWidth};return React.createElement(View,_extends({},props,{style:[styles.container,borderStyles,theme.isV3&&styles.v3Container,props.style]}),props.children);};DialogScrollArea.displayName='Dialog.ScrollArea';var styles=StyleSheet.create({container:{paddingHorizontal:24,flexGrow:1,flexShrink:1},v3Container:{marginBottom:24}});export default DialogScrollArea;","map":{"version":3,"mappings":"2SAAA,MAAO,GAAKA,MAAK,KAAM,OAAO,uHAG9B,OAASC,gBAAgB,0BA+CzB,GAAMC,iBAAgB,CAAIC,QAApBD,iBAAgB,CAAIC,KAAY,CAAK,CACzC,GAAMC,MAAK,CAAGH,gBAAgB,EAAE,CAChC,GAAMI,aAAY,CAAG,CACnBC,WAAW,CAAEF,KAAK,CAACG,IAAI,CACnBH,KAAK,CAACI,MAAM,CAACC,cAAc,CAC3B,oBAAoB,CACxBC,cAAc,CAAEN,KAAK,CAACG,IAAI,CAAG,CAAC,CAAGI,UAAU,CAACC,aAAa,CACzDC,iBAAiB,CAAET,KAAK,CAACG,IAAI,CAAG,CAAC,CAAGI,UAAU,CAACC,aACjD,CAAC,CACD,MACEZ,qBAACc,IAAI,aACCX,KAAK,EACTY,KAAK,CAAE,CACLC,MAAM,CAACC,SAAS,CAChBZ,YAAY,CACZD,KAAK,CAACG,IAAI,EAAIS,MAAM,CAACE,WAAW,CAChCf,KAAK,CAACY,KAAK,CACX,GAEDZ,KAAK,CAACgB,QAAQ,CACV,CAEX,CAAC,CAEDjB,gBAAgB,CAACkB,WAAW,CAAG,mBAAmB,CAElD,GAAMJ,OAAM,CAAGL,UAAU,CAACU,MAAM,CAAC,CAC/BJ,SAAS,CAAE,CACTK,iBAAiB,CAAE,EAAE,CACrBC,QAAQ,CAAE,CAAC,CACXC,UAAU,CAAE,CACd,CAAC,CACDN,WAAW,CAAE,CACXO,YAAY,CAAE,EAChB,CACF,CAAC,CAAC,CAEF,cAAevB,iBAAgB","names":["React","useInternalTheme","DialogScrollArea","props","theme","borderStyles","borderColor","isV3","colors","surfaceVariant","borderTopWidth","StyleSheet","hairlineWidth","borderBottomWidth","View","style","styles","container","v3Container","children","displayName","create","paddingHorizontal","flexGrow","flexShrink","marginBottom"],"sources":["DialogScrollArea.tsx"],"sourcesContent":["import * as React from 'react';\nimport { StyleProp, StyleSheet, View, ViewStyle } from 'react-native';\n\nimport { useInternalTheme } from '../../core/theming';\n\nexport type Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Content of the `DialogScrollArea`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * A component to show a scrollable content in a Dialog. The component only provides appropriate styling.\n * For the scrollable content you can use `ScrollView`, `FlatList` etc. depending on your requirement.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/dialog-scroll-area.gif\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ScrollView } from 'react-native';\n * import { Dialog, Portal, Text } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [visible, setVisible] = React.useState(false);\n *\n *   const hideDialog = () => setVisible(false);\n *\n *   return (\n *     <Portal>\n *       <Dialog visible={visible} onDismiss={hideDialog}>\n *         <Dialog.ScrollArea>\n *           <ScrollView contentContainerStyle={{paddingHorizontal: 24}}>\n *             <Text>This is a scrollable area</Text>\n *           </ScrollView>\n *         </Dialog.ScrollArea>\n *       </Dialog>\n *     </Portal>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst DialogScrollArea = (props: Props) => {\n  const theme = useInternalTheme();\n  const borderStyles = {\n    borderColor: theme.isV3\n      ? theme.colors.surfaceVariant\n      : 'rgba(0, 0, 0, .12)',\n    borderTopWidth: theme.isV3 ? 1 : StyleSheet.hairlineWidth,\n    borderBottomWidth: theme.isV3 ? 1 : StyleSheet.hairlineWidth,\n  };\n  return (\n    <View\n      {...props}\n      style={[\n        styles.container,\n        borderStyles,\n        theme.isV3 && styles.v3Container,\n        props.style,\n      ]}\n    >\n      {props.children}\n    </View>\n  );\n};\n\nDialogScrollArea.displayName = 'Dialog.ScrollArea';\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 24,\n    flexGrow: 1,\n    flexShrink: 1,\n  },\n  v3Container: {\n    marginBottom: 24,\n  },\n});\n\nexport default DialogScrollArea;\n"]},"metadata":{},"sourceType":"module"}