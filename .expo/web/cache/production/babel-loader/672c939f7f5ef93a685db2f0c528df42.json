{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}import*as React from'react';import Animated from\"react-native-web/dist/exports/Animated\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import View from\"react-native-web/dist/exports/View\";import color from'color';import{useInternalTheme}from\"../../core/theming\";import Icon from\"../Icon\";import TouchableRipple from\"../TouchableRipple/TouchableRipple\";import Text from\"../Typography/Text\";import{getSegmentedButtonBorderRadius,getSegmentedButtonColors,getSegmentedButtonDensityPadding}from\"./utils\";var SegmentedButtonItem=function SegmentedButtonItem(_ref){var checked=_ref.checked,accessibilityLabel=_ref.accessibilityLabel,disabled=_ref.disabled,style=_ref.style,showSelectedCheck=_ref.showSelectedCheck,icon=_ref.icon,testID=_ref.testID,label=_ref.label,onPress=_ref.onPress,segment=_ref.segment,_ref$density=_ref.density,density=_ref$density===void 0?'regular':_ref$density;var theme=useInternalTheme();var checkScale=React.useRef(new Animated.Value(0)).current;React.useEffect(function(){if(!showSelectedCheck){return;}if(checked){Animated.spring(checkScale,{toValue:1,useNativeDriver:true}).start();}else{Animated.spring(checkScale,{toValue:0,useNativeDriver:true}).start();}},[checked,checkScale,showSelectedCheck]);var roundness=theme.roundness,isV3=theme.isV3;var _getSegmentedButtonCo=getSegmentedButtonColors({checked:checked,theme:theme,disabled:disabled}),borderColor=_getSegmentedButtonCo.borderColor,textColor=_getSegmentedButtonCo.textColor,borderWidth=_getSegmentedButtonCo.borderWidth,backgroundColor=_getSegmentedButtonCo.backgroundColor;var borderRadius=(isV3?5:1)*roundness;var segmentBorderRadius=getSegmentedButtonBorderRadius({theme:theme,segment:segment});var rippleColor=color(textColor).alpha(0.12).rgb().string();var iconSize=isV3?18:16;var iconStyle=_objectSpread({marginRight:label?5:checked&&showSelectedCheck?3:0},label&&{transform:[{scale:checkScale.interpolate({inputRange:[0,1],outputRange:[1,0]})}]});var buttonStyle=_objectSpread({backgroundColor:backgroundColor,borderColor:borderColor,borderWidth:borderWidth,borderRadius:borderRadius},segmentBorderRadius);var paddingVertical=getSegmentedButtonDensityPadding({density:density});var rippleStyle=_objectSpread({borderRadius:borderRadius},segmentBorderRadius);var showIcon=icon&&!label?true:checked?!showSelectedCheck:true;var labelTextStyle=_objectSpread(_objectSpread({},!isV3?{textTransform:'uppercase',fontWeight:'500'}:theme.fonts.labelLarge),{},{color:textColor});return React.createElement(View,{style:[buttonStyle,styles.button,style]},React.createElement(TouchableRipple,{borderless:true,onPress:onPress,accessibilityLabel:accessibilityLabel,accessibilityState:{disabled:disabled,checked:checked},accessibilityRole:\"button\",disabled:disabled,rippleColor:rippleColor,testID:testID,style:rippleStyle},React.createElement(View,{style:[styles.content,{paddingVertical:paddingVertical}]},checked&&showSelectedCheck?React.createElement(Animated.View,{testID:testID+\"-check-icon\",style:[iconStyle,{transform:[{scale:checkScale}]}]},React.createElement(Icon,{source:'check',size:iconSize})):null,showIcon?React.createElement(Animated.View,{style:iconStyle},React.createElement(Icon,{source:icon,size:iconSize,color:disabled?textColor:undefined})):null,React.createElement(Text,{variant:\"labelLarge\",style:[styles.label,labelTextStyle],selectable:false,numberOfLines:1},label))));};var styles=StyleSheet.create({button:{flex:1,minWidth:76,borderStyle:'solid'},label:{textAlign:'center'},content:{flexDirection:'row',alignItems:'center',justifyContent:'center',paddingVertical:9,paddingHorizontal:16}});export default SegmentedButtonItem;var SegmentedButtonWithTheme=SegmentedButtonItem;export{SegmentedButtonWithTheme as SegmentedButton};","map":{"version":3,"mappings":"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","names":["React","color","useInternalTheme","Icon","TouchableRipple","Text","getSegmentedButtonBorderRadius","getSegmentedButtonColors","getSegmentedButtonDensityPadding","SegmentedButtonItem","_ref","checked","accessibilityLabel","disabled","style","showSelectedCheck","icon","testID","label","onPress","segment","density","theme","checkScale","useRef","Animated","Value","current","useEffect","spring","toValue","useNativeDriver","start","roundness","isV3","borderColor","textColor","borderWidth","backgroundColor","borderRadius","segmentBorderRadius","rippleColor","alpha","rgb","string","iconSize","iconStyle","marginRight","transform","scale","interpolate","inputRange","outputRange","buttonStyle","paddingVertical","rippleStyle","showIcon","labelTextStyle","textTransform","fontWeight","fonts","labelLarge","View","styles","button","borderless","accessibilityState","accessibilityRole","content","source","size","undefined","variant","selectable","numberOfLines","StyleSheet","create","flex","minWidth","borderStyle","textAlign","flexDirection","alignItems","justifyContent","paddingHorizontal","SegmentedButtonWithTheme","SegmentedButton"],"sources":["SegmentedButtonItem.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  GestureResponderEvent,\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport color from 'color';\n\nimport { useInternalTheme } from '../../core/theming';\nimport type { IconSource } from '../Icon';\nimport Icon from '../Icon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\nimport {\n  getSegmentedButtonBorderRadius,\n  getSegmentedButtonColors,\n  getSegmentedButtonDensityPadding,\n} from './utils';\n\nexport type Props = {\n  /**\n   * Whether the segmented button is checked\n   */\n  checked: boolean;\n  /**\n   * Icon to display for the `SegmentedButtonItem`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether the button is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the `SegmentedButtonItem`. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (event: GestureResponderEvent) => void;\n  /**\n   * Value of button.\n   */\n  value: string;\n  /**\n   * Label text of the button.\n   */\n  label?: string;\n  /**\n   * Button segment.\n   */\n  segment?: 'first' | 'last';\n  /**\n   * Show optional check icon to indicate selected state\n   */\n  showSelectedCheck?: boolean;\n  /**\n   * Density is applied to the height, to allow usage in denser UIs.\n   */\n  density?: 'regular' | 'small' | 'medium' | 'high';\n  style?: StyleProp<ViewStyle>;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\nconst SegmentedButtonItem = ({\n  checked,\n  accessibilityLabel,\n  disabled,\n  style,\n  showSelectedCheck,\n  icon,\n  testID,\n  label,\n  onPress,\n  segment,\n  density = 'regular',\n}: Props) => {\n  const theme = useInternalTheme();\n\n  const checkScale = React.useRef(new Animated.Value(0)).current;\n\n  React.useEffect(() => {\n    if (!showSelectedCheck) {\n      return;\n    }\n    if (checked) {\n      Animated.spring(checkScale, {\n        toValue: 1,\n        useNativeDriver: true,\n      }).start();\n    } else {\n      Animated.spring(checkScale, {\n        toValue: 0,\n        useNativeDriver: true,\n      }).start();\n    }\n  }, [checked, checkScale, showSelectedCheck]);\n\n  const { roundness, isV3 } = theme;\n  const { borderColor, textColor, borderWidth, backgroundColor } =\n    getSegmentedButtonColors({\n      checked,\n      theme,\n      disabled,\n    });\n\n  const borderRadius = (isV3 ? 5 : 1) * roundness;\n  const segmentBorderRadius = getSegmentedButtonBorderRadius({\n    theme,\n    segment,\n  });\n  const rippleColor = color(textColor).alpha(0.12).rgb().string();\n\n  const iconSize = isV3 ? 18 : 16;\n  const iconStyle = {\n    marginRight: label ? 5 : checked && showSelectedCheck ? 3 : 0,\n    ...(label && {\n      transform: [\n        {\n          scale: checkScale.interpolate({\n            inputRange: [0, 1],\n            outputRange: [1, 0],\n          }),\n        },\n      ],\n    }),\n  };\n\n  const buttonStyle: ViewStyle = {\n    backgroundColor,\n    borderColor,\n    borderWidth,\n    borderRadius,\n    ...segmentBorderRadius,\n  };\n  const paddingVertical = getSegmentedButtonDensityPadding({ density });\n  const rippleStyle: ViewStyle = {\n    borderRadius,\n    ...segmentBorderRadius,\n  };\n  const showIcon = icon && !label ? true : checked ? !showSelectedCheck : true;\n  const labelTextStyle: TextStyle = {\n    ...(!isV3\n      ? {\n          textTransform: 'uppercase',\n          fontWeight: '500',\n        }\n      : theme.fonts.labelLarge),\n    color: textColor,\n  };\n\n  return (\n    <View style={[buttonStyle, styles.button, style]}>\n      <TouchableRipple\n        borderless\n        onPress={onPress}\n        accessibilityLabel={accessibilityLabel}\n        accessibilityState={{ disabled, checked }}\n        accessibilityRole=\"button\"\n        disabled={disabled}\n        rippleColor={rippleColor}\n        testID={testID}\n        style={rippleStyle}\n      >\n        <View style={[styles.content, { paddingVertical }]}>\n          {checked && showSelectedCheck ? (\n            <Animated.View\n              testID={`${testID}-check-icon`}\n              style={[iconStyle, { transform: [{ scale: checkScale }] }]}\n            >\n              <Icon source={'check'} size={iconSize} />\n            </Animated.View>\n          ) : null}\n          {showIcon ? (\n            <Animated.View style={iconStyle}>\n              <Icon\n                source={icon}\n                size={iconSize}\n                color={disabled ? textColor : undefined}\n              />\n            </Animated.View>\n          ) : null}\n          <Text\n            variant=\"labelLarge\"\n            style={[styles.label, labelTextStyle]}\n            selectable={false}\n            numberOfLines={1}\n          >\n            {label}\n          </Text>\n        </View>\n      </TouchableRipple>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  button: {\n    flex: 1,\n    minWidth: 76,\n    borderStyle: 'solid',\n  },\n  label: {\n    textAlign: 'center',\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 9,\n    paddingHorizontal: 16,\n  },\n});\n\nexport default SegmentedButtonItem;\n\nconst SegmentedButtonWithTheme = SegmentedButtonItem;\nexport { SegmentedButtonWithTheme as SegmentedButton };\n"]},"metadata":{},"sourceType":"module"}