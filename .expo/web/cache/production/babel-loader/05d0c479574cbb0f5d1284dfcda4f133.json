{"ast":null,"code":"import _construct from\"@babel/runtime/helpers/construct\";import{FlingGesture}from\"./flingGesture\";import{ForceTouchGesture}from\"./forceTouchGesture\";import{ComposedGesture,ExclusiveGesture,SimultaneousGesture}from\"./gestureComposition\";import{LongPressGesture}from\"./longPressGesture\";import{PanGesture}from\"./panGesture\";import{PinchGesture}from\"./pinchGesture\";import{RotationGesture}from\"./rotationGesture\";import{TapGesture}from\"./tapGesture\";import{NativeGesture}from\"./nativeGesture\";import{ManualGesture}from\"./manualGesture\";export var GestureObjects={Tap:function Tap(){return new TapGesture();},Pan:function Pan(){return new PanGesture();},Pinch:function Pinch(){return new PinchGesture();},Rotation:function Rotation(){return new RotationGesture();},Fling:function Fling(){return new FlingGesture();},LongPress:function LongPress(){return new LongPressGesture();},ForceTouch:function ForceTouch(){return new ForceTouchGesture();},Native:function Native(){return new NativeGesture();},Manual:function Manual(){return new ManualGesture();},Race:function Race(){for(var _len=arguments.length,gestures=new Array(_len),_key=0;_key<_len;_key++){gestures[_key]=arguments[_key];}return _construct(ComposedGesture,gestures);},Simultaneous:function Simultaneous(){for(var _len2=arguments.length,gestures=new Array(_len2),_key2=0;_key2<_len2;_key2++){gestures[_key2]=arguments[_key2];}return _construct(SimultaneousGesture,gestures);},Exclusive:function Exclusive(){for(var _len3=arguments.length,gestures=new Array(_len3),_key3=0;_key3<_len3;_key3++){gestures[_key3]=arguments[_key3];}return _construct(ExclusiveGesture,gestures);}};","map":{"version":3,"mappings":"yDAAA,OAASA,YAAT,sBACA,OAASC,iBAAT,2BAEA,OACEC,eADF,CAEEC,gBAFF,CAGEC,mBAHF,4BAKA,OAASC,gBAAT,0BACA,OAASC,UAAT,oBACA,OAASC,YAAT,sBACA,OAASC,eAAT,yBACA,OAASC,UAAT,oBACA,OAASC,aAAT,uBACA,OAASC,aAAT,uBAEA,MAAO,IAAMC,eAAc,CAAG,CAC5BC,GAAG,CAAE,cAAM,CACT,MAAO,IAAIJ,WAAJ,EAAP,CACD,CAH2B,CAK5BK,GAAG,CAAE,cAAM,CACT,MAAO,IAAIR,WAAJ,EAAP,CACD,CAP2B,CAS5BS,KAAK,CAAE,gBAAM,CACX,MAAO,IAAIR,aAAJ,EAAP,CACD,CAX2B,CAa5BS,QAAQ,CAAE,mBAAM,CACd,MAAO,IAAIR,gBAAJ,EAAP,CACD,CAf2B,CAiB5BS,KAAK,CAAE,gBAAM,CACX,MAAO,IAAIjB,aAAJ,EAAP,CACD,CAnB2B,CAqB5BkB,SAAS,CAAE,oBAAM,CACf,MAAO,IAAIb,iBAAJ,EAAP,CACD,CAvB2B,CAyB5Bc,UAAU,CAAE,qBAAM,CAChB,MAAO,IAAIlB,kBAAJ,EAAP,CACD,CA3B2B,CA6B5BmB,MAAM,CAAE,iBAAM,CACZ,MAAO,IAAIV,cAAJ,EAAP,CACD,CA/B2B,CAiC5BW,MAAM,CAAE,iBAAM,CACZ,MAAO,IAAIV,cAAJ,EAAP,CACD,CAnC2B,CAyC5BW,IAAI,CAAE,eAA4B,+BAAxBC,QAAJ,0CAAIA,QAAJ,wBACJ,kBAAWrB,eAAJ,CAAuBqB,QAAvB,EACR,CA3C2B,CAgD5BC,YAAY,wBAAyB,gCAArBD,QAAJ,+CAAIA,QAAJ,0BACV,kBAAWnB,mBAAJ,CAA2BmB,QAA3B,EACR,CAlD2B,CA2D5BE,SAAS,qBAAyB,gCAArBF,QAAJ,+CAAIA,QAAJ,0BACP,kBAAWpB,gBAAJ,CAAwBoB,QAAxB,EACR,CA7D2B,CAAvB","names":["FlingGesture","ForceTouchGesture","ComposedGesture","ExclusiveGesture","SimultaneousGesture","LongPressGesture","PanGesture","PinchGesture","RotationGesture","TapGesture","NativeGesture","ManualGesture","GestureObjects","Tap","Pan","Pinch","Rotation","Fling","LongPress","ForceTouch","Native","Manual","Race","gestures","Simultaneous","Exclusive"],"sources":["gestureObjects.ts"],"sourcesContent":["import { FlingGesture } from './flingGesture';\nimport { ForceTouchGesture } from './forceTouchGesture';\nimport { Gesture } from './gesture';\nimport {\n  ComposedGesture,\n  ExclusiveGesture,\n  SimultaneousGesture,\n} from './gestureComposition';\nimport { LongPressGesture } from './longPressGesture';\nimport { PanGesture } from './panGesture';\nimport { PinchGesture } from './pinchGesture';\nimport { RotationGesture } from './rotationGesture';\nimport { TapGesture } from './tapGesture';\nimport { NativeGesture } from './nativeGesture';\nimport { ManualGesture } from './manualGesture';\n\nexport const GestureObjects = {\n  Tap: () => {\n    return new TapGesture();\n  },\n\n  Pan: () => {\n    return new PanGesture();\n  },\n\n  Pinch: () => {\n    return new PinchGesture();\n  },\n\n  Rotation: () => {\n    return new RotationGesture();\n  },\n\n  Fling: () => {\n    return new FlingGesture();\n  },\n\n  LongPress: () => {\n    return new LongPressGesture();\n  },\n\n  ForceTouch: () => {\n    return new ForceTouchGesture();\n  },\n\n  Native: () => {\n    return new NativeGesture();\n  },\n\n  Manual: () => {\n    return new ManualGesture();\n  },\n\n  /**\n   * Builds a composed gesture consisting of gestures provided as parameters.\n   * The first one that becomes active cancels the rest of gestures.\n   */\n  Race: (...gestures: Gesture[]) => {\n    return new ComposedGesture(...gestures);\n  },\n\n  /**\n   * Builds a composed gesture that allows all base gestures to run simultaneously.\n   */\n  Simultaneous(...gestures: Gesture[]) {\n    return new SimultaneousGesture(...gestures);\n  },\n\n  /**\n   * Builds a composed gesture where only one of the provided gestures can become active.\n   * Priority is decided through the order of gestures: the first one has higher priority\n   * than the second one, second one has higher priority than the third one, and so on.\n   * For example, to make a gesture that recognizes both single and double tap you need\n   * to call Exclusive(doubleTap, singleTap).\n   */\n  Exclusive(...gestures: Gesture[]) {\n    return new ExclusiveGesture(...gestures);\n  },\n};\n"]},"metadata":{},"sourceType":"module"}