{"ast":null,"code":"export var PermissionStatus;(function(PermissionStatus){PermissionStatus[\"GRANTED\"]=\"granted\";PermissionStatus[\"UNDETERMINED\"]=\"undetermined\";PermissionStatus[\"DENIED\"]=\"denied\";})(PermissionStatus||(PermissionStatus={}));","map":{"version":3,"sources":["../src/PermissionsInterface.ts"],"names":[],"mappings":"AAAA,MAAA,IAAY,iBAaX,CAbD,CAAA,SAAY,gBAAgB,CAAA,CAI1B,gBAAA,CAAA,SAAA,CAAA,CAAA,SAAmB,CAInB,gBAAA,CAAA,cAAA,CAAA,CAAA,cAA6B,CAI7B,gBAAA,CAAA,QAAA,CAAA,CAAA,QAAiB,CACnB,CAAC,EAbW,gBAAgB,GAAhB,gBAAgB,CAAA,CAAA,CAAA,CAAA,CAAA","sourcesContent":["export enum PermissionStatus {\n  /**\n   * User has granted the permission.\n   */\n  GRANTED = 'granted',\n  /**\n   * User hasn't granted or denied the permission yet.\n   */\n  UNDETERMINED = 'undetermined',\n  /**\n   * User has denied the permission.\n   */\n  DENIED = 'denied',\n}\n\n/**\n * Permission expiration time. Currently, all permissions are granted permanently.\n */\nexport type PermissionExpiration = 'never' | number;\n\n/**\n * An object obtained by permissions get and request functions.\n */\nexport interface PermissionResponse {\n  /**\n   * Determines the status of the permission.\n   */\n  status: PermissionStatus;\n  /**\n   * Determines time when the permission expires.\n   */\n  expires: PermissionExpiration;\n  /**\n   * A convenience boolean that indicates if the permission is granted.\n   */\n  granted: boolean;\n  /**\n   * Indicates if user can be asked again for specific permission.\n   * If not, one should be directed to the Settings app\n   * in order to enable/disable the permission.\n   */\n  canAskAgain: boolean;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}