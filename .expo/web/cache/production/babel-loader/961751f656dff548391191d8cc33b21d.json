{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"icon\",\"size\",\"theme\",\"accessibilityLabel\",\"disabled\",\"style\",\"value\",\"status\",\"onPress\"];function _extends(){_extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import*as React from'react';import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import color from'color';import{withInternalTheme}from\"../../core/theming\";import{black,white}from\"../../styles/themes/v2/colors\";import IconButton from\"../IconButton/IconButton\";import{ToggleButtonGroupContext}from\"./ToggleButtonGroup\";import{getToggleButtonColor}from\"./utils\";var ToggleButton=React.forwardRef(function(_ref,ref){var icon=_ref.icon,size=_ref.size,theme=_ref.theme,accessibilityLabel=_ref.accessibilityLabel,disabled=_ref.disabled,style=_ref.style,value=_ref.value,status=_ref.status,_onPress=_ref.onPress,rest=_objectWithoutProperties(_ref,_excluded);var borderRadius=theme.roundness;return React.createElement(ToggleButtonGroupContext.Consumer,null,function(context){var checked=context&&context.value===value||status==='checked';var backgroundColor=getToggleButtonColor({theme:theme,checked:checked});var borderColor=theme.isV3?theme.colors.outline:color(theme.dark?white:black).alpha(0.29).rgb().string();return React.createElement(IconButton,_extends({borderless:false,icon:icon,onPress:function onPress(e){if(_onPress){_onPress(e);}if(context){context.onValueChange(!checked?value:null);}},size:size,accessibilityLabel:accessibilityLabel,accessibilityState:{disabled:disabled,selected:checked},disabled:disabled,style:[styles.content,{backgroundColor:backgroundColor,borderRadius:borderRadius,borderColor:borderColor},style],ref:ref},rest));});});var styles=StyleSheet.create({content:{width:42,height:42,margin:0}});export default withInternalTheme(ToggleButton);var ToggleButtonWithTheme=withInternalTheme(ToggleButton);export{ToggleButtonWithTheme as ToggleButton};","map":{"version":3,"mappings":"yeAAA,MAAO,GAAKA,MAAK,KAAM,OAAO,kEAS9B,MAAOC,MAAK,KAAM,OAAO,CAEzB,OAASC,iBAAiB,0BAC1B,OAASC,KAAK,CAAEC,KAAK,qCAGrB,MAAOC,WAAU,gCACjB,OAASC,wBAAwB,2BACjC,OAASC,oBAAoB,eA6E7B,GAAMC,aAAY,CAAGR,KAAK,CAACS,UAAU,CACnC,cAaEC,GAAG,CACA,IAZDC,KAAI,CAUEC,KAVND,IAAI,CACJE,IAAI,CASED,KATNC,IAAI,CACJC,KAAK,CAQCF,KARNE,KAAK,CACLC,kBAAkB,CAOZH,KAPNG,kBAAkB,CAClBC,QAAQ,CAMFJ,KANNI,QAAQ,CACRC,KAAK,CAKCL,KALNK,KAAK,CACLC,KAAK,CAICN,KAJNM,KAAK,CACLC,MAAM,CAGAP,KAHNO,MAAM,CACNC,QAAO,CAEDR,KAFNQ,OAAO,CACJC,8BACGT,gBAGR,GAAMU,aAAY,CAAGR,KAAK,CAACS,SAAS,CAEpC,MACEvB,qBAACM,wBAAwB,CAACkB,QAAQ,MAE9BC,gBAAiE,CAC9D,CACH,GAAMC,QAAuB,CAC1BD,OAAO,EAAIA,OAAO,CAACP,KAAK,GAAKA,KAAK,EAAKC,MAAM,GAAK,SAAS,CAE9D,GAAMQ,gBAAe,CAAGpB,oBAAoB,CAAC,CAAEO,KAAK,CAALA,KAAK,CAAEY,eAAQ,CAAC,CAAC,CAChE,GAAME,YAAW,CAAGd,KAAK,CAACe,IAAI,CAC1Bf,KAAK,CAACgB,MAAM,CAACC,OAAO,CACpB9B,KAAK,CAACa,KAAK,CAACkB,IAAI,CAAG5B,KAAK,CAAGD,KAAK,CAAC,CAC9B8B,KAAK,CAAC,IAAI,CAAC,CACXC,GAAG,EAAE,CACLC,MAAM,EAAE,CAEf,MACEnC,qBAACK,UAAU,WACT+B,UAAU,CAAE,KAAM,CAClBzB,IAAI,CAAEA,IAAK,CACXS,OAAO,CAAGiB,kBAAkC,CAAK,CAC/C,GAAIjB,QAAO,CAAE,CACXA,QAAO,CAACiB,CAAC,CAAC,CACZ,CAEA,GAAIZ,OAAO,CAAE,CACXA,OAAO,CAACa,aAAa,CAAC,CAACZ,OAAO,CAAGR,KAAK,CAAG,IAAI,CAAC,CAChD,CACF,CAAE,CACFL,IAAI,CAAEA,IAAK,CACXE,kBAAkB,CAAEA,kBAAmB,CACvCwB,kBAAkB,CAAE,CAAEvB,QAAQ,CAARA,QAAQ,CAAEwB,QAAQ,CAAEd,OAAQ,CAAE,CACpDV,QAAQ,CAAEA,QAAS,CACnBC,KAAK,CAAE,CACLwB,MAAM,CAACC,OAAO,CACd,CACEf,eAAe,CAAfA,eAAe,CACfL,YAAY,CAAZA,YAAY,CACZM,uBACF,CAAC,CACDX,KAAK,CACL,CACFP,GAAG,CAAEA,GAAI,EACLW,IAAI,EACR,CAEN,CAAC,CACiC,CAExC,CAAC,CACF,CAED,GAAMoB,OAAM,CAAGE,UAAU,CAACC,MAAM,CAAC,CAC/BF,OAAO,CAAE,CACPG,KAAK,CAAE,EAAE,CACTC,MAAM,CAAE,EAAE,CACVC,MAAM,CAAE,CACV,CACF,CAAC,CAAC,CAEF,cAAe7C,kBAAiB,CAACM,YAAY,CAAC,CAG9C,GAAMwC,sBAAqB,CAAG9C,iBAAiB,CAACM,YAAY,CAAC,CAE7D,OAASwC,qBAAqB,GAAIxC,aAAY","names":["React","color","withInternalTheme","black","white","IconButton","ToggleButtonGroupContext","getToggleButtonColor","ToggleButton","forwardRef","ref","icon","_ref","size","theme","accessibilityLabel","disabled","style","value","status","onPress","rest","borderRadius","roundness","Consumer","context","checked","backgroundColor","borderColor","isV3","colors","outline","dark","alpha","rgb","string","borderless","e","onValueChange","accessibilityState","selected","styles","content","StyleSheet","create","width","height","margin","ToggleButtonWithTheme"],"sources":["ToggleButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  GestureResponderEvent,\n  StyleProp,\n  StyleSheet,\n  ViewStyle,\n  View,\n} from 'react-native';\n\nimport color from 'color';\n\nimport { withInternalTheme } from '../../core/theming';\nimport { black, white } from '../../styles/themes/v2/colors';\nimport type { InternalTheme } from '../../types';\nimport type { IconSource } from '../Icon';\nimport IconButton from '../IconButton/IconButton';\nimport { ToggleButtonGroupContext } from './ToggleButtonGroup';\nimport { getToggleButtonColor } from './utils';\n\nexport type Props = {\n  /**\n   * Icon to display for the `ToggleButton`.\n   */\n  icon: IconSource;\n  /**\n   * Size of the icon.\n   */\n  size?: number;\n  /**\n   * Custom text color for button.\n   */\n  color?: string;\n  /**\n   * Whether the button is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the `ToggleButton`. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (value?: GestureResponderEvent | string) => void;\n  /**\n   * Value of button.\n   */\n  value?: string;\n  /**\n   * Status of button.\n   */\n  status?: 'checked' | 'unchecked';\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: InternalTheme;\n  ref?: React.RefObject<View>;\n};\n\n/**\n * Toggle buttons can be used to group related options. To emphasize groups of related toggle buttons,\n * a group should share a common container.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/toggle-button.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ToggleButton } from 'react-native-paper';\n *\n * const ToggleButtonExample = () => {\n *   const [status, setStatus] = React.useState('checked');\n *\n *   const onButtonToggle = value => {\n *     setStatus(status === 'checked' ? 'unchecked' : 'checked');\n *   };\n *\n *   return (\n *     <ToggleButton\n *       icon=\"bluetooth\"\n *       value=\"bluetooth\"\n *       status={status}\n *       onPress={onButtonToggle}\n *     />\n *   );\n * };\n *\n * export default ToggleButtonExample;\n *\n * ```\n */\nconst ToggleButton = React.forwardRef<View, Props>(\n  (\n    {\n      icon,\n      size,\n      theme,\n      accessibilityLabel,\n      disabled,\n      style,\n      value,\n      status,\n      onPress,\n      ...rest\n    }: Props,\n    ref\n  ) => {\n    const borderRadius = theme.roundness;\n\n    return (\n      <ToggleButtonGroupContext.Consumer>\n        {(\n          context: { value: string | null; onValueChange: Function } | null\n        ) => {\n          const checked: boolean | null =\n            (context && context.value === value) || status === 'checked';\n\n          const backgroundColor = getToggleButtonColor({ theme, checked });\n          const borderColor = theme.isV3\n            ? theme.colors.outline\n            : color(theme.dark ? white : black)\n                .alpha(0.29)\n                .rgb()\n                .string();\n\n          return (\n            <IconButton\n              borderless={false}\n              icon={icon}\n              onPress={(e?: GestureResponderEvent | string) => {\n                if (onPress) {\n                  onPress(e);\n                }\n\n                if (context) {\n                  context.onValueChange(!checked ? value : null);\n                }\n              }}\n              size={size}\n              accessibilityLabel={accessibilityLabel}\n              accessibilityState={{ disabled, selected: checked }}\n              disabled={disabled}\n              style={[\n                styles.content,\n                {\n                  backgroundColor,\n                  borderRadius,\n                  borderColor,\n                },\n                style,\n              ]}\n              ref={ref}\n              {...rest}\n            />\n          );\n        }}\n      </ToggleButtonGroupContext.Consumer>\n    );\n  }\n);\n\nconst styles = StyleSheet.create({\n  content: {\n    width: 42,\n    height: 42,\n    margin: 0,\n  },\n});\n\nexport default withInternalTheme(ToggleButton);\n\n// @component-docs ignore-next-line\nconst ToggleButtonWithTheme = withInternalTheme(ToggleButton);\n// @component-docs ignore-next-line\nexport { ToggleButtonWithTheme as ToggleButton };\n"]},"metadata":{},"sourceType":"module"}