{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";import{findFocusedRoute,getActionFromState as getActionFromStateDefault,getPathFromState as getPathFromStateDefault,getStateFromPath as getStateFromPathDefault}from'@react-navigation/core';import isEqual from'fast-deep-equal';import*as React from'react';import createMemoryHistory from\"./createMemoryHistory\";import ServerContext from\"./ServerContext\";var findMatchingState=function findMatchingState(a,b){if(a===undefined||b===undefined||a.key!==b.key){return[undefined,undefined];}var aHistoryLength=a.history?a.history.length:a.routes.length;var bHistoryLength=b.history?b.history.length:b.routes.length;var aRoute=a.routes[a.index];var bRoute=b.routes[b.index];var aChildState=aRoute.state;var bChildState=bRoute.state;if(aHistoryLength!==bHistoryLength||aRoute.key!==bRoute.key||aChildState===undefined||bChildState===undefined||aChildState.key!==bChildState.key){return[a,b];}return findMatchingState(aChildState,bChildState);};var series=function series(cb){var handling=false;var queue=[];var callback=function(){var _ref2=_asyncToGenerator(function*(){try{if(handling){queue.unshift(callback);return;}handling=true;yield cb();}finally{handling=false;if(queue.length){var last=queue.pop();last===null||last===void 0?void 0:last();}}});return function callback(){return _ref2.apply(this,arguments);};}();return callback;};var linkingHandlers=[];export default function useLinking(ref,_ref){var independent=_ref.independent,_ref$enabled=_ref.enabled,enabled=_ref$enabled===void 0?true:_ref$enabled,config=_ref.config,_ref$getStateFromPath=_ref.getStateFromPath,getStateFromPath=_ref$getStateFromPath===void 0?getStateFromPathDefault:_ref$getStateFromPath,_ref$getPathFromState=_ref.getPathFromState,getPathFromState=_ref$getPathFromState===void 0?getPathFromStateDefault:_ref$getPathFromState,_ref$getActionFromSta=_ref.getActionFromState,getActionFromState=_ref$getActionFromSta===void 0?getActionFromStateDefault:_ref$getActionFromSta;React.useEffect(function(){if(process.env.NODE_ENV==='production'){return undefined;}if(independent){return undefined;}if(enabled!==false&&linkingHandlers.length){console.error(['Looks like you have configured linking in multiple places. This is likely an error since deep links should only be handled in one place to avoid conflicts. Make sure that:',\"- You don't have multiple NavigationContainers in the app each with 'linking' enabled\",'- Only a single instance of the root component is rendered'].join('\\n').trim());}var handler=Symbol();if(enabled!==false){linkingHandlers.push(handler);}return function(){var index=linkingHandlers.indexOf(handler);if(index>-1){linkingHandlers.splice(index,1);}};},[enabled,independent]);var _React$useState=React.useState(createMemoryHistory),_React$useState2=_slicedToArray(_React$useState,1),history=_React$useState2[0];var enabledRef=React.useRef(enabled);var configRef=React.useRef(config);var getStateFromPathRef=React.useRef(getStateFromPath);var getPathFromStateRef=React.useRef(getPathFromState);var getActionFromStateRef=React.useRef(getActionFromState);React.useEffect(function(){enabledRef.current=enabled;configRef.current=config;getStateFromPathRef.current=getStateFromPath;getPathFromStateRef.current=getPathFromState;getActionFromStateRef.current=getActionFromState;});var server=React.useContext(ServerContext);var getInitialState=React.useCallback(function(){var value;if(enabledRef.current){var _ref3;var _location=(_ref3=server===null||server===void 0?void 0:server.location)!=null?_ref3:typeof window!=='undefined'?window.location:undefined;var path=_location?_location.pathname+_location.search:undefined;if(path){value=getStateFromPathRef.current(path,configRef.current);}}var thenable={then:function then(onfulfilled){return Promise.resolve(onfulfilled?onfulfilled(value):value);},catch:function _catch(){return thenable;}};return thenable;},[]);var previousIndexRef=React.useRef(undefined);var previousStateRef=React.useRef(undefined);var pendingPopStatePathRef=React.useRef(undefined);React.useEffect(function(){previousIndexRef.current=history.index;return history.listen(function(){var _previousIndexRef$cur;var navigation=ref.current;if(!navigation||!enabled){return;}var path=location.pathname+location.search;var index=history.index;var previousIndex=(_previousIndexRef$cur=previousIndexRef.current)!=null?_previousIndexRef$cur:0;previousIndexRef.current=index;pendingPopStatePathRef.current=path;var record=history.get(index);if((record===null||record===void 0?void 0:record.path)===path&&record!==null&&record!==void 0&&record.state){navigation.resetRoot(record.state);return;}var state=getStateFromPathRef.current(path,configRef.current);if(state){var rootState=navigation.getRootState();if(state.routes.some(function(r){return!(rootState!==null&&rootState!==void 0&&rootState.routeNames.includes(r.name));})){console.warn(\"The navigation state parsed from the URL contains routes not present in the root navigator. This usually means that the linking configuration doesn't match the navigation structure. See https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.\");return;}if(index>previousIndex){var action=getActionFromStateRef.current(state,configRef.current);if(action!==undefined){try{navigation.dispatch(action);}catch(e){console.warn(\"An error occurred when trying to handle the link '\"+path+\"': \"+(typeof e==='object'&&e!=null&&'message'in e?e.message:e));}}else{navigation.resetRoot(state);}}else{navigation.resetRoot(state);}}else{navigation.resetRoot(state);}});},[enabled,history,ref]);React.useEffect(function(){var _ref$current;if(!enabled){return;}var getPathForRoute=function getPathForRoute(route,state){if(route!==null&&route!==void 0&&route.path){var stateForPath=getStateFromPathRef.current(route.path,configRef.current);if(stateForPath){var focusedRoute=findFocusedRoute(stateForPath);if(focusedRoute&&focusedRoute.name===route.name&&isEqual(focusedRoute.params,route.params)){return route.path;}}}return getPathFromStateRef.current(state,configRef.current);};if(ref.current){var state=ref.current.getRootState();if(state){var route=findFocusedRoute(state);var path=getPathForRoute(route,state);if(previousStateRef.current===undefined){previousStateRef.current=state;}history.replace({path:path,state:state});}}var onStateChange=function(){var _ref4=_asyncToGenerator(function*(){var navigation=ref.current;if(!navigation||!enabled){return;}var previousState=previousStateRef.current;var state=navigation.getRootState();if(!state){return;}var pendingPath=pendingPopStatePathRef.current;var route=findFocusedRoute(state);var path=getPathForRoute(route,state);previousStateRef.current=state;pendingPopStatePathRef.current=undefined;var _findMatchingState=findMatchingState(previousState,state),_findMatchingState2=_slicedToArray(_findMatchingState,2),previousFocusedState=_findMatchingState2[0],focusedState=_findMatchingState2[1];if(previousFocusedState&&focusedState&&path!==pendingPath){var historyDelta=(focusedState.history?focusedState.history.length:focusedState.routes.length)-(previousFocusedState.history?previousFocusedState.history.length:previousFocusedState.routes.length);if(historyDelta>0){history.push({path:path,state:state});}else if(historyDelta<0){var nextIndex=history.backIndex({path:path});var currentIndex=history.index;try{if(nextIndex!==-1&&nextIndex<currentIndex){yield history.go(nextIndex-currentIndex);}else{yield history.go(historyDelta);}history.replace({path:path,state:state});}catch(e){}}else{history.replace({path:path,state:state});}}else{history.replace({path:path,state:state});}});return function onStateChange(){return _ref4.apply(this,arguments);};}();return(_ref$current=ref.current)===null||_ref$current===void 0?void 0:_ref$current.addListener('state',series(onStateChange));});return{getInitialState:getInitialState};}","map":{"version":3,"sources":["useLinking.tsx"],"names":["findFocusedRoute","getActionFromState","getActionFromStateDefault","getPathFromState","getPathFromStateDefault","getStateFromPath","getStateFromPathDefault","isEqual","React","createMemoryHistory","ServerContext","findMatchingState","a","b","undefined","key","aHistoryLength","history","length","routes","bHistoryLength","aRoute","index","bRoute","aChildState","state","bChildState","series","cb","handling","queue","callback","unshift","last","pop","linkingHandlers","useLinking","ref","independent","enabled","config","useEffect","process","env","NODE_ENV","console","error","join","trim","handler","Symbol","push","indexOf","splice","useState","enabledRef","useRef","configRef","getStateFromPathRef","getPathFromStateRef","getActionFromStateRef","current","server","useContext","getInitialState","useCallback","value","location","window","path","pathname","search","thenable","then","onfulfilled","Promise","resolve","catch","previousIndexRef","previousStateRef","pendingPopStatePathRef","listen","navigation","previousIndex","record","get","resetRoot","rootState","getRootState","some","r","routeNames","includes","name","warn","action","dispatch","e","message","getPathForRoute","route","stateForPath","focusedRoute","params","replace","onStateChange","previousState","pendingPath","previousFocusedState","focusedState","historyDelta","nextIndex","backIndex","currentIndex","go","addListener"],"mappings":"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","sourceRoot":"../../src","sourcesContent":["import { findFocusedRoute, getActionFromState as getActionFromStateDefault, getPathFromState as getPathFromStateDefault, getStateFromPath as getStateFromPathDefault } from '@react-navigation/core';\nimport isEqual from 'fast-deep-equal';\nimport * as React from 'react';\nimport createMemoryHistory from './createMemoryHistory';\nimport ServerContext from './ServerContext';\n/**\n * Find the matching navigation state that changed between 2 navigation states\n * e.g.: a -> b -> c -> d and a -> b -> c -> e -> f, if history in b changed, b is the matching state\n */\nconst findMatchingState = (a, b) => {\n  if (a === undefined || b === undefined || a.key !== b.key) {\n    return [undefined, undefined];\n  }\n\n  // Tab and drawer will have `history` property, but stack will have history in `routes`\n  const aHistoryLength = a.history ? a.history.length : a.routes.length;\n  const bHistoryLength = b.history ? b.history.length : b.routes.length;\n  const aRoute = a.routes[a.index];\n  const bRoute = b.routes[b.index];\n  const aChildState = aRoute.state;\n  const bChildState = bRoute.state;\n\n  // Stop here if this is the state object that changed:\n  // - history length is different\n  // - focused routes are different\n  // - one of them doesn't have child state\n  // - child state keys are different\n  if (aHistoryLength !== bHistoryLength || aRoute.key !== bRoute.key || aChildState === undefined || bChildState === undefined || aChildState.key !== bChildState.key) {\n    return [a, b];\n  }\n  return findMatchingState(aChildState, bChildState);\n};\n\n/**\n * Run async function in series as it's called.\n */\nconst series = cb => {\n  // Whether we're currently handling a callback\n  let handling = false;\n  let queue = [];\n  const callback = async () => {\n    try {\n      if (handling) {\n        // If we're currently handling a previous event, wait before handling this one\n        // Add the callback to the beginning of the queue\n        queue.unshift(callback);\n        return;\n      }\n      handling = true;\n      await cb();\n    } finally {\n      handling = false;\n      if (queue.length) {\n        // If we have queued items, handle the last one\n        const last = queue.pop();\n        last === null || last === void 0 ? void 0 : last();\n      }\n    }\n  };\n  return callback;\n};\nlet linkingHandlers = [];\nexport default function useLinking(ref, _ref) {\n  let {\n    independent,\n    enabled = true,\n    config,\n    getStateFromPath = getStateFromPathDefault,\n    getPathFromState = getPathFromStateDefault,\n    getActionFromState = getActionFromStateDefault\n  } = _ref;\n  React.useEffect(() => {\n    if (process.env.NODE_ENV === 'production') {\n      return undefined;\n    }\n    if (independent) {\n      return undefined;\n    }\n    if (enabled !== false && linkingHandlers.length) {\n      console.error(['Looks like you have configured linking in multiple places. This is likely an error since deep links should only be handled in one place to avoid conflicts. Make sure that:', \"- You don't have multiple NavigationContainers in the app each with 'linking' enabled\", '- Only a single instance of the root component is rendered'].join('\\n').trim());\n    }\n    const handler = Symbol();\n    if (enabled !== false) {\n      linkingHandlers.push(handler);\n    }\n    return () => {\n      const index = linkingHandlers.indexOf(handler);\n      if (index > -1) {\n        linkingHandlers.splice(index, 1);\n      }\n    };\n  }, [enabled, independent]);\n  const [history] = React.useState(createMemoryHistory);\n\n  // We store these options in ref to avoid re-creating getInitialState and re-subscribing listeners\n  // This lets user avoid wrapping the items in `React.useCallback` or `React.useMemo`\n  // Not re-creating `getInitialState` is important coz it makes it easier for the user to use in an effect\n  const enabledRef = React.useRef(enabled);\n  const configRef = React.useRef(config);\n  const getStateFromPathRef = React.useRef(getStateFromPath);\n  const getPathFromStateRef = React.useRef(getPathFromState);\n  const getActionFromStateRef = React.useRef(getActionFromState);\n  React.useEffect(() => {\n    enabledRef.current = enabled;\n    configRef.current = config;\n    getStateFromPathRef.current = getStateFromPath;\n    getPathFromStateRef.current = getPathFromState;\n    getActionFromStateRef.current = getActionFromState;\n  });\n  const server = React.useContext(ServerContext);\n  const getInitialState = React.useCallback(() => {\n    let value;\n    if (enabledRef.current) {\n      const location = (server === null || server === void 0 ? void 0 : server.location) ?? (typeof window !== 'undefined' ? window.location : undefined);\n      const path = location ? location.pathname + location.search : undefined;\n      if (path) {\n        value = getStateFromPathRef.current(path, configRef.current);\n      }\n    }\n    const thenable = {\n      then(onfulfilled) {\n        return Promise.resolve(onfulfilled ? onfulfilled(value) : value);\n      },\n      catch() {\n        return thenable;\n      }\n    };\n    return thenable;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  const previousIndexRef = React.useRef(undefined);\n  const previousStateRef = React.useRef(undefined);\n  const pendingPopStatePathRef = React.useRef(undefined);\n  React.useEffect(() => {\n    previousIndexRef.current = history.index;\n    return history.listen(() => {\n      const navigation = ref.current;\n      if (!navigation || !enabled) {\n        return;\n      }\n      const path = location.pathname + location.search;\n      const index = history.index;\n      const previousIndex = previousIndexRef.current ?? 0;\n      previousIndexRef.current = index;\n      pendingPopStatePathRef.current = path;\n\n      // When browser back/forward is clicked, we first need to check if state object for this index exists\n      // If it does we'll reset to that state object\n      // Otherwise, we'll handle it like a regular deep link\n      const record = history.get(index);\n      if ((record === null || record === void 0 ? void 0 : record.path) === path && record !== null && record !== void 0 && record.state) {\n        navigation.resetRoot(record.state);\n        return;\n      }\n      const state = getStateFromPathRef.current(path, configRef.current);\n\n      // We should only dispatch an action when going forward\n      // Otherwise the action will likely add items to history, which would mess things up\n      if (state) {\n        // Make sure that the routes in the state exist in the root navigator\n        // Otherwise there's an error in the linking configuration\n        const rootState = navigation.getRootState();\n        if (state.routes.some(r => !(rootState !== null && rootState !== void 0 && rootState.routeNames.includes(r.name)))) {\n          console.warn(\"The navigation state parsed from the URL contains routes not present in the root navigator. This usually means that the linking configuration doesn't match the navigation structure. See https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.\");\n          return;\n        }\n        if (index > previousIndex) {\n          const action = getActionFromStateRef.current(state, configRef.current);\n          if (action !== undefined) {\n            try {\n              navigation.dispatch(action);\n            } catch (e) {\n              // Ignore any errors from deep linking.\n              // This could happen in case of malformed links, navigation object not being initialized etc.\n              console.warn(`An error occurred when trying to handle the link '${path}': ${typeof e === 'object' && e != null && 'message' in e ?\n              // @ts-expect-error: we're already checking for this\n              e.message : e}`);\n            }\n          } else {\n            navigation.resetRoot(state);\n          }\n        } else {\n          navigation.resetRoot(state);\n        }\n      } else {\n        // if current path didn't return any state, we should revert to initial state\n        navigation.resetRoot(state);\n      }\n    });\n  }, [enabled, history, ref]);\n  React.useEffect(() => {\n    var _ref$current;\n    if (!enabled) {\n      return;\n    }\n    const getPathForRoute = (route, state) => {\n      // If the `route` object contains a `path`, use that path as long as `route.name` and `params` still match\n      // This makes sure that we preserve the original URL for wildcard routes\n      if (route !== null && route !== void 0 && route.path) {\n        const stateForPath = getStateFromPathRef.current(route.path, configRef.current);\n        if (stateForPath) {\n          const focusedRoute = findFocusedRoute(stateForPath);\n          if (focusedRoute && focusedRoute.name === route.name && isEqual(focusedRoute.params, route.params)) {\n            return route.path;\n          }\n        }\n      }\n      return getPathFromStateRef.current(state, configRef.current);\n    };\n    if (ref.current) {\n      // We need to record the current metadata on the first render if they aren't set\n      // This will allow the initial state to be in the history entry\n      const state = ref.current.getRootState();\n      if (state) {\n        const route = findFocusedRoute(state);\n        const path = getPathForRoute(route, state);\n        if (previousStateRef.current === undefined) {\n          previousStateRef.current = state;\n        }\n        history.replace({\n          path,\n          state\n        });\n      }\n    }\n    const onStateChange = async () => {\n      const navigation = ref.current;\n      if (!navigation || !enabled) {\n        return;\n      }\n      const previousState = previousStateRef.current;\n      const state = navigation.getRootState();\n\n      // root state may not available, for example when root navigators switch inside the container\n      if (!state) {\n        return;\n      }\n      const pendingPath = pendingPopStatePathRef.current;\n      const route = findFocusedRoute(state);\n      const path = getPathForRoute(route, state);\n      previousStateRef.current = state;\n      pendingPopStatePathRef.current = undefined;\n\n      // To detect the kind of state change, we need to:\n      // - Find the common focused navigation state in previous and current state\n      // - If only the route keys changed, compare history/routes.length to check if we go back/forward/replace\n      // - If no common focused navigation state found, it's a replace\n      const [previousFocusedState, focusedState] = findMatchingState(previousState, state);\n      if (previousFocusedState && focusedState &&\n      // We should only handle push/pop if path changed from what was in last `popstate`\n      // Otherwise it's likely a change triggered by `popstate`\n      path !== pendingPath) {\n        const historyDelta = (focusedState.history ? focusedState.history.length : focusedState.routes.length) - (previousFocusedState.history ? previousFocusedState.history.length : previousFocusedState.routes.length);\n        if (historyDelta > 0) {\n          // If history length is increased, we should pushState\n          // Note that path might not actually change here, for example, drawer open should pushState\n          history.push({\n            path,\n            state\n          });\n        } else if (historyDelta < 0) {\n          // If history length is decreased, i.e. entries were removed, we want to go back\n\n          const nextIndex = history.backIndex({\n            path\n          });\n          const currentIndex = history.index;\n          try {\n            if (nextIndex !== -1 && nextIndex < currentIndex) {\n              // An existing entry for this path exists and it's less than current index, go back to that\n              await history.go(nextIndex - currentIndex);\n            } else {\n              // We couldn't find an existing entry to go back to, so we'll go back by the delta\n              // This won't be correct if multiple routes were pushed in one go before\n              // Usually this shouldn't happen and this is a fallback for that\n              await history.go(historyDelta);\n            }\n\n            // Store the updated state as well as fix the path if incorrect\n            history.replace({\n              path,\n              state\n            });\n          } catch (e) {\n            // The navigation was interrupted\n          }\n        } else {\n          // If history length is unchanged, we want to replaceState\n          history.replace({\n            path,\n            state\n          });\n        }\n      } else {\n        // If no common navigation state was found, assume it's a replace\n        // This would happen if the user did a reset/conditionally changed navigators\n        history.replace({\n          path,\n          state\n        });\n      }\n    };\n\n    // We debounce onStateChange coz we don't want multiple state changes to be handled at one time\n    // This could happen since `history.go(n)` is asynchronous\n    // If `pushState` or `replaceState` were called before `history.go(n)` completes, it'll mess stuff up\n    return (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.addListener('state', series(onStateChange));\n  });\n  return {\n    getInitialState\n  };\n}\n//# sourceMappingURL=useLinking.js.map"]},"metadata":{},"sourceType":"module"}