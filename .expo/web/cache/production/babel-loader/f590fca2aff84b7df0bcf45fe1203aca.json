{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"disabled\",\"onPress\",\"theme\",\"value\",\"status\",\"testID\"];function _extends(){_extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import*as React from'react';import Animated from\"react-native-web/dist/exports/Animated\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import View from\"react-native-web/dist/exports/View\";import{withInternalTheme}from\"../../core/theming\";import{getAndroidSelectionControlColor}from\"../Checkbox/utils\";import TouchableRipple from\"../TouchableRipple/TouchableRipple\";import{RadioButtonContext}from\"./RadioButtonGroup\";import{handlePress,isChecked}from\"./utils\";var BORDER_WIDTH=2;var RadioButtonAndroid=function RadioButtonAndroid(_ref){var disabled=_ref.disabled,onPress=_ref.onPress,theme=_ref.theme,value=_ref.value,status=_ref.status,testID=_ref.testID,rest=_objectWithoutProperties(_ref,_excluded);var _React$useRef=React.useRef(new Animated.Value(BORDER_WIDTH)),borderAnim=_React$useRef.current;var _React$useRef2=React.useRef(new Animated.Value(1)),radioAnim=_React$useRef2.current;var isFirstRendering=React.useRef(true);var scale=theme.animation.scale;React.useEffect(function(){if(isFirstRendering.current){isFirstRendering.current=false;return;}if(status==='checked'){radioAnim.setValue(1.2);Animated.timing(radioAnim,{toValue:1,duration:150*scale,useNativeDriver:true}).start();}else{borderAnim.setValue(10);Animated.timing(borderAnim,{toValue:BORDER_WIDTH,duration:150*scale,useNativeDriver:false}).start();}},[status,borderAnim,radioAnim,scale]);return React.createElement(RadioButtonContext.Consumer,null,function(context){var checked=isChecked({contextValue:context===null||context===void 0?void 0:context.value,status:status,value:value})==='checked';var _getAndroidSelectionC=getAndroidSelectionControlColor({theme:theme,disabled:disabled,checked:checked,customColor:rest.color,customUncheckedColor:rest.uncheckedColor}),rippleColor=_getAndroidSelectionC.rippleColor,selectionControlColor=_getAndroidSelectionC.selectionControlColor;return React.createElement(TouchableRipple,_extends({},rest,{borderless:true,rippleColor:rippleColor,onPress:disabled?undefined:function(event){handlePress({onPress:onPress,onValueChange:context===null||context===void 0?void 0:context.onValueChange,value:value,event:event});},accessibilityRole:\"radio\",accessibilityState:{disabled:disabled,checked:checked},accessibilityLiveRegion:\"polite\",style:styles.container,testID:testID}),React.createElement(Animated.View,{style:[styles.radio,{borderColor:selectionControlColor,borderWidth:borderAnim}]},checked?React.createElement(View,{style:[StyleSheet.absoluteFill,styles.radioContainer]},React.createElement(Animated.View,{style:[styles.dot,{backgroundColor:selectionControlColor,transform:[{scale:radioAnim}]}]})):null));});};RadioButtonAndroid.displayName='RadioButton.Android';var styles=StyleSheet.create({container:{borderRadius:18},radioContainer:{alignItems:'center',justifyContent:'center'},radio:{height:20,width:20,borderRadius:10,margin:8},dot:{height:10,width:10,borderRadius:5}});export default withInternalTheme(RadioButtonAndroid);var RadioButtonAndroidWithTheme=withInternalTheme(RadioButtonAndroid);export{RadioButtonAndroidWithTheme as RadioButtonAndroid};","map":{"version":3,"sources":["RadioButtonAndroid.tsx"],"names":["React","withInternalTheme","getAndroidSelectionControlColor","TouchableRipple","RadioButtonContext","handlePress","isChecked","BORDER_WIDTH","RadioButtonAndroid","disabled","onPress","theme","value","status","testID","rest","current","borderAnim","useRef","Animated","Value","radioAnim","isFirstRendering","scale","animation","useEffect","setValue","timing","toValue","duration","useNativeDriver","start","context","checked","contextValue","rippleColor","selectionControlColor","customColor","color","customUncheckedColor","uncheckedColor","undefined","event","onValueChange","styles","container","radio","borderColor","borderWidth","StyleSheet","absoluteFill","radioContainer","dot","backgroundColor","transform","displayName","create","borderRadius","alignItems","justifyContent","height","width","margin","RadioButtonAndroidWithTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Animated, StyleSheet, View } from 'react-native';\n\nimport { withInternalTheme } from '../../core/theming';\nimport type { $RemoveChildren, InternalTheme } from '../../types';\nimport { getAndroidSelectionControlColor } from '../Checkbox/utils';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\nimport { handlePress, isChecked } from './utils';\n\nexport type Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Value of the radio button\n   */\n  value: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (param?: any) => void;\n  /**\n   * Custom color for unchecked radio.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: InternalTheme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\nconst BORDER_WIDTH = 2;\n\n/**\n * Radio buttons allow the selection a single option from a set.\n * This component follows platform guidelines for Android, but can be used\n * on any platform.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/radio-enabled.android.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/radio-disabled.android.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nconst RadioButtonAndroid = ({\n  disabled,\n  onPress,\n  theme,\n  value,\n  status,\n  testID,\n  ...rest\n}: Props) => {\n  const { current: borderAnim } = React.useRef<Animated.Value>(\n    new Animated.Value(BORDER_WIDTH)\n  );\n\n  const { current: radioAnim } = React.useRef<Animated.Value>(\n    new Animated.Value(1)\n  );\n\n  const isFirstRendering = React.useRef<boolean>(true);\n\n  const { scale } = theme.animation;\n\n  React.useEffect(() => {\n    // Do not run animation on very first rendering\n    if (isFirstRendering.current) {\n      isFirstRendering.current = false;\n      return;\n    }\n\n    if (status === 'checked') {\n      radioAnim.setValue(1.2);\n\n      Animated.timing(radioAnim, {\n        toValue: 1,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    } else {\n      borderAnim.setValue(10);\n\n      Animated.timing(borderAnim, {\n        toValue: BORDER_WIDTH,\n        duration: 150 * scale,\n        useNativeDriver: false,\n      }).start();\n    }\n  }, [status, borderAnim, radioAnim, scale]);\n\n  return (\n    <RadioButtonContext.Consumer>\n      {(context?: RadioButtonContextType) => {\n        const checked =\n          isChecked({\n            contextValue: context?.value,\n            status,\n            value,\n          }) === 'checked';\n\n        const { rippleColor, selectionControlColor } =\n          getAndroidSelectionControlColor({\n            theme,\n            disabled,\n            checked,\n            customColor: rest.color,\n            customUncheckedColor: rest.uncheckedColor,\n          });\n\n        return (\n          <TouchableRipple\n            {...rest}\n            borderless\n            rippleColor={rippleColor}\n            onPress={\n              disabled\n                ? undefined\n                : (event) => {\n                    handlePress({\n                      onPress,\n                      onValueChange: context?.onValueChange,\n                      value,\n                      event,\n                    });\n                  }\n            }\n            accessibilityRole=\"radio\"\n            accessibilityState={{ disabled, checked }}\n            accessibilityLiveRegion=\"polite\"\n            style={styles.container}\n            testID={testID}\n          >\n            <Animated.View\n              style={[\n                styles.radio,\n                {\n                  borderColor: selectionControlColor,\n                  borderWidth: borderAnim,\n                },\n              ]}\n            >\n              {checked ? (\n                <View style={[StyleSheet.absoluteFill, styles.radioContainer]}>\n                  <Animated.View\n                    style={[\n                      styles.dot,\n                      {\n                        backgroundColor: selectionControlColor,\n                        transform: [{ scale: radioAnim }],\n                      },\n                    ]}\n                  />\n                </View>\n              ) : null}\n            </Animated.View>\n          </TouchableRipple>\n        );\n      }}\n    </RadioButtonContext.Consumer>\n  );\n};\n\nRadioButtonAndroid.displayName = 'RadioButton.Android';\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n  },\n  radioContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  radio: {\n    height: 20,\n    width: 20,\n    borderRadius: 10,\n    margin: 8,\n  },\n  dot: {\n    height: 10,\n    width: 10,\n    borderRadius: 5,\n  },\n});\n\nexport default withInternalTheme(RadioButtonAndroid);\n\n// @component-docs ignore-next-line\nconst RadioButtonAndroidWithTheme = withInternalTheme(RadioButtonAndroid);\n// @component-docs ignore-next-line\nexport { RadioButtonAndroidWithTheme as RadioButtonAndroid };\n"]},"metadata":{},"sourceType":"module"}