{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";var _excluded=[\"icon\",\"onPress\",\"forceTextInputFocus\",\"color\"];function _extends(){_extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import React from'react';import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import View from\"react-native-web/dist/exports/View\";import{useInternalTheme}from\"../../../core/theming\";import IconButton from\"../../IconButton/IconButton\";import{ICON_SIZE}from\"../constants\";import{getConstants}from\"../helpers\";var StyleContext=React.createContext({style:{},isTextInputFocused:false,forceFocus:function forceFocus(){},testID:''});var IconAdornment=function IconAdornment(_ref){var icon=_ref.icon,topPosition=_ref.topPosition,side=_ref.side,isTextInputFocused=_ref.isTextInputFocused,forceFocus=_ref.forceFocus,testID=_ref.testID;var _useInternalTheme=useInternalTheme(),isV3=_useInternalTheme.isV3;var _getConstants=getConstants(isV3),ICON_OFFSET=_getConstants.ICON_OFFSET;var style=_defineProperty({top:topPosition},side,ICON_OFFSET);var contextState={style:style,isTextInputFocused:isTextInputFocused,forceFocus:forceFocus,testID:testID};return React.createElement(StyleContext.Provider,{value:contextState},icon);};var TextInputIcon=function TextInputIcon(_ref2){var icon=_ref2.icon,onPress=_ref2.onPress,forceTextInputFocus=_ref2.forceTextInputFocus,color=_ref2.color,rest=_objectWithoutProperties(_ref2,_excluded);var _React$useContext=React.useContext(StyleContext),style=_React$useContext.style,isTextInputFocused=_React$useContext.isTextInputFocused,forceFocus=_React$useContext.forceFocus,testID=_React$useContext.testID;var onPressWithFocusControl=React.useCallback(function(e){if(forceTextInputFocus&&!isTextInputFocused){forceFocus();}onPress===null||onPress===void 0?void 0:onPress(e);},[forceTextInputFocus,forceFocus,isTextInputFocused,onPress]);var theme=useInternalTheme();var iconColor=color;if(theme.isV3){if(rest.disabled){iconColor=theme.colors.onSurface;}iconColor=theme.colors.onSurfaceVariant;}else{iconColor=theme.colors.text;}return React.createElement(View,{style:[styles.container,style]},React.createElement(IconButton,_extends({icon:icon,style:styles.iconButton,size:ICON_SIZE,onPress:onPressWithFocusControl,iconColor:typeof color==='function'?color(isTextInputFocused):iconColor,testID:testID},rest)));};TextInputIcon.displayName='TextInput.Icon';TextInputIcon.defaultProps={forceTextInputFocus:true};var styles=StyleSheet.create({container:{position:'absolute',width:ICON_SIZE,height:ICON_SIZE,justifyContent:'center',alignItems:'center'},iconButton:{margin:0}});export default TextInputIcon;export{IconAdornment};","map":{"version":3,"mappings":"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","names":["React","useInternalTheme","IconButton","ICON_SIZE","getConstants","StyleContext","createContext","style","isTextInputFocused","forceFocus","testID","IconAdornment","_ref","icon","topPosition","side","isV3","ICON_OFFSET","top","contextState","Provider","value","TextInputIcon","_ref2","onPress","forceTextInputFocus","color","rest","useContext","onPressWithFocusControl","useCallback","e","theme","iconColor","disabled","colors","onSurface","onSurfaceVariant","text","View","styles","container","iconButton","size","displayName","defaultProps","StyleSheet","create","position","width","height","justifyContent","alignItems","margin"],"sources":["TextInputIcon.tsx"],"sourcesContent":["import React from 'react';\nimport {\n  GestureResponderEvent,\n  StyleProp,\n  StyleSheet,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport { useInternalTheme } from '../../../core/theming';\nimport type { $Omit, ThemeProp } from '../../../types';\nimport type { IconSource } from '../../Icon';\nimport IconButton from '../../IconButton/IconButton';\nimport { ICON_SIZE } from '../constants';\nimport { getConstants } from '../helpers';\n\nexport type Props = $Omit<\n  React.ComponentProps<typeof IconButton>,\n  'icon' | 'theme' | 'color'\n> & {\n  /**\n   * @renamed Renamed from 'name' to 'icon` in v5.x\n   * Icon to show.\n   */\n  icon: IconSource;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Whether the TextInput will focus after onPress.\n   */\n  forceTextInputFocus?: boolean;\n  /**\n   * Color of the icon or a function receiving a boolean indicating whether the TextInput is focused and returning the color.\n   */\n  color?: ((isTextInputFocused: boolean) => string | undefined) | string;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme?: ThemeProp;\n};\n\ntype StyleContextType = {\n  style: StyleProp<ViewStyle>;\n  isTextInputFocused: boolean;\n  forceFocus: () => void;\n  testID: string;\n};\n\nconst StyleContext = React.createContext<StyleContextType>({\n  style: {},\n  isTextInputFocused: false,\n  forceFocus: () => {},\n  testID: '',\n});\n\nconst IconAdornment: React.FunctionComponent<\n  {\n    testID: string;\n    icon: React.ReactNode;\n    topPosition: number;\n    side: 'left' | 'right';\n  } & Omit<StyleContextType, 'style'>\n> = ({ icon, topPosition, side, isTextInputFocused, forceFocus, testID }) => {\n  const { isV3 } = useInternalTheme();\n  const { ICON_OFFSET } = getConstants(isV3);\n\n  const style = {\n    top: topPosition,\n    [side]: ICON_OFFSET,\n  };\n  const contextState = { style, isTextInputFocused, forceFocus, testID };\n\n  return (\n    <StyleContext.Provider value={contextState}>{icon}</StyleContext.Provider>\n  );\n};\n\n/**\n * A component to render a leading / trailing icon in the TextInput\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/textinput-flat.icon.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState('');\n *\n *   return (\n *     <TextInput\n *       label=\"Password\"\n *       secureTextEntry\n *       right={<TextInput.Icon icon=\"eye\" />}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\n\nconst TextInputIcon = ({\n  icon,\n  onPress,\n  forceTextInputFocus,\n  color,\n  ...rest\n}: Props) => {\n  const { style, isTextInputFocused, forceFocus, testID } =\n    React.useContext(StyleContext);\n\n  const onPressWithFocusControl = React.useCallback(\n    (e: GestureResponderEvent) => {\n      if (forceTextInputFocus && !isTextInputFocused) {\n        forceFocus();\n      }\n\n      onPress?.(e);\n    },\n    [forceTextInputFocus, forceFocus, isTextInputFocused, onPress]\n  );\n\n  const theme = useInternalTheme();\n\n  let iconColor = color;\n\n  if (theme.isV3) {\n    if (rest.disabled) {\n      iconColor = theme.colors.onSurface;\n    }\n    iconColor = theme.colors.onSurfaceVariant;\n  } else {\n    iconColor = theme.colors.text;\n  }\n\n  return (\n    <View style={[styles.container, style]}>\n      <IconButton\n        icon={icon}\n        style={styles.iconButton}\n        size={ICON_SIZE}\n        onPress={onPressWithFocusControl}\n        iconColor={\n          typeof color === 'function' ? color(isTextInputFocused) : iconColor\n        }\n        testID={testID}\n        {...rest}\n      />\n    </View>\n  );\n};\nTextInputIcon.displayName = 'TextInput.Icon';\n\nTextInputIcon.defaultProps = {\n  forceTextInputFocus: true,\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    width: ICON_SIZE,\n    height: ICON_SIZE,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  iconButton: {\n    margin: 0,\n  },\n});\n\nexport default TextInputIcon;\n\n// @component-docs ignore-next-line\nexport { IconAdornment };\n"]},"metadata":{},"sourceType":"module"}