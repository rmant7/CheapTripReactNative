{"ast":null,"code":"export var handlePress=function handlePress(_ref){var onPress=_ref.onPress,value=_ref.value,onValueChange=_ref.onValueChange,event=_ref.event;if(onPress&&onValueChange){console.warn(\"onPress in the scope of RadioButtonGroup will not be executed, use onValueChange instead\");}onValueChange?onValueChange(value):onPress===null||onPress===void 0?void 0:onPress(event);};export var isChecked=function isChecked(_ref2){var value=_ref2.value,status=_ref2.status,contextValue=_ref2.contextValue;if(contextValue!==undefined&&contextValue!==null){return contextValue===value?'checked':'unchecked';}else{return status;}};","map":{"version":3,"mappings":"AAEA,MAAO,IAAMA,YAAW,CAAG,QAAdA,YAAW,CAAGC,KAUrB,IATJC,QAAO,CASRD,KATCC,OAAO,CACPC,KAAK,CAQNF,KARCE,KAAK,CACLC,aAAa,CAOdH,KAPCG,aAAa,CACbC,MAMDJ,KANCI,MAOA,GAAIH,OAAO,EAAIE,aAAa,CAAE,CAC5BE,OAAO,CAACC,IAAI,4FAEX,CACH,CAEAH,aAAa,CAAGA,aAAa,CAACD,KAAK,CAAC,CAAGD,OAAO,SAAPA,OAAO,iBAAPA,OAAO,CAAGG,KAAK,CAAC,CACzD,CAAC,CAED,MAAO,IAAMG,UAAS,CAAG,QAAZA,UAAS,CAAGC,MAQnB,IAPJN,MAAK,CAONM,MAPCN,KAAK,CACLO,MAAM,CAMPD,MANCC,MAAM,CACNC,aAKDF,MALCE,aAMA,GAAIA,YAAY,GAAKC,SAAS,EAAID,YAAY,GAAK,IAAI,CAAE,CACvD,MAAOA,aAAY,GAAKR,KAAK,CAAG,SAAS,CAAG,WAAW,CACzD,CAAC,IAAM,CACL,MAAOO,OAAM,CACf,CACF,CAAC","names":["handlePress","_ref","onPress","value","onValueChange","event","console","warn","isChecked","_ref2","status","contextValue","undefined"],"sources":["utils.ts"],"sourcesContent":["import type { GestureResponderEvent } from 'react-native';\n\nexport const handlePress = ({\n  onPress,\n  value,\n  onValueChange,\n  event,\n}: {\n  onPress?: (e: GestureResponderEvent) => void;\n  value: string;\n  onValueChange?: (value: string) => void;\n  event: GestureResponderEvent;\n}) => {\n  if (onPress && onValueChange) {\n    console.warn(\n      `onPress in the scope of RadioButtonGroup will not be executed, use onValueChange instead`\n    );\n  }\n\n  onValueChange ? onValueChange(value) : onPress?.(event);\n};\n\nexport const isChecked = ({\n  value,\n  status,\n  contextValue,\n}: {\n  value: string;\n  status?: 'checked' | 'unchecked';\n  contextValue?: string;\n}) => {\n  if (contextValue !== undefined && contextValue !== null) {\n    return contextValue === value ? 'checked' : 'unchecked';\n  } else {\n    return status;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}