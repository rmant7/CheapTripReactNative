{"ast":null,"code":"import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";var _excluded=[\"size\",\"source\",\"style\",\"onError\",\"onLayout\",\"onLoad\",\"onLoadEnd\",\"onLoadStart\",\"onProgress\",\"theme\"];function _extends(){_extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import*as React from'react';import Image from\"react-native-web/dist/exports/Image\";import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import View from\"react-native-web/dist/exports/View\";import{withInternalTheme}from\"../../core/theming\";var defaultSize=64;var AvatarImage=function AvatarImage(_ref){var _ref$size=_ref.size,size=_ref$size===void 0?defaultSize:_ref$size,source=_ref.source,style=_ref.style,onError=_ref.onError,onLayout=_ref.onLayout,onLoad=_ref.onLoad,onLoadEnd=_ref.onLoadEnd,onLoadStart=_ref.onLoadStart,onProgress=_ref.onProgress,theme=_ref.theme,rest=_objectWithoutProperties(_ref,_excluded);var colors=theme.colors;var _ref2=StyleSheet.flatten(style)||{},_ref2$backgroundColor=_ref2.backgroundColor,backgroundColor=_ref2$backgroundColor===void 0?colors===null||colors===void 0?void 0:colors.primary:_ref2$backgroundColor;return React.createElement(View,_extends({style:[{width:size,height:size,borderRadius:size/2,backgroundColor:backgroundColor},style]},rest),typeof source==='function'&&source({size:size}),typeof source!=='function'&&React.createElement(Image,{source:source,style:{width:size,height:size,borderRadius:size/2},onError:onError,onLayout:onLayout,onLoad:onLoad,onLoadEnd:onLoadEnd,onLoadStart:onLoadStart,onProgress:onProgress,accessibilityIgnoresInvertColors:true}));};AvatarImage.displayName='Avatar.Image';export default withInternalTheme(AvatarImage);","map":{"version":3,"sources":["AvatarImage.tsx"],"names":["React","withInternalTheme","defaultSize","AvatarImage","size","source","style","onError","onLayout","onLoad","onLoadEnd","onLoadStart","onProgress","theme","rest","colors","backgroundColor","primary","StyleSheet","flatten","width","height","borderRadius","displayName"],"mappings":"qfAAA,MAAO,GAAKA,MAAK,KAAM,OAAO,CAAA,6KAW9B,OAASC,iBAAiB,0BAG1B,GAAMC,YAAW,CAAG,EAAE,CAoEtB,GAAMC,YAAW,CAAG,QAAdA,YAAW,CAAG,IAAA,CAYP,CAZQ,cAYb,IAAA,CAXNC,IAAI,CAAJA,IAAI,oBAAGF,WAAW,WAClBG,MAAM,CAUA,IAAA,CAVNA,MAAM,CACNC,KAAK,CASC,IAAA,CATNA,KAAK,CACLC,OAAO,CAQD,IAAA,CARNA,OAAO,CACPC,QAAQ,CAOF,IAAA,CAPNA,QAAQ,CACRC,MAAM,CAMA,IAAA,CANNA,MAAM,CACNC,SAAS,CAKH,IAAA,CALNA,SAAS,CACTC,WAAW,CAIL,IAAA,CAJNA,WAAW,CACXC,UAAU,CAGJ,IAAA,CAHNA,UAAU,CACVC,KAAK,CAEC,IAAA,CAFNA,KAAK,CACFC,IAAAA,0BACG,IAAA,YACN,GAAQC,OAAAA,CAAWF,KAAK,CAAhBE,MAAAA,CAER,UAA8CG,UAAU,CAACC,OAAO,CAACb,KAAK,CAAC,EAAI,CAAC,CAAC,6BAArEU,eAAe,CAAfA,eAAe,gCAAGD,MAAM,GAAA,IAAA,EAANA,MAAM,GAAA,IAAA,EAAA,CAAA,IAAA,EAAA,CAANA,MAAM,CAAEE,OAAAA,uBAElC,MACE,MAAA,CAAA,aAAA,CAAC,IAAI,CAAA,QAAA,CAAA,CACH,KAAK,CAAE,CACL,CACEG,KAAK,CAAEhB,IAAI,CACXiB,MAAM,CAAEjB,IAAI,CACZkB,YAAY,CAAElB,IAAI,CAAG,CAAC,CACtBY,eAAAA,CAAAA,eACF,CAAC,CACDV,KAAK,CACL,CAAA,CACEQ,IAAI,CAAA,CAEP,MAAOT,OAAM,GAAK,UAAU,EAAIA,MAAM,CAAC,CAAED,IAAAA,CAAAA,IAAK,CAAC,CAAC,CAChD,MAAOC,OAAM,GAAK,UAAU,EAC3B,KAAA,CAAA,aAAA,CAAC,KAAK,CAAA,CACJ,MAAM,CAAEA,MAAO,CACf,KAAK,CAAE,CAAEe,KAAK,CAAEhB,IAAI,CAAEiB,MAAM,CAAEjB,IAAI,CAAEkB,YAAY,CAAElB,IAAI,CAAG,CAAE,CAAE,CAC7D,OAAO,CAAEG,OAAQ,CACjB,QAAQ,CAAEC,QAAS,CACnB,MAAM,CAAEC,MAAO,CACf,SAAS,CAAEC,SAAU,CACrB,WAAW,CAAEC,WAAY,CACzB,UAAU,CAAEC,UAAW,CACvB,gCAAgC,CAAA,IAAA,CAAA,CAEnC,CACI,CAEX,CAAC,CAEDT,WAAW,CAACoB,WAAW,CAAG,cAAc,CAExC,cAAetB,kBAAiB,CAACE,WAAW,CAAC","sourcesContent":["import * as React from 'react';\nimport {\n  Image,\n  ImageProps,\n  ImageSourcePropType,\n  StyleProp,\n  StyleSheet,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport { withInternalTheme } from '../../core/theming';\nimport type { InternalTheme } from '../../types';\n\nconst defaultSize = 64;\n\nexport type AvatarImageSource =\n  | ImageSourcePropType\n  | ((props: { size: number }) => React.ReactNode);\n\nexport type Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Image to display for the `Avatar`.\n   * It accepts a standard React Native Image `source` prop\n   * Or a function that returns an `Image`.\n   */\n  source: AvatarImageSource;\n  /**\n   * Size of the avatar.\n   */\n  size?: number;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Invoked on load error.\n   */\n  onError?: ImageProps['onError'];\n  /**\n   * Invoked on mount and on layout changes.\n   */\n  onLayout?: ImageProps['onLayout'];\n  /**\n   * Invoked when load completes successfully.\n   */\n  onLoad?: ImageProps['onLoad'];\n  /**\n   * Invoked when load either succeeds or fails.\n   */\n  onLoadEnd?: ImageProps['onLoadEnd'];\n  /**\n   * Invoked on load start.\n   */\n  onLoadStart?: ImageProps['onLoadStart'];\n  /**\n   * Invoked on download progress.\n   */\n  onProgress?: ImageProps['onProgress'];\n  /**\n   * @optional\n   */\n  theme: InternalTheme;\n};\n\n/**\n * Avatars can be used to represent people in a graphical way.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/avatar-image.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Avatar.Image size={24} source={require('../assets/avatar.png')} />\n * );\n * export default MyComponent\n * ```\n */\nconst AvatarImage = ({\n  size = defaultSize,\n  source,\n  style,\n  onError,\n  onLayout,\n  onLoad,\n  onLoadEnd,\n  onLoadStart,\n  onProgress,\n  theme,\n  ...rest\n}: Props) => {\n  const { colors } = theme;\n\n  const { backgroundColor = colors?.primary } = StyleSheet.flatten(style) || {};\n\n  return (\n    <View\n      style={[\n        {\n          width: size,\n          height: size,\n          borderRadius: size / 2,\n          backgroundColor,\n        },\n        style,\n      ]}\n      {...rest}\n    >\n      {typeof source === 'function' && source({ size })}\n      {typeof source !== 'function' && (\n        <Image\n          source={source}\n          style={{ width: size, height: size, borderRadius: size / 2 }}\n          onError={onError}\n          onLayout={onLayout}\n          onLoad={onLoad}\n          onLoadEnd={onLoadEnd}\n          onLoadStart={onLoadStart}\n          onProgress={onProgress}\n          accessibilityIgnoresInvertColors\n        />\n      )}\n    </View>\n  );\n};\n\nAvatarImage.displayName = 'Avatar.Image';\n\nexport default withInternalTheme(AvatarImage);\n"]},"metadata":{},"sourceType":"module"}